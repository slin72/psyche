{"version":3,"sources":["3d/Stars.js","3d/Sun.js","images/earth.jpg","images/moon.png","images/mars.jpg","3d/Earth.js","3d/Mars.js","audio/laser.mp3","audio/engine.mp3","audio/engine2.mp3","audio/bg.mp3","audio/warp.mp3","audio/click.mp3","audio/explosion.mp3","audio/index.js","store.js","3d/Rig.js","3d/Ship.js","3d/Spacecraft.js","3d/Astroid.js","3d/Solar.js","3d/Particles.js","3d/Buttons.tsx","App.tsx","index.tsx"],"names":["Stars","count","positions","useMemo","i","r","theta","Math","PI","random","phi","acos","x","cos","sin","y","z","push","Float32Array","attachObject","length","array","itemSize","size","sizeAttenuation","color","fog","Sun","ref","useRef","useFrame","current","rotation","scale","position","args","distance","intensity","Earth","groupref","useLoader","THREE","earthImg","moonImg","marsImg","earth","moon","state","delta","map","roughness","Planet","mars","zap","Audio","zapAudio","engine","engineAudio","engine2","engine2Audio","bg","bgAudio","warp","warpAudio","click","clickAudio","guid","explosionAudio","useStore","create","set","get","spline","Curves","GrannyKnot","track","cancelLaserTO","undefined","cancelExplosionTO","box","sound","camera","points","health","lasers","explosions","rocks","randomData","enemies","mutation","t","startTime","Date","now","fov","hits","rings","randomRings","particles","looptime","binormal","normal","clock","mouse","dummy","ray","actions","init","start","toggleSound","addEffect","time","parameters","path","getPointAt","multiplyScalar","warping","playAudio","audio","filter","test","e","a","concat","previous","updates","data","clearTimeout","setTimeout","rock","find","enemy","shoot","updateMouse","clientX","clientY","window","innerWidth","innerHeight","min","copy","offset","max","expandByScalar","hit","result","intersectBox","origin","distanceTo","radius","Array","fill","pos","clone","add","speed","temp","pickt","tangents","pick","floor","lookAt","getLength","matrix","binormals","toArray","volume","loop","getState","currentTime","play","pause","Rig","children","group","rig","useThree","segments","pickNext","subVectors","dir","getTangentAt","cross","quaternion","setFromRotationMatrix","updateProjectionMatrix","lightPos","lightgreen","hotpink","geometry","laserMaterial","crossMaterial","direction","Ship","useGLTF","nodes","materials","main","laserGroup","laserLight","exhaust","target","getElapsedTime","getWorldPosition","getWorldDirection","negate","visible","name","renderOrder","material","castShadow","receiveShadow","Psyche","Psyche001","Psyche002","Astroid","psyche_LP001","psycheAsteroid","Solar","Particles","instancedMesh","useEffect","forEach","particle","updateMatrix","setMatrixAt","instanceMatrix","needsUpdate","frustumCulled","Box","rest","attach","Button","props","useState","hover","setHover","setColor","setSize","text","setText","onHover","onBlur","onSelect","Text","fontSize","anchorX","anchorY","App","Solarsystem","fallback","gl","antialias","near","far","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.00ba2f60.chunk.js","sourcesContent":["import React, { useMemo } from 'react'\n\nexport default function Stars({ count = 2000 }) {\n  const positions = useMemo(() => {\n    let positions = []\n    for (let i = 0; i < count; i++) {\n      const r = 4000\n      const theta = 2 * Math.PI * Math.random()\n      const phi = Math.acos(2 * Math.random() - 1)\n      const x = r * Math.cos(theta) * Math.sin(phi) + (-2000 + Math.random() * 4000)\n      const y = r * Math.sin(theta) * Math.sin(phi) + (-2000 + Math.random() * 4000)\n      const z = r * Math.cos(phi) + (-1000 + Math.random() * 2000)\n      positions.push(x)\n      positions.push(y)\n      positions.push(z)\n    }\n    return new Float32Array(positions)\n  }, [count])\n  return (\n    <points>\n      <bufferGeometry>\n        <bufferAttribute attachObject={['attributes', 'position']} count={positions.length / 3} array={positions} itemSize={3} />\n      </bufferGeometry>\n      <pointsMaterial size={15} sizeAttenuation color=\"white\" fog={false} />\n    </points>\n  )\n}\n","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useFrame, useLoader } from '@react-three/fiber'\nimport {TransformControls, OrbitControls, Stage} from '@react-three/drei'\n\n\nexport default function Sun() {\n  const ref = useRef()\n\n  useFrame( ()=> ref.current.rotation.y  =  ref.current.rotation.y + 0.01 )\n \n  return (\n\n    <group ref={ref} scale={[100, 100, 100]} position={[0, 0, 0]}>\n\n      {/* the sun */}\n      <mesh position={[0, 0, 0]}>\n        <sphereGeometry args={[4, 32, 32]} />\n        <meshBasicMaterial color=\"#FFFF99\" fog={false} />\n        <pointLight distance={6100} intensity={10} color=\"white\" />1\n      </mesh>\n\n    </group>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/earth.117f05cb.jpg\";","export default __webpack_public_path__ + \"static/media/moon.1dd7bdd6.png\";","export default __webpack_public_path__ + \"static/media/mars.d5a1f3ac.jpg\";","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useLoader, useFrame} from '@react-three/fiber'\nimport {TransformControls, OrbitControls, Stage} from '@react-three/drei'\n\nimport earthImg from '../images/earth.jpg'\nimport moonImg from '../images/moon.png'\nimport marsImg from '../images/mars.jpg'\n\nexport default function Earth() {\n\n  const groupref = useRef()\n  const [earth, moon, mars] = useLoader(THREE.TextureLoader, [earthImg, moonImg, marsImg])\n\n  //subscribe the objects in this components to rotate the mesh on every frame rendered.\n  useFrame( (state, delta) => groupref.current.rotation.y  += 0.01 )\n\n  //return the object view (three-js elements expressed in JSX)\n  return (\n    // mars <group ref={ref} scale={[100, 100, 100]} position={[-5000, 0, 5000]}>\n\n    <group \n      ref={groupref} \n      scale={[200, 200, 200]} \n      position={[-4000, 0, 4000]}>\n\n      {/* earth */}      \n      <mesh position={[0,0,0]}>\n        <sphereGeometry args={[5, 32, 32]} />\n        <meshStandardMaterial map={earth} roughness={1} fog={false} />\n      </mesh>\n\n\n      {/* moon */}\n      <mesh position={[5, 0, 5]}>\n        <sphereGeometry args={[0.75, 32, 32]} />\n        <meshStandardMaterial roughness={1} map={moon} fog={false} />\n      </mesh>\n\n\n      {/* <pointLight position={[-5, -5, -5]} distance={1000} intensity={6} /> */}\n      {/* sun \n      <mesh position={[-30, 0, -60]}>\n        <sphereGeometry args={[4, 32, 32]} />\n        <meshBasicMaterial color=\"#FFFF99\" fog={false} />\n        <pointLight distance={6100} intensity={10} color=\"white\" />1\n      </mesh>\n*/}\n    </group>\n  )\n}\n","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useFrame, useLoader } from '@react-three/fiber'\nimport {TransformControls, OrbitControls, Stage} from '@react-three/drei'\n\nimport marsImg from '../images/mars.jpg'\n\nexport default function Planet() {\n  const ref = useRef()\n  const [ mars ] = useLoader(THREE.TextureLoader, [ marsImg ])\n\n  useFrame( ()=> ref.current.rotation.y  =  ref.current.rotation.y + 0.01 )\n \n  return (\n\n    <group ref={ref} scale={[100, 100, 100]} position={[5000, 0, -5000]}>\n\n      {/* mars */}\n      <mesh position={[0,0,0]}>\n        <sphereGeometry args={[5, 32, 32]} />\n        <meshStandardMaterial map={mars} roughness={1} fog={false} />\n      </mesh>\n\n    </group>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/laser.373d639d.mp3\";","export default __webpack_public_path__ + \"static/media/engine.75bbe12e.mp3\";","export default __webpack_public_path__ + \"static/media/engine2.87c3c40a.mp3\";","export default __webpack_public_path__ + \"static/media/bg.898c3fe7.mp3\";","export default __webpack_public_path__ + \"static/media/warp.1f9bec85.mp3\";","export default __webpack_public_path__ + \"static/media/click.db461987.mp3\";","export default __webpack_public_path__ + \"static/media/explosion.615cfd43.mp3\";","import zapAudio from './laser.mp3'\nimport engineAudio from './engine.mp3'\nimport engine2Audio from './engine2.mp3'\nimport bgAudio from './bg.mp3'\nimport warpAudio from './warp.mp3'\nimport clickAudio from './click.mp3'\nimport explosionAudio from './explosion.mp3'\n\nconst mp3 = { explosion: explosionAudio }\n\nconst zap = new Audio(zapAudio)\nconst engine = new Audio(engineAudio)\nconst engine2 = new Audio(engine2Audio)\nconst bg = new Audio(bgAudio)\nconst warp = new Audio(warpAudio)\nconst click = new Audio(clickAudio)\nconst explosion = new Audio(explosionAudio)\n\nexport { zap, engine, engine2, bg, warp, click, explosion, mp3 }\n","import * as THREE from 'three'\nimport { Curves } from 'three/examples/jsm/curves/CurveExtras'\nimport { addEffect } from '@react-three/fiber'\nimport create from 'zustand'\nimport * as audio from './audio'\n\nlet guid = 1\n\nconst useStore = create((set, get) => {\n  let spline = new Curves.GrannyKnot()\n  let track = new THREE.TubeBufferGeometry(spline, 250, 0.2, 10, true)\n  let cancelLaserTO = undefined\n  let cancelExplosionTO = undefined\n  const box = new THREE.Box3()\n\n  return {\n    sound: false,\n    camera: undefined,\n    points: 0,\n    health: 100,\n    lasers: [],\n    explosions: [],\n    rocks: randomData(100, track, 150, 8, () => 1 + Math.random() * 2.5),\n    enemies: randomData(10, track, 20, 15, 1),\n\n    mutation: {\n      t: 0,\n      position: new THREE.Vector3(),\n      startTime: Date.now(),\n\n      track,\n      scale: 15,\n      fov: 70,\n      hits: false,\n      rings: randomRings(30, track),\n      particles: randomData(1500, track, 100, 1, () => 0.5 + Math.random() * 0.8),\n      looptime: 40 * 1000,\n      binormal: new THREE.Vector3(),\n      normal: new THREE.Vector3(),\n      clock: new THREE.Clock(false),\n      mouse: new THREE.Vector2(-250, 50),\n\n      // Re-usable objects\n      dummy: new THREE.Object3D(),\n      ray: new THREE.Ray(),\n      box: new THREE.Box3()\n    },\n\n    actions: {\n      init(camera) {\n        const { mutation, actions } = get()\n\n        set({ camera })\n        mutation.clock.start()\n        actions.toggleSound(get().sound)\n\n        addEffect(() => {\n          const { rocks, enemies } = get()\n\n          const time = Date.now()\n          const t = (mutation.t = ((time - mutation.startTime) % mutation.looptime) / mutation.looptime)\n          mutation.position = track.parameters.path.getPointAt(t)\n          mutation.position.multiplyScalar(mutation.scale)\n\n          // test for wormhole/warp\n          let warping = false\n          if (t > 0.3 && t < 0.4) {\n            if (!warping) {\n              warping = true\n              playAudio(audio.warp)\n            }\n          } else if (t > 0.5) warping = false\n\n          // test for hits\n          const r = rocks.filter(actions.test)\n          const e = enemies.filter(actions.test)\n          const a = r.concat(e)\n          const previous = mutation.hits\n          mutation.hits = a.length\n          if (previous === 0 && mutation.hits) playAudio(audio.click)\n          const lasers = get().lasers\n          if (mutation.hits && lasers.length && time - lasers[lasers.length - 1] < 100) {\n            const updates = a.map((data) => ({ time: Date.now(), ...data }))\n            set((state) => ({ explosions: [...state.explosions, ...updates] }))\n            clearTimeout(cancelExplosionTO)\n            cancelExplosionTO = setTimeout(() => set((state) => ({ explosions: state.explosions.filter(({ time }) => Date.now() - time <= 1000) })), 1000)\n            set((state) => ({\n              points: state.points + r.length * 100 + e.length * 200,\n              rocks: state.rocks.filter((rock) => !r.find((r) => r.guid === rock.guid)),\n              enemies: state.enemies.filter((enemy) => !e.find((e) => e.guid === enemy.guid))\n            }))\n          }\n          //if (a.some(data => data.distance < 15)) set(state => ({ health: state.health - 1 }))\n        })\n      },\n      shoot() {\n        set((state) => ({ lasers: [...state.lasers, Date.now()] }))\n        clearTimeout(cancelLaserTO)\n        cancelLaserTO = setTimeout(() => set((state) => ({ lasers: state.lasers.filter((t) => Date.now() - t <= 1000) })), 1000)\n        playAudio(audio.zap, 0.5)\n      },\n      toggleSound(sound = !get().sound) {\n        set({ sound })\n        playAudio(audio.engine, 1, true)\n        playAudio(audio.engine2, 0.3, true)\n        playAudio(audio.bg, 1, true)\n      },\n      updateMouse({ clientX: x, clientY: y }) {\n        get().mutation.mouse.set(x - window.innerWidth / 2, y - window.innerHeight / 2)\n      },\n      test(data) {\n        box.min.copy(data.offset)\n        box.max.copy(data.offset)\n        box.expandByScalar(data.size * data.scale)\n        data.hit.set(10000, 10000, 10000)\n        const result = get().mutation.ray.intersectBox(box, data.hit)\n        data.distance = get().mutation.ray.origin.distanceTo(data.hit)\n        return result\n      }\n    }\n  }\n})\n\nfunction randomData(count, track, radius, size, scale) {\n  return new Array(count).fill().map(() => {\n    const t = Math.random()\n    const pos = track.parameters.path.getPointAt(t)\n    pos.multiplyScalar(15)\n    const offset = pos\n      .clone()\n      .add(new THREE.Vector3(-radius + Math.random() * radius * 2, -radius + Math.random() * radius * 2, -radius + Math.random() * radius * 2))\n    const speed = 0.1 + Math.random()\n    return { guid: guid++, scale: typeof scale === 'function' ? scale() : scale, size, offset, pos, speed, radius, t, hit: new THREE.Vector3(), distance: 1000 }\n  })\n}\n\nfunction randomRings(count, track) {\n  let temp = []\n  let t = 0.4\n  for (let i = 0; i < count; i++) {\n    t += 0.003\n    const pos = track.parameters.path.getPointAt(t)\n    pos.multiplyScalar(15)\n    const segments = track.tangents.length\n    const pickt = t * segments\n    const pick = Math.floor(pickt)\n    const lookAt = track.parameters.path.getPointAt((t + 1 / track.parameters.path.getLength()) % 1).multiplyScalar(15)\n    const matrix = new THREE.Matrix4().lookAt(pos, lookAt, track.binormals[pick])\n    temp.push([pos.toArray(), matrix])\n  }\n  return temp\n}\n\nfunction playAudio(audio, volume = 1, loop = false) {\n  if (useStore.getState().sound) {\n    audio.currentTime = 0\n    audio.volume = volume\n    audio.loop = loop\n    audio.play()\n  } else audio.pause()\n}\n\nexport default useStore\nexport { audio, playAudio }\n","import React, { useRef } from 'react'\nimport { useThree, useFrame } from '@react-three/fiber'\nimport useStore from '../store'\n\nlet offset = 0\nexport default function Rig({ children }) {\n  const group = useRef()\n  const rig = useRef()\n  const mutation = useStore((state) => state.mutation)\n  const { fov, scale, binormal, normal, track, mouse } = mutation\n  const { camera } = useThree()\n\n  useFrame(() => {\n    const t = mutation.t\n    const pos = mutation.position.clone()\n    const segments = track.tangents.length\n    const pickt = t * segments\n    const pick = Math.floor(pickt)\n    const pickNext = (pick + 1) % segments\n    binormal.subVectors(track.binormals[pickNext], track.binormals[pick])\n    binormal.multiplyScalar(pickt - pick).add(track.binormals[pick])\n    const dir = track.parameters.path.getTangentAt(t)\n    offset += (Math.max(15, 15 + -mouse.y / 20) - offset) * 0.05\n    normal.copy(binormal).cross(dir)\n    pos.add(normal.clone().multiplyScalar(offset))\n    camera.position.copy(pos)\n    const lookAt = track.parameters.path.getPointAt((t + 30 / track.parameters.path.getLength()) % 1).multiplyScalar(scale)\n    camera.matrix.lookAt(camera.position, lookAt, normal)\n    camera.quaternion.setFromRotationMatrix(camera.matrix)\n    camera.fov += ((t > 0.4 && t < 0.45 ? 120 : fov) - camera.fov) * 0.05\n    camera.updateProjectionMatrix()\n    const lightPos = track.parameters.path.getPointAt((t + 1 / track.parameters.path.getLength()) % 1).multiplyScalar(scale)\n    group.current.position.copy(lightPos)\n    group.current.quaternion.setFromRotationMatrix(camera.matrix)\n  })\n\n  return (\n    <group ref={group}>\n      <pointLight distance={400} position={[0, 100, -420]} intensity={5} color=\"indianred\" />\n      <group ref={rig} position={[0, 0, -50]}>\n        {children}\n      </group>\n    </group>\n  )\n}\n","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useLoader, useFrame } from '@react-three/fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport useStore from '../store'\n\nconst geometry = new THREE.BoxBufferGeometry(1, 1, 40)\nconst lightgreen = new THREE.Color('lightgreen')\nconst hotpink = new THREE.Color('hotpink')\nconst laserMaterial = new THREE.MeshBasicMaterial({ color: lightgreen })\nconst crossMaterial = new THREE.MeshBasicMaterial({ color: hotpink, fog: false })\nconst position = new THREE.Vector3()\nconst direction = new THREE.Vector3()\n\nexport default function Ship() {\n  const { nodes } = useLoader(GLTFLoader, '/ship.gltf')\n  const mutation = useStore((state) => state.mutation)\n  const { clock, mouse, ray } = mutation\n  const lasers = useStore((state) => state.lasers)\n  const main = useRef()\n  const laserGroup = useRef()\n  const laserLight = useRef()\n  const exhaust = useRef()\n  const cross = useRef()\n  const target = useRef()\n\n  useFrame(() => {\n    main.current.position.z = Math.sin(clock.getElapsedTime() * 40) * Math.PI * 0.2\n    main.current.rotation.z += (mouse.x / 500 - main.current.rotation.z) * 0.2\n    main.current.rotation.x += (-mouse.y / 1200 - main.current.rotation.x) * 0.2\n    main.current.rotation.y += (-mouse.x / 1200 - main.current.rotation.y) * 0.2\n    main.current.position.x += (mouse.x / 10 - main.current.position.x) * 0.2\n    main.current.position.y += (25 + -mouse.y / 10 - main.current.position.y) * 0.2\n    exhaust.current.scale.x = 1 + Math.sin(clock.getElapsedTime() * 200)\n    exhaust.current.scale.y = 1 + Math.sin(clock.getElapsedTime() * 200)\n    for (let i = 0; i < lasers.length; i++) {\n      const group = laserGroup.current.children[i]\n      group.position.z -= 20\n    }\n    laserLight.current.intensity += ((lasers.length && Date.now() - lasers[lasers.length - 1] < 100 ? 20 : 0) - laserLight.current.intensity) * 0.3\n\n    // Get ships orientation and save it to the stores ray\n    main.current.getWorldPosition(position)\n    main.current.getWorldDirection(direction)\n    ray.origin.copy(position)\n    ray.direction.copy(direction.negate())\n\n    // ...\n    crossMaterial.color = mutation.hits ? lightgreen : hotpink\n    cross.current.visible = !mutation.hits\n    target.current.visible = !!mutation.hits\n  })\n\n  return (\n    <group ref={main}>\n      <group scale={[3.5, 3.5, 3.5]}>\n        <group ref={cross} position={[0, 0, -300]} name=\"cross\">\n          <mesh renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[20, 2, 2]} />\n          </mesh>\n          <mesh renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[2, 20, 2]} />\n          </mesh>\n        </group>\n        <group ref={target} position={[0, 0, -300]} name=\"target\">\n          <mesh position={[0, 20, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[40, 2, 2]} />\n          </mesh>\n          <mesh position={[0, -20, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[40, 2, 2]} />\n          </mesh>\n          <mesh position={[20, 0, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[2, 40, 2]} />\n          </mesh>\n          <mesh position={[-20, 0, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[2, 40, 2]} />\n          </mesh>\n        </group>\n        <pointLight ref={laserLight} position={[0, 0, -20]} distance={100} intensity={0} color=\"lightgreen\" />\n        <group ref={laserGroup}>\n          {lasers.map((t, i) => (\n            <group key={i}>\n              <mesh position={[-2.8, 0, -0.8]} geometry={geometry} material={laserMaterial} />\n              <mesh position={[2.8, 0, -0.8]} geometry={geometry} material={laserMaterial} />\n            </group>\n          ))}\n        </group>\n        <group rotation={[Math.PI / 2, Math.PI, 0]}>\n          <mesh name=\"Renault_(S,_T1)_0\" geometry={nodes['Renault_(S,_T1)_0'].geometry}>\n            <meshStandardMaterial color=\"#070707\" />\n          </mesh>\n          <mesh name=\"Renault_(S,_T1)_1\" geometry={nodes['Renault_(S,_T1)_1'].geometry}>\n            <meshStandardMaterial color=\"black\" />\n          </mesh>\n          <mesh name=\"Renault_(S,_T1)_2\" geometry={nodes['Renault_(S,_T1)_2'].geometry}>\n            <meshStandardMaterial color=\"#070707\" />\n          </mesh>\n          <mesh name=\"Renault_(S,_T1)_3\" geometry={nodes['Renault_(S,_T1)_3'].geometry}>\n            <meshBasicMaterial color=\"lightblue\" />\n          </mesh>\n          <mesh name=\"Renault_(S,_T1)_4\" geometry={nodes['Renault_(S,_T1)_4'].geometry}>\n            <meshBasicMaterial color=\"white\" />\n          </mesh>\n          <mesh name=\"Renault_(S,_T1)_5\" geometry={nodes['Renault_(S,_T1)_5'].geometry}>\n            <meshBasicMaterial color=\"teal\" />\n          </mesh>\n        </group>\n      </group>\n      <mesh ref={exhaust} scale={[1, 1, 30]} position={[0, 1, 30]}>\n        <dodecahedronBufferGeometry args={[1.5, 0]} />\n        <meshBasicMaterial color=\"lightblue\" />\n      </mesh>\n    </group>\n  )\n}\n","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useLoader, useFrame } from '@react-three/fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport useStore from '../store'\nimport { useGLTF } from '@react-three/drei'\nimport { Suspense } from 'react'\n\n\nconst geometry = new THREE.BoxBufferGeometry(1, 1, 40)\nconst lightgreen = new THREE.Color('lightgreen')\nconst hotpink = new THREE.Color('hotpink')\nconst laserMaterial = new THREE.MeshBasicMaterial({ color: lightgreen })\nconst crossMaterial = new THREE.MeshBasicMaterial({ color: hotpink, fog: false })\nconst position = new THREE.Vector3()\nconst direction = new THREE.Vector3()\n\nexport default function Ship() {\n  //const { nodes } = useLoader(GLTFLoader, '/Scene.gltf')\n  //const { nodes, materials } = useGLTF('/Scene.gltf')\n  const { nodes, materials } = useGLTF('/psyche/psychespacecraft2.glb')\n  const mutation = useStore((state) => state.mutation)\n  const { clock, mouse, ray } = mutation\n  const lasers = useStore((state) => state.lasers)\n  const main = useRef()\n  const laserGroup = useRef()\n  const laserLight = useRef()\n  const exhaust = useRef()\n  const cross = useRef()\n  const target = useRef()\n\n  useFrame(() => {\n    main.current.position.z = Math.sin(clock.getElapsedTime() * 40) * Math.PI * 0.2\n    main.current.rotation.z += (mouse.x / 500 - main.current.rotation.z) * 0.2\n    main.current.rotation.x += (-mouse.y / 1200 - main.current.rotation.x) * 0.2\n    main.current.rotation.y += (-mouse.x / 1200 - main.current.rotation.y) * 0.2\n    main.current.position.x += (mouse.x / 10 - main.current.position.x) * 0.2\n    main.current.position.y += (25 + -mouse.y / 10 - main.current.position.y) * 0.2\n    exhaust.current.scale.x = 1 + Math.sin(clock.getElapsedTime() * 200)\n    exhaust.current.scale.y = 1 + Math.sin(clock.getElapsedTime() * 200)\n    for (let i = 0; i < lasers.length; i++) {\n      const group = laserGroup.current.children[i]\n      group.position.z -= 20\n    }\n    laserLight.current.intensity += ((lasers.length && Date.now() - lasers[lasers.length - 1] < 100 ? 20 : 0) - laserLight.current.intensity) * 0.3\n\n    // Get ships orientation and save it to the stores ray\n    main.current.getWorldPosition(position)\n    main.current.getWorldDirection(direction)\n    ray.origin.copy(position)\n    ray.direction.copy(direction.negate())\n\n    // ...\n    crossMaterial.color = mutation.hits ? lightgreen : hotpink\n    cross.current.visible = !mutation.hits\n    target.current.visible = !!mutation.hits\n  })\n\n  return (\n    <group ref={main}>\n      <group scale={[0.5, 0.5, 0.5]}>\n        <group ref={cross} position={[0, 0, -300]} name=\"cross\">\n          {/*\n          <mesh renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[20, 2, 2]} />\n          </mesh>\n          <mesh renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[2, 20, 2]} />\n          </mesh>\n          */}\n        </group>\n        <group ref={target} position={[0, 0, -300]} name=\"target\">\n          <mesh position={[0, 20, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[40, 2, 2]} />\n          </mesh>\n          <mesh position={[0, -20, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[40, 2, 2]} />\n          </mesh>\n          <mesh position={[20, 0, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[2, 40, 2]} />\n          </mesh>\n          <mesh position={[-20, 0, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[2, 40, 2]} />\n          </mesh>\n        </group>\n        <pointLight ref={laserLight} position={[0, 0, -20]} distance={100} intensity={0} color=\"lightgreen\" />\n        <group ref={laserGroup}>\n          {lasers.map((t, i) => (\n            <group key={i}>\n              <mesh position={[-2.8, 0, -0.8]} geometry={geometry} material={laserMaterial} />\n              <mesh position={[2.8, 0, -0.8]} geometry={geometry} material={laserMaterial} />\n            </group>\n          ))}\n        </group>\n        <group rotation={[Math.PI / 2, Math.PI, 0]}>\n        <mesh\n        name=\"Psyche\"\n        castShadow\n        receiveShadow\n        geometry={nodes.Psyche.geometry}\n        material={nodes.Psyche.material}\n      />\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.Psyche001.geometry}\n        material={nodes.Psyche001.material}\n      />\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.Psyche002.geometry}\n        material={materials['Material.002']}\n      />\n        </group>\n      </group>\n      <mesh ref={exhaust} scale={[1, 1, 30]} position={[0, 1, 30]}>\n        <dodecahedronBufferGeometry args={[1.5, 0]} />\n        <meshBasicMaterial color=\"lightblue\" />\n      </mesh>\n    </group>\n  )\n}\n","import * as THREE from 'three'\nimport { useFrame, useLoader } from '@react-three/fiber'\nimport {TransformControls, OrbitControls, Stage} from '@react-three/drei'\nimport React, { useRef } from 'react'\nimport { useGLTF } from '@react-three/drei'\n\nexport default function Astroid () {\n  const ref = useRef()\n  const { nodes, materials } = useGLTF('/psyche/PsycheAsteroid1.glb')\n  useFrame( ()=> ref.current.rotation.x  +=  0.1 )\n \n  return (\n\n    <group ref={ref} scale={[300, 300, 300]} position={[6000, 0, 6000]}>\n\n      {/* the astroid */}\n\n      <mesh\n        geometry={nodes.psyche_LP001.geometry}\n        material={materials.psycheAsteroid}\n        rotation={[Math.PI / 2, 0, 0]}\n      />\n\n    </group>\n  )\n}\n","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useLoader, useFrame} from '@react-three/fiber'\nimport {TransformControls, OrbitControls, Stage} from '@react-three/drei'\n\nimport Sun from './Sun'\nimport Earth from './Earth'\nimport Mars from './Mars'\nimport Rig from './Rig'\nimport Ship from './Ship'\nimport Spacecraft from './Spacecraft'\nimport Astroid from './Astroid'\n\nexport default function Solar() {\n\n  const groupref = useRef()\n\n  //subscribe the objects in this components to rotate the mesh on every frame rendered.\n  useFrame( (state, delta) => groupref.current.rotation.y  += 0.01 )\n\n  //return the object view (three-js elements expressed in JSX)\n  return (\n\n    <group \n      ref={groupref} \n      scale={[1, 1, 1]} \n      position={[0, 0, 0]}\n    >\n\n    <Sun/>\n    <Earth/>\n    <Mars/>\n    <Astroid/>\n    <Rig> \n      <Spacecraft/>\n    </Rig>\n\n    </group>\n  )\n}\n","import React, { useRef, useEffect } from 'react'\nimport useStore from '../store'\n\nexport default function Particles() {\n  const instancedMesh = useRef()\n  const { particles, dummy } = useStore((state) => state.mutation)\n\n  useEffect(() => {\n    particles.forEach((particle, i) => {\n      const { offset, scale } = particle\n      dummy.position.copy(offset)\n      dummy.scale.set(scale, scale, scale)\n      dummy.rotation.set(Math.sin(Math.random()) * Math.PI, Math.sin(Math.random()) * Math.PI, Math.cos(Math.random()) * Math.PI)\n      dummy.updateMatrix()\n      instancedMesh.current.setMatrixAt(i, dummy.matrix)\n    })\n    instancedMesh.current.instanceMatrix.needsUpdate = true\n  }, [])\n\n  return (\n    <instancedMesh ref={instancedMesh} args={[null, null, particles.length]} frustumCulled={false}>\n      <coneGeometry args={[2, 2, 3]} />\n      <meshStandardMaterial color=\"#606060\" />\n    </instancedMesh>\n  )\n}\n","\nimport React, { useState, Suspense } from 'react'\nimport {  Interactive } from '@react-three/xr'\nimport { Text } from '@react-three/drei'\nimport useStore from '../store'\n\nfunction Box({ color, size, scale, children, ...rest}: any) {\n    return (\n      <mesh scale={scale} {...rest}>\n        <boxBufferGeometry attach=\"geometry\" args={size} />\n        <meshPhongMaterial attach=\"material\" color={color} />\n        {children}\n      </mesh>\n    )\n  }\n  \n\n export default function Button({camera, ...props}: any) {\n    const [hover, setHover] = useState(false)\n    const [color, setColor] = useState<any>('blue')\n    const [size, setSize] = useState<any>([0.4, 0.1,0.1])\n    const [text, setText] = useState<any>(\"Press to Start\")\n    const actions = useStore( (state) => state.actions)\n\n    // action for on\n    const onSelect = () => {\n      setColor((Math.random() * 0xffffff) | 0)\n      setSize([0,0,0])\n      setText(\"\")\n      actions.init(camera)\n    }\n\n    return (\n      <Interactive onHover={() => setHover(true)} onBlur={() => setHover(false)} onSelect={onSelect}>\n        <Box color={color} scale={hover ? [0.6, 0.6, 0.6] : [0.5, 0.5, 0.5]} size={size} {...props}>\n          <Text position={[0, 0, 0.06]} fontSize={0.03} color=\"#fff\" anchorX=\"center\" anchorY=\"middle\">\n            {text}\n          </Text>\n        </Box>\n      </Interactive>\n    )\n  }","import React, { useState, Suspense, useEffect } from 'react'\r\nimport { DefaultXRControllers, ARCanvas, useXR, useXRFrame} from '@react-three/xr'\r\n\r\nimport { Stars, DeviceOrientationControls, PerspectiveCamera, OrbitControls, OrthographicCamera } from '@react-three/drei'\r\nimport './styles.css'\r\nimport { useThree } from '@react-three/fiber'\r\nimport { Plane, Sky, Text } from '@react-three/drei'\r\nimport * as THREE from 'three'\r\n\r\nimport Starz from './3d/Stars'\r\nimport Solar from './3d/Solar'\r\nimport Particles from './3d/Particles'\r\nimport Button from './3d/Buttons'\r\nimport useStore from './store'\r\n\r\n\r\nexport function App() {\r\n\r\n  const actions = useStore( (state) => state.actions)\r\n  const { fov, position} = useStore( (state) => state.mutation)\r\n\r\n  function Solarsystem() {\r\n    /*\r\n    const { gl } = useThree()\r\n    useXRFrame((time, xframe) => {\r\n      let refsp = gl.xr.getReferenceSpace()\r\n      let viewerPose = xframe.getViewerPose(refsp)\r\n      //actions.updateCam(viewerPose)\r\n    })\r\n    */\r\n    return (\r\n      <Suspense fallback={null}>\r\n        <Solar/>\r\n      </Suspense>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ARCanvas \r\n    gl={{ antialias: false }}\r\n    camera={{ position: [-5000, 0, 5000], near: 0.01, far: 100000, fov }}\r\n    //onCreated={({ gl, camera }) => { actions.init(camera) }} \r\n    > {/*ARcanvas config */}\r\n\r\n      {/* <DeviceOrientationControls /> */}\r\n\r\n      {/* <PerspectiveCamera makeDefault fov={75} position={[0, 0, 16]} near={0.01} far={100000}> */}\r\n        {/* <pointLight intensity={1} position={[-10, -25, -10]} /> */}\r\n        {/* <spotLight castShadow intensity={2.25} angle={0.2} penumbra={1} position={[-25, 20, -15]} shadow-mapSize={[1024, 1024]} shadow-bias={-0.0001} /> */}\r\n      {/* </PerspectiveCamera> */}\r\n\r\n      {/*<OrbitControls autoRotate enablePan={false} enableZoom={false} maxPolarAngle={Math.PI / 2} minPolarAngle={Math.PI / 2} />\r\n        */}\r\n      <ambientLight intensity={0.25} />\r\n      <Solarsystem/>\r\n      \r\n      <Button camera={{ position: [-5000, 0, 5000], near: 0.01, far: 100000, fov }} />\r\n      \r\n      {/* <pointLight position={[10, 10, 10]} /> */}\r\n      {/* <Button position={[0, 0.1, -0.2]} /> */}\r\n      <DefaultXRControllers />\r\n      {/* <Stars radius={500} depth={50} count={1000} factor={10} /> */}\r\n\r\n      <Particles />\r\n      <Starz />\r\n\r\n\r\n\r\n    </ARCanvas>\r\n  )\r\n}\r\n","import ReactDOM from 'react-dom'\r\nimport React from 'react'\r\nimport { App } from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}