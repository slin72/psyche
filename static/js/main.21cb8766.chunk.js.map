{"version":3,"sources":["react-xr/src/webxr/ARButton.js","react-xr/src/webxr/VRButton.js","react-xr/src/XRController.tsx","react-xr/src/ObjectsState.tsx","react-xr/src/XREvents.ts","react-xr/src/Interactions.tsx","react-xr/src/XR.tsx","react-xr/src/webxr/XRMotionControllers.js","react-xr/src/webxr/XRControllerModelFactory.js","react-xr/src/DefaultXRControllers.tsx","3d/Stars.js","3d/Sun.js","audio/laser.mp3","audio/engine.mp3","audio/engine2.mp3","audio/bg.mp3","audio/warp.mp3","audio/click.mp3","audio/explosion.mp3","audio/index.js","store.js","images/earth.jpg","images/moon.png","images/mars.jpg","3d/Buttons.tsx","3d/Earth.js","3d/Mars.js","3d/Rig.js","3d/Ship.js","3d/Spacecraft.js","3d/Astroid.js","3d/Solar.js","3d/Particles.js","App.tsx","index.tsx"],"names":["ARButton","renderer","sessionInit","button","document","createElement","showStartAR","undefined","domOverlay","overlay","style","display","body","appendChild","svg","createElementNS","setAttribute","position","right","top","addEventListener","currentSession","end","path","optionalFeatures","push","root","onSessionStarted","session","a","onSessionEnded","xr","setReferenceSpaceType","setSession","textContent","removeEventListener","cursor","left","width","onmouseenter","opacity","onmouseleave","onclick","navigator","requestSession","then","disableButton","showARNotSupported","stylizeElement","element","bottom","padding","border","borderRadius","background","color","font","textAlign","outline","zIndex","id","isSessionSupported","supported","catch","message","window","isSecureContext","href","location","replace","innerHTML","textDecoration","VRButton","showEnterVR","flat","filter","Boolean","showWebXRNotFound","XRController","gl","onConnected","onDisconnected","controller","getController","grip","getControllerGrip","hand","getHand","xrController","inputSource","userData","name","event","fake","data","_","ObjectsState","Map","state","object","key","value","has","set","entry","get","it","length","Object","keys","delete","useXREvent","handler","handedness","handlerRef","React","useRef","useEffect","current","useXR","allControllers","controllers","cleanups","forEach","listener","e","originalEvent","fn","warnAboutVRARCanvas","console","warn","InteractionsContext","createContext","hoverState","addInteraction","removeInteraction","InteractionManager","children","useThree","useState","none","interactions","useCallback","eventType","intersect","objects","Array","from","tempMatrix","Matrix4","identity","extractRotation","matrixWorld","raycaster","ray","origin","setFromMatrixPosition","direction","applyMatrix4","intersectObjects","useFrame","size","hovering","hits","Set","intersections","hit","find","i","intersection","eventObject","add","parent","triggerEvent","interaction","hovered","contextValue","useMemo","Provider","useInteraction","ref","type","useContext","isPresent","handlerFn","maybeRef","Interactive","forwardRef","props","passedRef","onHover","onBlur","onSelectStart","onSelectEnd","onSelect","onSqueezeStart","onSqueezeEnd","onSqueeze","mergeRefs","XRContext","XR","foveation","camera","isPresenting","setIsPresenting","isHandTracking","setHandTracking","Group","player","group","setControllers","remove","existing","useControllers","handleSessionChange","setFoveation","getSession","handleInputSourcesChange","values","inputSources","some","source","dispose","XRCanvas","rest","vr","createXRButton","mode","selector","querySelector","d","src","alt","li","s","i2","li2","h","p","t","r","getElementById","prepend","createButton","ARCanvas","onCreated","xrValue","interactionsValue","MotionControllerConstants","Handedness","freeze","NONE","LEFT","RIGHT","ComponentState","DEFAULT","TOUCHED","PRESSED","ComponentProperty","BUTTON","X_AXIS","Y_AXIS","STATE","ComponentType","TRIGGER","SQUEEZE","TOUCHPAD","THUMBSTICK","ButtonTouchThreshold","AxisTouchThreshold","VisualResponseProperty","TRANSFORM","VISIBILITY","fetchJsonFile","fetch","response","ok","Error","statusText","json","fetchProfilesList","basePath","profilesList","xrInputSource","defaultProfile","getAssetPath","supportedProfilesList","profiles","profileId","supportedProfile","match","profilePath","deprecated","profile","layout","layouts","assetPath","defaultComponentValues","xAxis","yAxis","VisualResponse","visualResponseDescription","this","componentProperty","states","valueNodeName","valueNodeProperty","minNodeName","maxNodeName","updateFromComponent","x","y","Math","sqrt","theta","atan2","cos","sin","normalizedXAxis","normalizedYAxis","normalizeAxes","includes","Component","componentId","componentDescription","visualResponses","gamepadIndices","rootNodeName","touchPointNodeName","responseName","visualResponse","assign","gamepad","buttons","gamepadButton","pressed","touched","axes","abs","MotionController","assetUrl","layoutDescription","components","updateFromGamepad","gripSpace","targetRaySpace","component","DEFAULT_PROFILES_PATH","XRControllerModel","motionController","envMap","traverse","child","isMesh","material","needsUpdate","force","valueNode","minNode","maxNode","visible","quaternion","slerpQuaternions","lerpVectors","Object3D","addAssetSceneToControllerModel","controllerModel","scene","touchPointNode","getObjectByName","sphereGeometry","SphereGeometry","MeshBasicMaterial","sphere","Mesh","findNodes","XRControllerModelFactory","gltfLoader","_assetCache","GLTFLoader","targetRayMode","fetchProfile","cachedAsset","clone","setPath","load","asset","err","modelFactory","modelCache","WeakMap","DefaultXRControllers","rayMaterial","rays","next","rayLength","distance","scale","z","model","createControllerModel","dispatchEvent","rotation","PI","Color","transparent","geometry","BoxBufferGeometry","JSON","stringify","Stars","count","positions","random","phi","acos","Float32Array","attachObject","array","itemSize","sizeAttenuation","fog","Sun","args","intensity","engine","Audio","zapAudio","engineAudio","bg","engine2Audio","bgAudio","HelixCurve","warpAudio","clickAudio","explosionAudio","optionalTarget","Vector3","point","b","t2","Curve","Stationary","GrannyKnot","multiplyScalar","guid","useStore","create","spline","track","THREE","spline2","spline3","cancelLaserTO","cancelExplosionTO","box","sound","points","health","lasers","explosions","rocks","randomData","enemies","mutation","insertion","startTime","Date","now","fov","rings","randomRings","particles","looptime","binormal","normal","clock","mouse","dummy","actions","init","start","toggleSound","addEffect","time","parameters","getPointAt","warping","updates","map","clearTimeout","setTimeout","rock","enemy","shoot","playAudio","audio","updateMouse","clientX","clientY","innerWidth","innerHeight","test","min","copy","offset","max","expandByScalar","result","intersectBox","distanceTo","radius","fill","pos","speed","temp","pickt","tangents","pick","floor","lookAt","getLength","matrix","binormals","toArray","volume","loop","getState","currentTime","play","pause","Box","attach","Button","hover","setHover","setColor","setSize","text","setText","toggle","Text","fontSize","anchorX","anchorY","Earth","groupref","useLoader","earthImg","moonImg","marsImg","earth","moon","delta","near","far","roughness","Planet","mars","Rig","rig","segments","pickNext","subVectors","dir","getTangentAt","cross","setFromRotationMatrix","updateProjectionMatrix","lightPos","lightgreen","hotpink","laserMaterial","crossMaterial","Ship","useGLTF","nodes","materials","main","laserGroup","laserLight","exhaust","target","getElapsedTime","getWorldPosition","getWorldDirection","negate","renderOrder","castShadow","receiveShadow","Psyche","Psyche001","Psyche002","Astroid","psyche_LP001","psycheAsteroid","Solar","Particles","instancedMesh","particle","updateMatrix","setMatrixAt","instanceMatrix","frustumCulled","App","Solarsystem","fallback","antialias","ReactDOM","render"],"mappings":"8PAAMA,E,iGACJ,SAAoBC,GAA6B,IAAnBC,EAAkB,uDAAJ,GACpCC,EAASC,SAASC,cAAc,UAEtC,SAASC,IACP,QAA+BC,IAA3BL,EAAYM,WAA0B,CACxC,IAAMC,EAAUL,SAASC,cAAc,OACvCI,EAAQC,MAAMC,QAAU,OACxBP,SAASQ,KAAKC,YAAYJ,GAE1B,IAAMK,EAAMV,SAASW,gBAAgB,6BAA8B,OACnED,EAAIE,aAAa,QAAS,IAC1BF,EAAIE,aAAa,SAAU,IAC3BF,EAAIJ,MAAMO,SAAW,WACrBH,EAAIJ,MAAMQ,MAAQ,OAClBJ,EAAIJ,MAAMS,IAAM,OAChBL,EAAIM,iBAAiB,SAAS,WAC5BC,EAAeC,SAEjBb,EAAQI,YAAYC,GAEpB,IAAMS,EAAOnB,SAASW,gBAAgB,6BAA8B,QACpEQ,EAAKP,aAAa,IAAK,iCACvBO,EAAKP,aAAa,SAAU,QAC5BO,EAAKP,aAAa,eAAgB,GAClCF,EAAID,YAAYU,QAEqBhB,IAAjCL,EAAYsB,mBACdtB,EAAYsB,iBAAmB,IAGjCtB,EAAYsB,iBAAiBC,KAAK,eAClCvB,EAAYM,WAAa,CAAEkB,KAAMjB,GAKnC,IAAIY,EAAiB,KAjCU,SAmChBM,EAnCgB,8EAmC/B,WAAgCC,GAAhC,SAAAC,EAAA,6DACED,EAAQR,iBAAiB,MAAOU,GAEhC7B,EAAS8B,GAAGC,sBAAsB,SAHpC,SAKQ/B,EAAS8B,GAAGE,WAAWL,GAL/B,OAOEzB,EAAO+B,YAAc,UACrBhC,EAAYM,WAAWkB,KAAKhB,MAAMC,QAAU,GAE5CU,EAAiBO,EAVnB,4CAnC+B,sBAgD/B,SAASE,IACPT,EAAec,oBAAoB,MAAOL,GAE1C3B,EAAO+B,YAAc,WACrBhC,EAAYM,WAAWkB,KAAKhB,MAAMC,QAAU,OAE5CU,EAAiB,KAKnBlB,EAAOO,MAAMC,QAAU,GAEvBR,EAAOO,MAAM0B,OAAS,UACtBjC,EAAOO,MAAM2B,KAAO,mBACpBlC,EAAOO,MAAM4B,MAAQ,QAErBnC,EAAO+B,YAAc,WAErB/B,EAAOoC,aAAe,WACpBpC,EAAOO,MAAM8B,QAAU,OAGzBrC,EAAOsC,aAAe,WACpBtC,EAAOO,MAAM8B,QAAU,OAGzBrC,EAAOuC,QAAU,WACQ,OAAnBrB,EACFsB,UAAUZ,GAAGa,eAAe,eAAgB1C,GAAa2C,KAAKlB,GAE9DN,EAAeC,OAKrB,SAASwB,IACP3C,EAAOO,MAAMC,QAAU,GAEvBR,EAAOO,MAAM0B,OAAS,OACtBjC,EAAOO,MAAM2B,KAAO,mBACpBlC,EAAOO,MAAM4B,MAAQ,QAErBnC,EAAOoC,aAAe,KACtBpC,EAAOsC,aAAe,KAEtBtC,EAAOuC,QAAU,KAGnB,SAASK,IACPD,IAEA3C,EAAO+B,YAAc,mBAGvB,SAASc,EAAeC,GACtBA,EAAQvC,MAAMO,SAAW,WACzBgC,EAAQvC,MAAMwC,OAAS,OACvBD,EAAQvC,MAAMyC,QAAU,WACxBF,EAAQvC,MAAM0C,OAAS,iBACvBH,EAAQvC,MAAM2C,aAAe,MAC7BJ,EAAQvC,MAAM4C,WAAa,kBAC3BL,EAAQvC,MAAM6C,MAAQ,OACtBN,EAAQvC,MAAM8C,KAAO,yBACrBP,EAAQvC,MAAM+C,UAAY,SAC1BR,EAAQvC,MAAM8B,QAAU,MACxBS,EAAQvC,MAAMgD,QAAU,OACxBT,EAAQvC,MAAMiD,OAAS,MAGzB,GAAI,OAAQhB,UAaV,OAZAxC,EAAOyD,GAAK,WACZzD,EAAOO,MAAMC,QAAU,OAEvBqC,EAAe7C,GAEfwC,UAAUZ,GACP8B,mBAAmB,gBACnBhB,MAAK,SAAUiB,GACdA,EAAYxD,IAAgByC,OAE7BgB,MAAMhB,GAEF5C,EAEP,IAAM6D,EAAU5D,SAASC,cAAc,KAgBvC,OAd+B,IAA3B4D,OAAOC,iBACTF,EAAQG,KAAO/D,SAASgE,SAASD,KAAKE,QAAQ,SAAU,UACxDL,EAAQM,UAAY,sBAEpBN,EAAQG,KAAO,4BACfH,EAAQM,UAAY,uBAGtBN,EAAQtD,MAAM2B,KAAO,mBACrB2B,EAAQtD,MAAM4B,MAAQ,QACtB0B,EAAQtD,MAAM6D,eAAiB,OAE/BvB,EAAegB,GAERA,M,KCzJPQ,E,iGACJ,SAAoBvE,GAA6B,IAAnBC,EAAkB,uDAAJ,GACpCC,EAASC,SAASC,cAAc,UAEtC,SAASoE,IACP,IAAIpD,EAAiB,KADU,SAGhBM,EAHgB,8EAG/B,WAAgCC,GAAhC,SAAAC,EAAA,6DACED,EAAQR,iBAAiB,MAAOU,GADlC,SAGQ7B,EAAS8B,GAAGE,WAAWL,GAH/B,OAIEzB,EAAO+B,YAAc,UAErBb,EAAiBO,EANnB,4CAH+B,sBAY/B,SAASE,IACPT,EAAec,oBAAoB,MAAOL,GAE1C3B,EAAO+B,YAAc,WAErBb,EAAiB,KAKnBlB,EAAOO,MAAMC,QAAU,GAEvBR,EAAOO,MAAM0B,OAAS,UACtBjC,EAAOO,MAAM2B,KAAO,mBACpBlC,EAAOO,MAAM4B,MAAQ,QAErBnC,EAAO+B,YAAc,WAErB/B,EAAOoC,aAAe,WACpBpC,EAAOO,MAAM8B,QAAU,OAGzBrC,EAAOsC,aAAe,WACpBtC,EAAOO,MAAM8B,QAAU,OAGzBrC,EAAOuC,QAAU,WACf,GAAuB,OAAnBrB,EAAyB,CAQ3B,IAAMG,EAAmB,CAACtB,EAAYsB,iBAAkB,cAAe,gBAAiB,iBAAiBkD,OAAOC,OAAOC,SAEvHjC,UAAUZ,GAAGa,eAAe,eAA5B,2BAAiD1C,GAAjD,IAA8DsB,sBAAoBqB,KAAKlB,QAEvFN,EAAeC,OAKrB,SAASwB,IACP3C,EAAOO,MAAMC,QAAU,GAEvBR,EAAOO,MAAM0B,OAAS,OACtBjC,EAAOO,MAAM2B,KAAO,mBACpBlC,EAAOO,MAAM4B,MAAQ,QAErBnC,EAAOoC,aAAe,KACtBpC,EAAOsC,aAAe,KAEtBtC,EAAOuC,QAAU,KAGnB,SAASmC,IACP/B,IAEA3C,EAAO+B,YAAc,mBAGvB,SAASc,EAAeC,GACtBA,EAAQvC,MAAMO,SAAW,WACzBgC,EAAQvC,MAAMwC,OAAS,OACvBD,EAAQvC,MAAMyC,QAAU,WACxBF,EAAQvC,MAAM0C,OAAS,iBACvBH,EAAQvC,MAAM2C,aAAe,MAC7BJ,EAAQvC,MAAM4C,WAAa,kBAC3BL,EAAQvC,MAAM6C,MAAQ,OACtBN,EAAQvC,MAAM8C,KAAO,yBACrBP,EAAQvC,MAAM+C,UAAY,SAC1BR,EAAQvC,MAAM8B,QAAU,MACxBS,EAAQvC,MAAMgD,QAAU,OACxBT,EAAQvC,MAAMiD,OAAS,MAGzB,GAAI,OAAQhB,UAUV,OATAxC,EAAOyD,GAAK,WACZzD,EAAOO,MAAMC,QAAU,OAEvBqC,EAAe7C,GAEfwC,UAAUZ,GAAG8B,mBAAmB,gBAAgBhB,MAAK,SAAUiB,GAC7DA,EAAYW,IAAgBI,OAGvB1E,EAEP,IAAM6D,EAAU5D,SAASC,cAAc,KAgBvC,OAd+B,IAA3B4D,OAAOC,iBACTF,EAAQG,KAAO/D,SAASgE,SAASD,KAAKE,QAAQ,SAAU,UACxDL,EAAQM,UAAY,sBAEpBN,EAAQG,KAAO,4BACfH,EAAQM,UAAY,uBAGtBN,EAAQtD,MAAM2B,KAAO,mBACrB2B,EAAQtD,MAAM4B,MAAQ,QACtB0B,EAAQtD,MAAM6D,eAAiB,OAE/BvB,EAAegB,GAERA,M,KC5GAc,EACL,SAAClB,EAAYmB,EAAmBC,EAAuCC,GAC3E,IAAMC,EAAaH,EAAGhD,GAAGoD,cAAcvB,GACjCwB,EAAOL,EAAGhD,GAAGsD,kBAAkBzB,GAC/B0B,EAAOP,EAAGhD,GAAGwD,QAAQ3B,GAErB4B,EAA6B,CACjCC,iBAAalF,EACb6E,OACAF,aACAI,QAEFF,EAAKM,SAASC,KAAO,OACrBT,EAAWQ,SAASC,KAAO,aAC3BL,EAAKI,SAASC,KAAO,OAErBT,EAAW9D,iBAAiB,aAAa,SAACwE,GACpCA,EAAMC,OAGVL,EAAaC,YAAcG,EAAME,KACjCd,EAAYQ,OAGdN,EAAW9D,iBAAiB,gBAAgB,SAAC2E,GAC3Cd,EAAeO,O,eCxBRQ,EACL,WACJ,OAAO,IAAIC,KAFFD,EAIN,SAAqCE,EAAiCC,EAAkBC,EAAUC,GAChGH,EAAMI,IAAIH,IACbD,EAAMK,IAAIJ,EAAQ,CAAEC,IAAK,CAACC,KAE5B,IAAMG,EAAQN,EAAMO,IAAIN,GACnBK,EAAMJ,KACTI,EAAMJ,GAAO,IAEfI,EAAMJ,GAAK3E,KAAK4E,IAZPL,EAcH,SAAqCE,EAAiCC,EAAkBC,EAAUC,GACxG,IAAMG,EAAQN,EAAMO,IAAIN,GACnBK,GAAUA,EAAMJ,KACrBI,EAAMJ,GAAOI,EAAMJ,GAAKzB,QAAO,SAAC+B,GAAD,OAAQA,IAAOL,KAEpB,IAAtBG,EAAMJ,GAAKO,eACNH,EAAMJ,GAImB,IAA9BQ,OAAOC,KAAKL,GAAOG,QACrBT,EAAMY,OAAOX,KAzBNH,EA4BN,SAAqCE,EAAiCC,EAAkBC,GAC3F,IAAMI,EAAQN,EAAMO,IAAIN,GACxB,SAAUK,IAASA,EAAMJ,KA9BhBJ,EAgCN,SAAqCE,EAAiCC,EAAkBC,GAC3F,IAAMI,EAAQN,EAAMO,IAAIN,GACxB,OAAOK,GAASA,EAAMJ,I,QCrCbW,EAAa,SAACnB,EAAoBoB,GAAsF,IAAD,yDAAP,GAA9CC,EAAqD,EAArDA,WACvEC,EAAaC,IAAMC,OAA4BJ,GACrDG,IAAME,WAAU,WACdH,EAAWI,QAAUN,IACpB,CAACA,IACJ,MAAwCO,IAAnBC,EAArB,EAAQC,YAERN,IAAME,WAAU,WACd,IAAMI,EAAcR,EAAaO,EAAe7C,QAAO,SAAC+B,GAAD,OAAQA,EAAGjB,YAAYwB,aAAeA,KAAcO,EAErGE,EAAkB,GAQxB,OANAD,EAAYE,SAAQ,SAACjB,GACnB,IAAMkB,EAAW,SAACC,GAAD,OAAYX,EAAWI,QAAQ,CAAEQ,cAAeD,EAAG3C,WAAYwB,KAChFA,EAAGxB,WAAW9D,iBAAiBwE,EAAOgC,GACtCF,EAASjG,MAAK,kBAAMiF,EAAGxB,WAAW/C,oBAAoByD,EAAOgC,SAGxD,kBAAMF,EAASC,SAAQ,SAACI,GAAD,OAAQA,UACrC,CAACnC,EAAO4B,EAAgBP,K,OCLvBe,EAAsB,kBAAMC,QAAQC,KAAK,6EAElCC,EAAsBhB,IAAMiB,cAItC,CACDC,WAAY,GACZC,eAAgBN,EAChBO,kBAAmBP,IAEd,SAASQ,EAAT,GAA8D,IAAhCC,EAA+B,EAA/BA,SAC7BvC,EAAQwC,cACNjB,EAAgBF,IAAhBE,YAER,EAAqBN,IAAMwB,UAA4D,iBAAO,CAC5FtG,KAAM,IAAI4D,IACV/E,MAAO,IAAI+E,IACX2C,KAAM,IAAI3C,QAHLoC,EAAP,oBAMA,EAAuBlB,IAAMwB,UAAS,kBAAM3C,OAArC6C,EAAP,oBAEMP,EAAiBnB,IAAM2B,aAC3B,SAAC3C,EAAkB4C,EAA8B/B,GAC/ChB,EAAiB6C,EAAc1C,EAAQ4C,EAAW/B,KAEpD,CAAC6B,IAGGN,EAAoBpB,IAAM2B,aAC9B,SAAC3C,EAAkB4C,EAA8B/B,GAC/ChB,EAAoB6C,EAAc1C,EAAQ4C,EAAW/B,KAEvD,CAAC6B,IAGGG,EAAY7B,IAAM2B,aACtB,SAAC5D,GACC,IAAM+D,EAAUC,MAAMC,KAAKN,EAAahC,QAClCuC,EAAa,IAAIC,UAKvB,OAJAD,EAAWE,WAAWC,gBAAgBrE,EAAWsE,aACjDtD,EAAMuD,UAAUC,IAAIC,OAAOC,sBAAsB1E,EAAWsE,aAC5DtD,EAAMuD,UAAUC,IAAIG,UAAUtD,IAAI,EAAG,GAAI,GAAGuD,aAAaV,GAElDlD,EAAMuD,UAAUM,iBAAiBd,GAAS,KAEnD,CAACJ,EAAc3C,EAAMuD,YAIvBO,aAAS,WACmB,IAAtBnB,EAAaoB,MAIjBxC,EAAYE,SAAQ,SAACjB,GACnB,IAAQxB,EAAewB,EAAfxB,WACF+B,EAAaP,EAAGjB,YAAYwB,WAC5BiD,EAAW7B,EAAWpB,GACtBkD,EAAO,IAAIC,IACbC,EAAgBrB,EAAU9D,GAE9B,GAAIgB,EAAMuD,UAAU9E,OAGlB0F,EAAgBnE,EAAMuD,UAAU9E,OAAO0F,EAAenE,OACjD,CAEL,IAAMoE,EAAMD,EAAcE,MAAK,SAACC,GAAD,cAAOA,QAAP,IAAOA,OAAP,EAAOA,EAAGrE,UACrCmE,IAAKD,EAAgB,CAACC,IAG5BD,EAAc1C,SAAQ,SAAC8C,GAGrB,IAFA,IAAIC,EAA+BD,EAAatE,OAEzCuE,GAAa,CACyE,IAAD,EAA1F,GAAI1E,EAAiB6C,EAAc6B,EAAa,aAAeR,EAAS5D,IAAIoE,GAC1E,UAAA1E,EAAiB6C,EAAc6B,EAAa,kBAA5C,SAAwD/C,SAAQ,SAACX,GAAD,OAAaA,EAAQ,CAAE9B,WAAYwB,EAAI+D,oBAGzGP,EAAS3D,IAAImE,EAAaD,GAC1BN,EAAKQ,IAAID,EAAY9G,IACrB8G,EAAcA,EAAYE,WA3BJ,oBAiCAV,EAASrD,QAjCT,IAiC1B,2BAA2C,CAAC,IACX,EADtB6D,EAAgC,QACzC,IAAKP,EAAK7D,IAAIoE,EAAY9G,IACxB,UAAAoC,EAAiB6C,EAAc6B,EAAa,iBAA5C,SAAuD/C,SAAQ,SAACX,GAAD,OAAaA,EAAQ,CAAE9B,WAAYwB,OAClGwD,EAASpD,OAAO4D,IApCM,qCA0C9B,IAAMG,EAAe,SAACC,GAAD,OAAoC,SAACjD,GACxD,IADuE,EACjEqC,EAAW7B,EAAWR,EAAE3C,WAAWO,YAAYwB,YADkB,cAEjDiD,EAASrD,QAFwC,2BAE5DkE,EAF4D,QAGrE,UAAA/E,EAAiB6C,EAAckC,EAASD,UAAxC,SAAsDnD,SAAQ,SAACX,GAAD,OAC5DA,EAAQ,CAAE9B,WAAY2C,EAAE3C,WAAYuF,aAAcP,EAASzD,IAAIsE,SAFnE,2BAAwC,IAF+B,iCASzEhE,EAAW,SAAU8D,EAAa,aAClC9D,EAAW,cAAe8D,EAAa,kBACvC9D,EAAW,YAAa8D,EAAa,gBACrC9D,EAAW,UAAW8D,EAAa,cACnC9D,EAAW,aAAc8D,EAAa,iBACtC9D,EAAW,eAAgB8D,EAAa,mBAExC,IAAMG,EAAeC,mBAAQ,iBAAO,CAAE3C,iBAAgBC,oBAAmBF,gBAAe,CAACC,EAAgBC,EAAmBF,IAE5H,OAAO,cAACF,EAAoB+C,SAArB,CAA8B7E,MAAO2E,EAArC,SAAoDvC,IAGtD,IAAM0C,EAAiB,SAACC,EAAUC,EAAyBrE,GAChE,MAA8CsE,qBAAWnD,GAAjDG,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,kBAElBgD,OAAwBhL,IAAZyG,EACZE,EAAaE,iBAAOJ,GAC1BK,qBAAU,WACRH,EAAWI,QAAUN,IACpB,CAACA,IAEJK,qBAAU,WACR,GAAKkE,EAAL,CAEA,IAAMC,EAAY,SAAC3D,GAA2B,IAAD,EAC3C,UAAAX,EAAWI,eAAX,cAAAJ,EAAqBW,IAGvBS,EAAe8C,EAAI9D,QAAS+D,EAAMG,GAClC,IAAMC,EAAWL,EAAI9D,QAErB,OAAO,kBAAMiB,EAAkBkD,EAAUJ,EAAMG,OAC9C,CAACH,EAAM/C,EAAgBC,EAAmBgD,EAAWH,KAG7CM,EAAcC,sBACzB,SACEC,EAWAC,GAEA,IAAMT,EAAMhE,mBAWZ,OATA+D,EAAeC,EAAK,UAAWQ,EAAME,SACrCX,EAAeC,EAAK,SAAUQ,EAAMG,QACpCZ,EAAeC,EAAK,gBAAiBQ,EAAMI,eAC3Cb,EAAeC,EAAK,cAAeQ,EAAMK,aACzCd,EAAeC,EAAK,WAAYQ,EAAMM,UACtCf,EAAeC,EAAK,iBAAkBQ,EAAMO,gBAC5ChB,EAAeC,EAAK,eAAgBQ,EAAMQ,cAC1CjB,EAAeC,EAAK,YAAaQ,EAAMS,WAEhC,uBAAOjB,IAAKkB,YAAU,CAACT,EAAWT,IAAlC,SAA0CQ,EAAMnD,c,wECvKrD8D,EAAYpF,gBAAoC,IAmF/C,SAASqF,EAAT,GAA6F,IAAD,IAA9EC,iBAA8E,MAAlE,EAAkE,EAA/DhE,EAA+D,EAA/DA,SAClC,EAAuBC,cAAf3D,EAAR,EAAQA,GAAI2H,EAAZ,EAAYA,OACZ,EAAwCvF,YAAe,kBAAMpC,EAAGhD,GAAG4K,gBAAnE,mBAAOA,EAAP,KAAqBC,EAArB,KACA,EAA0CzF,YAAe,GAAzD,mBAAO0F,EAAP,KAAuBC,EAAvB,KACA,EAAiB3F,YAAe,kBAAM,IAAI4F,WAAnCC,EAAP,oBACMvF,EAtFe,SAACwF,GACtB,IAAQlI,EAAO2D,cAAP3D,GACR,EAAsCoC,WAA+B,IAArE,mBAAOM,EAAP,KAAoByF,EAApB,KAwBA,OAtBA/F,aAAgB,WACF,CAAC,EAAG,GACZQ,SAAQ,SAAC/D,GACXkB,EACElB,EACAmB,GACA,SAACG,GACC+H,EAAMtC,IAAIzF,EAAWA,YACrB+H,EAAMtC,IAAIzF,EAAWE,MACrB6H,EAAMtC,IAAIzF,EAAWI,MACrB4H,GAAe,SAACxG,GAAD,4BAAYA,GAAZ,CAAgBxB,UAEjC,SAACA,GACC+H,EAAME,OAAOjI,EAAWA,YACxB+H,EAAME,OAAOjI,EAAWE,MACxB6H,EAAME,OAAOjI,EAAWI,MACxB4H,GAAe,SAACE,GAAD,OAAcA,EAASzI,QAAO,SAAC+B,GAAD,OAAQA,IAAOxB,gBAIjE,CAACH,EAAIkI,IAEDxF,EA4Da4F,CAAeL,GAEnC7F,aAAgB,WACd,IAAMpF,EAAKgD,EAAGhD,GAERuL,EAAsB,kBAAMV,EAAgB7K,EAAG4K,eAKrD,OAHA5K,EAAGX,iBAAiB,eAAgBkM,GACpCvL,EAAGX,iBAAiB,aAAckM,GAE3B,WACLvL,EAAGI,oBAAoB,eAAgBmL,GACvCvL,EAAGI,oBAAoB,aAAcmL,MAEtC,CAACvI,IAEJoC,aAAgB,WACd,IAAMpF,EAAKgD,EAAGhD,GAEVA,EAAGwL,cACLxL,EAAGwL,aAAad,KAEjB,CAAC1H,EAAI0H,IAERtF,aAAgB,WAAO,IAAD,EACdvF,EAAUmD,EAAGhD,GAAGyL,aAEhBC,EAA2B,SAAC7H,GAAD,OAC/BkH,EAAgBlG,OAAO8G,OAAQ9H,EAAmChE,QAAQ+L,cAAcC,MAAK,SAACC,GAAD,OAAYA,EAAOvI,UAMlH,OAJO,OAAP1D,QAAO,IAAPA,KAASR,iBAAiB,qBAAsBqM,GAEhDX,EAAgBlG,OAAO8G,OAAP,iBAAc9L,QAAd,IAAcA,OAAd,EAAcA,EAAS+L,oBAAvB,QAAuC,IAAIC,MAAK,SAACC,GAAD,OAAYA,EAAOvI,SAE5E,WACE,OAAP1D,QAAO,IAAPA,KAASO,oBAAoB,qBAAsBsL,MAGpD,CAACd,IAEJ,IAAMtG,EAAQc,WACZ,iBAAO,CAAEM,cAAakF,eAAcE,iBAAgBG,YACpD,CAACvF,EAAakF,EAAcE,EAAgBG,IAG9C,OACE,eAACT,EAAUrB,SAAX,CAAoB7E,MAAOA,EAA3B,UACE,2BAAWF,OAAQ6G,EAAQc,QAAS,KAApC,SACE,2BAAW3H,OAAQuG,EAAQoB,QAAS,SAErCrF,KAKP,SAASsF,EAAT,GAA8F,IAA1EtB,EAAyE,EAAzEA,UAAWhE,EAA8D,EAA9DA,SAAauF,EAAiD,iBAC3F,OACE,cAAC,IAAD,yBAAQC,IAAE,GAAKD,GAAf,aACE,cAACxB,EAAD,CAAIC,UAAWA,EAAf,SACE,cAACjE,EAAD,UAAqBC,SAM7B,IAAMyF,EAAiB,SAACC,EAAmBpJ,EAAS7E,GAClD,IAAMC,EAAkB,OAATgO,EAAgBnO,EAAWwE,EAGpC4J,EAAoB,OAATD,EAAgB,YAAc,YAC/C,GAAyC,OAArC/N,SAASiO,cAAcD,GAAoB,CAG7C,IAAME,EAAIlO,SAASC,cAAc,OAC/BiO,EAAEtN,aAAa,QAAS,qDACxBsN,EAAEtN,aAAa,QAAS,QAExB,IAAMwJ,EAAIpK,SAASC,cAAc,OACjCmK,EAAE+D,IAAM,sEACR/D,EAAEgE,IAAM,OACRhE,EAAExJ,aAAa,QAAS,6BACxB,IAAMyN,EAAKrO,SAASC,cAAc,KAClCoO,EAAGzN,aAAa,OAAQ,wBACxByN,EAAG5N,YAAY2J,GAIf,IAAMkE,EAAItO,SAASC,cAAc,QACjCqO,EAAE1N,aAAa,QAAS,gBACxB0N,EAAE1N,aAAa,QAAS,8IAExB,IAAM2N,EAAKvO,SAASC,cAAc,OAClCsO,EAAGJ,IAAI,wEACPI,EAAGH,IAAM,SACTG,EAAG3N,aAAa,QAAS,8BACzB,IAAM4N,EAAMxO,SAASC,cAAc,KACnCuO,EAAI5N,aAAa,OAAQ,0BACzB4N,EAAI/N,YAAY8N,GAEhB,IAAME,EAAIzO,SAASC,cAAc,MACjCwO,EAAE3M,YAAc,uBAChB2M,EAAE7N,aAAa,QAAS,6HAExB,IAAM8N,EAAI1O,SAASC,cAAc,KACjCyO,EAAE5M,YAAc,iHAChB4M,EAAE9N,aAAa,QAAS,mHAExBsN,EAAEzN,YAAY4N,GACdH,EAAEzN,YAAY6N,GACdJ,EAAEzN,YAAY+N,GAEd,IAAMG,EAAI3O,SAASC,cAAc,OACjC0O,EAAE/N,aAAa,QAAS,qDACxB+N,EAAE/N,aAAa,KAAM,UACrB+N,EAAElO,YAAYgO,GACdE,EAAElO,YAAYiO,GAKd,IAAME,EAAI5O,SAAS6O,eAAe,QACjC,OAADD,QAAC,IAADA,KAAGE,QAAQH,GACV,OAADC,QAAC,IAADA,KAAGE,QAAQZ,GAGblO,SAASQ,KAAKC,YAAYV,EAAOgP,aAAapK,EAAI7E,MA+B/C,SAASkP,EAAT,GAAiF,IAA7DC,EAA4D,EAA5DA,UAAW5G,EAAiD,EAAjDA,SAAUvI,EAAuC,EAAvCA,YAAgB8N,EAAuB,iBACrF,OACE,cAACD,EAAD,yBACEsB,UAAW,SAACnJ,GACD,OAATmJ,QAAS,IAATA,KAAYnJ,GAEZgI,EAAe,KAAMhI,EAAMnB,GAAI7E,KAE7B8N,GANN,aAQGvF,KAKA,IAAMlB,EAAQ,WACnB,IAAM+H,EAAUnI,aAAiBoF,GAC3BgD,EAAoBpI,aAAiBgB,GAI3C,OAFqBhB,WAAc,8BAAC,eAAWmI,GAAYC,KAAsB,CAACD,EAASC,K,4BC9RvFC,EAA4B,CAChCC,WAAY7I,OAAO8I,OAAO,CACxBC,KAAM,OACNC,KAAM,OACNC,MAAO,UAGTC,eAAgBlJ,OAAO8I,OAAO,CAC5BK,QAAS,UACTC,QAAS,UACTC,QAAS,YAGXC,kBAAmBtJ,OAAO8I,OAAO,CAC/BS,OAAQ,SACRC,OAAQ,QACRC,OAAQ,QACRC,MAAO,UAGTC,cAAe3J,OAAO8I,OAAO,CAC3Bc,QAAS,UACTC,QAAS,UACTC,SAAU,WACVC,WAAY,aACZR,OAAQ,WAGVS,qBAAsB,IAEtBC,mBAAoB,GAEpBC,uBAAwBlK,OAAO8I,OAAO,CACpCqB,UAAW,YACXC,WAAY,gB,SAQDC,E,8EAAf,WAA6B1P,GAA7B,eAAAM,EAAA,sEACyBqP,MAAM3P,GAD/B,WACQ4P,EADR,QAEgBC,GAFhB,sBAGU,IAAIC,MAAMF,EAASG,YAH7B,gCAKWH,EAASI,QALpB,4C,+BASeC,E,iFAAf,WAAiCC,GAAjC,eAAA5P,EAAA,yDACO4P,EADP,sBAEU,IAAIJ,MAAM,wBAFpB,aAK8B,oBAL9B,SAM6BJ,EAAc,GAAD,OAAIQ,EAAJ,YADZ,sBAL9B,cAMQC,EANR,yBAOSA,GAPT,4C,oEAUA,WAA4BC,EAAeF,GAA3C,yCAAA5P,EAAA,yDAAqD+P,EAArD,+BAAsE,KAAMC,IAA5E,iCACOF,EADP,sBAEU,IAAIN,MAAM,6BAFpB,UAKOI,EALP,sBAMU,IAAIJ,MAAM,wBANpB,uBAUsCG,EAAkBC,GAVxD,UAUQK,EAVR,OAcEH,EAAcI,SAASnE,MAAK,SAACoE,GAC3B,IAAMC,EAAmBH,EAAsBE,GAQ/C,OAPIC,IACFC,EAAQ,CACNF,YACAG,YAAY,GAAD,OAAKV,EAAL,YAAiBQ,EAAiB1Q,MAC7C6Q,aAAcH,EAAiBG,eAG1BF,KAGNA,EA1BP,oBA2BSN,EA3BT,uBA4BY,IAAIP,MAAM,kCA5BtB,WA+BUY,EAAmBH,EAAsBF,GA/BnD,uBAiCY,IAAIP,MAAJ,8DAAiEO,EAAjE,eAjCZ,QAoCIM,EAAQ,CACNF,UAAWJ,EACXO,YAAY,GAAD,OAAKV,EAAL,YAAiBQ,EAAiB1Q,MAC7C6Q,aAAcH,EAAiBG,YAvCrC,yBA2CwBnB,EAAciB,EAAMC,aA3C5C,WA2CQE,EA3CR,QA8CMR,EA9CN,oBAiDMS,EAD+B,QAA7BX,EAAc1K,WACPoL,EAAQE,QAAQ3L,OAAOC,KAAKwL,EAAQE,SAAS,IAE7CF,EAAQE,QAAQZ,EAAc1K,YAnD7C,uBAsDY,IAAIoK,MAAJ,kCAAqCM,EAAc1K,WAAnD,wBAA6EiL,EAAMF,YAtD/F,QAyDQM,EAAOE,YACTA,EAAYN,EAAMC,YAAY9N,QAAQ,eAAgBiO,EAAOE,YA1DnE,iCA8DS,CAAEH,UAASG,cA9DpB,4C,yBAkEA,IAAMC,GAAyB,CAC7BC,MAAO,EACPC,MAAO,EACPxS,OAAQ,EACR+F,MAAOsJ,EAA0BM,eAAeC,S,IAyC5C6C,G,WACJ,WAAYC,GAA4B,oBACtCC,KAAKC,kBAAoBF,EAA0BE,kBACnDD,KAAKE,OAASH,EAA0BG,OACxCF,KAAKG,cAAgBJ,EAA0BI,cAC/CH,KAAKI,kBAAoBL,EAA0BK,kBAE/CJ,KAAKI,oBAAsB1D,EAA0BsB,uBAAuBC,YAC9E+B,KAAKK,YAAcN,EAA0BM,YAC7CL,KAAKM,YAAcP,EAA0BO,aAI/CN,KAAKzM,MAAQ,EACbyM,KAAKO,oBAAoBZ,I,uDAW3B,YAAsD,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,MAAOxS,EAAiB,EAAjBA,OAAQ+F,EAAS,EAATA,MAC1C,EAxDJ,WAAsC,IAAfoN,EAAc,uDAAV,EAAGC,EAAO,uDAAH,EAC5Bb,EAAQY,EACRX,EAAQY,EAKZ,GADmBC,KAAKC,KAAKH,EAAIA,EAAIC,EAAIA,GACxB,EAAG,CAClB,IAAMG,EAAQF,KAAKG,MAAMJ,EAAGD,GAC5BZ,EAAQc,KAAKI,IAAIF,GACjBf,EAAQa,KAAKK,IAAIH,GASnB,MAJe,CACbI,gBAAyB,GAARpB,EAAc,GAC/BqB,gBAAyB,GAARpB,EAAc,IAuCcqB,CAActB,EAAOC,GAA1DmB,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,gBACzB,OAAQjB,KAAKC,mBACX,KAAKvD,EAA0BU,kBAAkBE,OAC/C0C,KAAKzM,MAAQyM,KAAKE,OAAOiB,SAAS/N,GAAS4N,EAAkB,GAC7D,MACF,KAAKtE,EAA0BU,kBAAkBG,OAC/CyC,KAAKzM,MAAQyM,KAAKE,OAAOiB,SAAS/N,GAAS6N,EAAkB,GAC7D,MACF,KAAKvE,EAA0BU,kBAAkBC,OAC/C2C,KAAKzM,MAAQyM,KAAKE,OAAOiB,SAAS/N,GAAS/F,EAAS,EACpD,MACF,KAAKqP,EAA0BU,kBAAkBI,MAC3CwC,KAAKI,oBAAsB1D,EAA0BsB,uBAAuBE,WAC9E8B,KAAKzM,MAAQyM,KAAKE,OAAOiB,SAAS/N,GAElC4M,KAAKzM,MAAQyM,KAAKE,OAAOiB,SAAS/N,GAAS,EAAM,EAEnD,MACF,QACE,MAAM,IAAImL,MAAJ,sDAAyDyB,KAAKC,yB,KAKtEmB,G,WAKJ,WAAYC,EAAaC,GAAuB,IAAD,OAC7C,GAD6C,qBAE1CD,IACAC,IACAA,EAAqBC,kBACrBD,EAAqBE,gBACsC,IAA5D1N,OAAOC,KAAKuN,EAAqBE,gBAAgB3N,OAEjD,MAAM,IAAI0K,MAAM,8BAGlByB,KAAKlP,GAAKuQ,EACVrB,KAAKzH,KAAO+I,EAAqB/I,KACjCyH,KAAKyB,aAAeH,EAAqBG,aACzCzB,KAAK0B,mBAAqBJ,EAAqBI,mBAG/C1B,KAAKuB,gBAAkB,GACvBzN,OAAOC,KAAKuN,EAAqBC,iBAAiB1M,SAAQ,SAAC8M,GACzD,IAAMC,EAAiB,IAAI9B,GAAewB,EAAqBC,gBAAgBI,IAC/E,EAAKJ,gBAAgBI,GAAgBC,KAIvC5B,KAAKwB,eAAiB1N,OAAO+N,OAAO,GAAIP,EAAqBE,gBAE7DxB,KAAKpF,OAAS,CACZxH,MAAOsJ,EAA0BM,eAAeC,QAChD5P,YAAuCI,IAA/BuS,KAAKwB,eAAenU,OAAuB,OAAII,EACvDmS,WAAqCnS,IAA9BuS,KAAKwB,eAAe5B,MAAsB,OAAInS,EACrDoS,WAAqCpS,IAA9BuS,KAAKwB,eAAe3B,MAAsB,OAAIpS,G,sCAIzD,WAEE,OADU,aAAKqD,GAAIkP,KAAKlP,IAAOkP,KAAKpF,U,+BAQtC,SAAkBkH,GAAU,IAAD,OAKzB,GAHA9B,KAAKpF,OAAOxH,MAAQsJ,EAA0BM,eAAeC,aAG1BxP,IAA/BuS,KAAKwB,eAAenU,QAAwByU,EAAQC,QAAQlO,OAASmM,KAAKwB,eAAenU,OAAQ,CACnG,IAAM2U,EAAgBF,EAAQC,QAAQ/B,KAAKwB,eAAenU,QAC1D2S,KAAKpF,OAAOvN,OAAS2U,EAAczO,MACnCyM,KAAKpF,OAAOvN,OAAS2S,KAAKpF,OAAOvN,OAAS,EAAI,EAAI2S,KAAKpF,OAAOvN,OAC9D2S,KAAKpF,OAAOvN,OAAS2S,KAAKpF,OAAOvN,OAAS,EAAI,EAAI2S,KAAKpF,OAAOvN,OAG1D2U,EAAcC,SAAkC,IAAvBjC,KAAKpF,OAAOvN,OACvC2S,KAAKpF,OAAOxH,MAAQsJ,EAA0BM,eAAeG,SACpD6E,EAAcE,SAAWlC,KAAKpF,OAAOvN,OAASqP,EAA0BoB,wBACjFkC,KAAKpF,OAAOxH,MAAQsJ,EAA0BM,eAAeE,cAK/BzP,IAA9BuS,KAAKwB,eAAe5B,OAAuBkC,EAAQK,KAAKtO,OAASmM,KAAKwB,eAAe5B,QACvFI,KAAKpF,OAAOgF,MAAQkC,EAAQK,KAAKnC,KAAKwB,eAAe5B,OACrDI,KAAKpF,OAAOgF,MAAQI,KAAKpF,OAAOgF,OAAS,GAAK,EAAII,KAAKpF,OAAOgF,MAC9DI,KAAKpF,OAAOgF,MAAQI,KAAKpF,OAAOgF,MAAQ,EAAI,EAAII,KAAKpF,OAAOgF,MAI1DI,KAAKpF,OAAOxH,QAAUsJ,EAA0BM,eAAeC,SAC/DyD,KAAK0B,IAAIpC,KAAKpF,OAAOgF,OAASlD,EAA0BqB,qBAExDiC,KAAKpF,OAAOxH,MAAQsJ,EAA0BM,eAAeE,eAK/BzP,IAA9BuS,KAAKwB,eAAe3B,OAAuBiC,EAAQK,KAAKtO,OAASmM,KAAKwB,eAAe3B,QACvFG,KAAKpF,OAAOiF,MAAQiC,EAAQK,KAAKnC,KAAKwB,eAAe3B,OACrDG,KAAKpF,OAAOiF,MAAQG,KAAKpF,OAAOiF,OAAS,GAAK,EAAIG,KAAKpF,OAAOiF,MAC9DG,KAAKpF,OAAOiF,MAAQG,KAAKpF,OAAOiF,MAAQ,EAAI,EAAIG,KAAKpF,OAAOiF,MAI1DG,KAAKpF,OAAOxH,QAAUsJ,EAA0BM,eAAeC,SAC/DyD,KAAK0B,IAAIpC,KAAKpF,OAAOiF,OAASnD,EAA0BqB,qBAExDiC,KAAKpF,OAAOxH,MAAQsJ,EAA0BM,eAAeE,UAKjEpJ,OAAO8G,OAAOoF,KAAKuB,iBAAiB1M,SAAQ,SAAC+M,GAC3CA,EAAerB,oBAAoB,EAAK3F,e,KAUxCyH,G,WAMJ,WAAYxD,EAAeU,EAAS+C,GAAW,IAAD,OAC5C,GAD4C,qBACvCzD,EACH,MAAM,IAAIN,MAAM,6BAGlB,IAAKgB,EACH,MAAM,IAAIhB,MAAM,uBAGlByB,KAAKnB,cAAgBA,EACrBmB,KAAKsC,SAAWA,EAChBtC,KAAKlP,GAAKyO,EAAQL,UAGlBc,KAAKuC,kBAAoBhD,EAAQE,QAAQZ,EAAc1K,YACvD6L,KAAKwC,WAAa,GAClB1O,OAAOC,KAAKiM,KAAKuC,kBAAkBC,YAAY3N,SAAQ,SAACwM,GACtD,IAAMC,EAAuB,EAAKiB,kBAAkBC,WAAWnB,GAC/D,EAAKmB,WAAWnB,GAAe,IAAID,GAAUC,EAAaC,MAI5DtB,KAAKyC,oB,2CAGP,WACE,OAAOzC,KAAKnB,cAAc6D,Y,0BAG5B,WACE,OAAO1C,KAAKnB,cAAc8D,iB,gBAM5B,WACE,IAAM3P,EAAO,GAIb,OAHAc,OAAO8G,OAAOoF,KAAKwC,YAAY3N,SAAQ,SAAC+N,GACtC5P,EAAKrE,KAAKiU,EAAU5P,SAEfA,I,+BAMT,WAAqB,IAAD,OAClBc,OAAO8G,OAAOoF,KAAKwC,YAAY3N,SAAQ,SAAC+N,GACtCA,EAAUH,kBAAkB,EAAK5D,cAAciD,gB,cClY/Ce,GAAwB,8EAGxBC,G,kDACJ,aAAe,IAAD,8BACZ,gBAEKC,iBAAmB,KACxB,EAAKC,OAAS,KAJF,E,qDAOd,SAAkBA,GAAS,IAAD,OACxB,OAAIhD,KAAKgD,QAAUA,IAInBhD,KAAKgD,OAASA,EACdhD,KAAKiD,UAAS,SAACC,GACTA,EAAMC,SACRD,EAAME,SAASJ,OAAS,EAAKA,OAC7BE,EAAME,SAASC,aAAc,OAPxBrD,O,+BAkBX,SAAkBsD,GAChB,yEAAwBA,GAEnBtD,KAAK+C,mBAGV/C,KAAK+C,iBAAiBN,oBAGtB3O,OAAO8G,OAAOoF,KAAK+C,iBAAiBP,YAAY3N,SAAQ,SAAC+N,GAEvD9O,OAAO8G,OAAOgI,EAAUrB,iBAAiB1M,SAAQ,SAAC+M,GAChD,IAAQ2B,EAA0D3B,EAA1D2B,UAAWC,EAA+C5B,EAA/C4B,QAASC,EAAsC7B,EAAtC6B,QAASlQ,EAA6BqO,EAA7BrO,MAAO6M,EAAsBwB,EAAtBxB,kBAIvCmD,IAGDnD,IAAsB1D,EAA0BsB,uBAAuBE,WACzEqF,EAAUG,QAAUnQ,EACX6M,IAAsB1D,EAA0BsB,uBAAuBC,YAChFsF,EAAUI,WAAWC,iBAAiBJ,EAAQG,WAAYF,EAAQE,WAAYpQ,GAE9EgQ,EAAUpV,SAAS0V,YAAYL,EAAQrV,SAAUsV,EAAQtV,SAAUoF,gB,GApD7CuQ,YAgHhC,SAASC,GAA+BC,EAAiBC,IAhDzD,SAAmBlB,EAAkBkB,GAEnCnQ,OAAO8G,OAAOmI,EAAiBP,YAAY3N,SAAQ,SAAC+N,GAClD,IAAQrK,EAA8CqK,EAA9CrK,KAAMmJ,EAAwCkB,EAAxClB,mBAAoBH,EAAoBqB,EAApBrB,gBAElC,GAAIhJ,IAASmE,EAA0Be,cAAcG,SAEnD,GADAgF,EAAUsB,eAAiBD,EAAME,gBAAgBzC,GAC7CkB,EAAUsB,eAAgB,CAE5B,IAAME,EAAiB,IAAIC,iBAAe,MACpCjB,EAAW,IAAIkB,oBAAkB,CAAE7T,MAAO,MAC1C8T,EAAS,IAAIC,OAAKJ,EAAgBhB,GACxCR,EAAUsB,eAAerM,IAAI0M,QAE7BpP,QAAQC,KAAR,oCAA0CwN,EAAUlB,mBAApD,mCAAiGkB,EAAU9R,KAK/GgD,OAAO8G,OAAO2G,GAAiB1M,SAAQ,SAAC+M,GACtC,IAAQzB,EAA+DyB,EAA/DzB,cAAeE,EAAgDuB,EAAhDvB,YAAaC,EAAmCsB,EAAnCtB,YAGpC,GAHuEsB,EAAtBxB,oBAGvB1D,EAA0BsB,uBAAuBC,UAAW,CAKpF,GAJA2D,EAAe4B,QAAUS,EAAME,gBAAgB9D,GAC/CuB,EAAe6B,QAAUQ,EAAME,gBAAgB7D,IAG1CsB,EAAe4B,QAElB,YADArO,QAAQC,KAAR,yBAA+BiL,EAA/B,kBAIF,IAAKuB,EAAe6B,QAElB,YADAtO,QAAQC,KAAR,yBAA+BkL,EAA/B,kBAMJsB,EAAe2B,UAAYU,EAAME,gBAAgBhE,GAC5CyB,EAAe2B,WAClBpO,QAAQC,KAAR,yBAA+B+K,EAA/B,wBAQNsE,CAAUT,EAAgBjB,iBAAkBkB,GAGxCD,EAAgBhB,QAClBiB,EAAMhB,UAAS,SAACC,GACVA,EAAMC,SACRD,EAAME,SAASJ,OAASgB,EAAgBhB,OACxCE,EAAME,SAASC,aAAc,MAMnCW,EAAgBnM,IAAIoM,G,IAGhBS,G,WACJ,aAAgC,IAApBC,EAAmB,uDAAN,KAAM,oBAC7B3E,KAAK2E,WAAaA,EAClB3E,KAAKvR,KAAOoU,GACZ7C,KAAK4E,YAAc,GAGd5E,KAAK2E,aACR3E,KAAK2E,WAAa,IAAIE,M,yDAI1B,SAAsBzS,GAAa,IAAD,OAC1B4R,EAAkB,IAAIlB,GACxBmB,EAAQ,KAiDZ,OA/CA7R,EAAW9D,iBAAiB,aAAa,SAACwE,GACxC,IAAM+L,EAAgB/L,EAAME,KAEQ,oBAAhC6L,EAAciG,eAAwCjG,EAAciD,S,8CAExEiD,CAAalG,EAAe,EAAKpQ,KAzJf,mBA0JfsB,MAAK,YAA6B,IAA1BwP,EAAyB,EAAzBA,QAASG,EAAgB,EAAhBA,UAChBsE,EAAgBjB,iBAAmB,IAAIV,GAAiBxD,EAAeU,EAASG,GAEhF,IAAMsF,EAAc,EAAKJ,YAAYZ,EAAgBjB,iBAAiBT,UACtE,GAAI0C,EACFf,EAAQe,EAAYf,MAAMgB,QAE1BlB,GAA+BC,EAAiBC,OAC3C,CACL,IAAK,EAAKU,WACR,MAAM,IAAIpG,MAAM,uBAGlB,EAAKoG,WAAWO,QAAQ,IACxB,EAAKP,WAAWQ,KACdnB,EAAgBjB,iBAAiBT,UACjC,SAAC8C,GACC,EAAKR,YAAYZ,EAAgBjB,iBAAiBT,UAAY8C,EAE9DnB,EAAQmB,EAAMnB,MAAMgB,QAEpBlB,GAA+BC,EAAiBC,KAElD,MACA,WACE,MAAM,IAAI1F,MAAJ,gBAAmByF,EAAgBjB,iBAAiBT,SAApD,kCAKbrR,OAAM,SAACoU,GACNlQ,QAAQC,KAAKiQ,SAInBjT,EAAW9D,iBAAiB,gBAAgB,WAC1C0V,EAAgBjB,iBAAmB,KACnCiB,EAAgB3J,OAAO4J,GACvBA,EAAQ,QAGHD,M,KClMLsB,GAAe,IAAIZ,GACnBa,GAAa,IAAIC,QAChB,SAASC,GAAT,GAAoG,IAAD,IAAnEC,mBAAmE,MAArD,GAAqD,EAChGzB,EAAUrO,cAAVqO,MACR,EAAoCxP,IAA5BE,EAAR,EAAQA,YAAaY,EAArB,EAAqBA,WACrB,EAAelB,IAAMwB,SAAS,IAAI1C,KAA3BwS,EAAP,oBA8DA,OA3DAzO,aAAS,WACPvC,EAAYE,SAAQ,SAACjB,GACnB,IAAMgD,EAAM+O,EAAKhS,IAAIC,EAAGxB,WAAWtB,IACnC,GAAK8F,EAAL,CAEA,IAAMe,EAA6BpC,EAAW3B,EAAGjB,YAAYwB,YAAYyG,SAASgL,OAAOrS,MACzF,GAAKoE,GAA8C,SAA9B/D,EAAGjB,YAAYwB,WAApC,CAKA,IAAM0R,EAAYlO,EAAamO,SAK/BlP,EAAI8M,SAAU,EACd9M,EAAImP,MAAMtF,EAAIoF,GAFC,IAGfjP,EAAIzI,SAAS6X,GAAKH,EAAY,IAHf,SARbjP,EAAI8M,SAAU,SAepBnP,qBAAU,WACR,IAAMK,EAAkB,GA8BxB,OA5BAD,EAAYE,SAAQ,YAAwC,IAEtDoR,EAFiB7T,EAAoC,EAApCA,WAAYE,EAAwB,EAAxBA,KAAMK,EAAkB,EAAlBA,YAGnC4S,GAAW/R,IAAIpB,GACjB6T,EAAQV,GAAW5R,IAAIvB,IAEvB6T,EAAQX,GAAaY,sBAAsB9T,GAC3CA,EAAW+T,cAAc,CAAE5N,KAAM,YAAavF,KAAML,EAAaI,MAAM,IACvEwS,GAAW9R,IAAIrB,EAAY6T,IAE7B3T,EAAKuF,IAAIoO,GAGT,IAAMrP,EAAM,IAAI4N,OAChB5N,EAAIwP,SAAS3S,IAAIiN,KAAK2F,GAAK,EAAG,EAAG,GACjCzP,EAAIwM,SAAW,IAAIkB,oBAAJ,aAAwB7T,MAAO,IAAI6V,QAAM,UAAW5W,QAAS,GAAK6W,aAAa,GAASb,IACvG9O,EAAI4P,SAAW,IAAIC,oBAAkB,KAAO,EAAG,MAE/Cd,EAAKlS,IAAIrB,EAAWtB,GAAI8F,GACxBxE,EAAWyF,IAAIjB,GAEfhC,EAASjG,MAAK,WACZ2D,EAAK+H,OAAO4L,GACZ7T,EAAWiI,OAAOzD,GAClB+O,EAAK3R,OAAO5B,EAAWtB,UAIpB,WACL8D,EAASC,SAAQ,SAACI,GAAD,OAAQA,UAG1B,CAACN,EAAasP,EAAO0B,EAAMe,KAAKC,UAAUjB,KAEtC,K,MCvEM,SAASkB,GAAT,GAAkC,IAAD,IAAhBC,aAAgB,MAAR,IAAQ,EACxCC,EAAY3O,mBAAQ,WAExB,IADA,IAAI2O,EAAY,GACPpP,EAAI,EAAGA,EAAImP,EAAOnP,IAAK,CAC9B,IAAMwE,EAAI,IACJ0E,EAAQ,EAAIF,KAAK2F,GAAK3F,KAAKqG,SAC3BC,EAAMtG,KAAKuG,KAAK,EAAIvG,KAAKqG,SAAW,GACpCvG,EAAItE,EAAIwE,KAAKI,IAAIF,GAASF,KAAKK,IAAIiG,IAAgC,IAAhBtG,KAAKqG,SAAZ,KAC5CtG,EAAIvE,EAAIwE,KAAKK,IAAIH,GAASF,KAAKK,IAAIiG,IAAgC,IAAhBtG,KAAKqG,SAAZ,KAC5Cf,EAAI9J,EAAIwE,KAAKI,IAAIkG,IAAgC,IAAhBtG,KAAKqG,SAAZ,KAChCD,EAAUnY,KAAK6R,GACfsG,EAAUnY,KAAK8R,GACfqG,EAAUnY,KAAKqX,GAEjB,OAAO,IAAIkB,aAAaJ,KACvB,CAACD,IACJ,OACE,mCACE,yCACE,iCAAiBM,aAAc,CAAC,aAAc,YAAaN,MAAOC,EAAUjT,OAAS,EAAGuT,MAAON,EAAWO,SAAU,MAEtH,gCAAgBlQ,KAAM,GAAImQ,iBAAe,EAAC7W,MAAM,QAAQ8W,KAAK,OCjBpD,SAASC,KACtB,IAAMlP,EAAMhE,mBAIZ,OAFA4C,aAAU,kBAAKoB,EAAI9D,QAAQ4R,SAAS3F,EAAMnI,EAAI9D,QAAQ4R,SAAS3F,EAAI,OAIjE,uBAAOnI,IAAKA,EAAKyN,MAAO,CAAC,IAAK,IAAK,KAAM5X,SAAU,CAAC,EAAG,EAAG,GAA1D,SAGE,uBAAMA,SAAU,CAAC,EAAG,EAAG,GAAvB,UACE,gCAAgBsZ,KAAM,CAAC,EAAG,GAAI,MAC9B,mCAAmBhX,MAAM,UAAU8W,KAAK,IACxC,4BAAYzB,SAAU,KAAM4B,UAAW,GAAIjX,MAAM,UAHnD,S,8BChBS,OAA0B,kCCA1B,OAA0B,mCCA1B,OAA0B,oCCA1B,OAA0B,+BCA1B,OAA0B,iCCA1B,OAA0B,kCCA1B,OAA0B,sCCWnCkX,IADM,IAAIC,MAAMC,IACP,IAAID,MAAME,KAEnBC,IADU,IAAIH,MAAMI,IACf,IAAIJ,MAAMK,KCNfC,IDOO,IAAIN,MAAMO,IACT,IAAIP,MAAMQ,IACN,IAAIR,MAAMS,I,8JCP3B,SAAUpM,GAAqC,IAAlCqM,EAAiC,uDAAhB,IAAIC,UAE3BC,EAAQF,EAERvZ,EAAI,GACJ0Z,EAAI,IAEJC,EAAK,EAAIhI,KAAK2F,GAAKpK,EAAIwM,EAAI,IAE3BzC,EAAItF,KAAKI,IAAK4H,GAAO3Z,EACrByR,EAAIE,KAAKK,IAAK2H,GAAO3Z,EACrB0R,EAAI,EAEV,OAAO+H,EAAM/U,IAAK+M,EAAGC,EAAGuF,O,GAfD2C,UAqBnBC,G,8JAEL,SAAU3M,GAAqC,IAAlCqM,EAAiC,uDAAhB,IAAIC,UAE3BC,EAAQF,EAERvZ,EAAI,GACJ0Z,EAAI,IAIJzC,GAFStF,KAAK2F,GAEVtX,GACJyR,EAAIzR,EACJ0R,EAAI,EAEV,OAAO+H,EAAM/U,IAAK+M,EAAGC,EAAGuF,O,GAfD2C,SAsBnBE,G,8JAEL,SAAU5M,GAAqC,IAAlCqM,EAAiC,uDAAhB,IAAIC,UAE3BC,EAAQF,EAEdrM,EAAI,EAAIyE,KAAK2F,GAAKpK,EAElB,IAAMuE,GAAM,IAAOE,KAAKI,IAAK7E,GAAM,KAAOyE,KAAKK,IAAK9E,GAAM,IAAOyE,KAAKI,IAAK,EAAI7E,GAAM,IAAOyE,KAAKK,IAAK,EAAI9E,GACpGwE,GAAM,GAAMC,KAAKI,IAAK,EAAI7E,GAAM,IAAOyE,KAAKK,IAAK,EAAI9E,GAAM,IAAOyE,KAAKI,IAAK,EAAI7E,GAAM,IAAOyE,KAAKK,IAAK,EAAI9E,GAC3G+J,EAAI,GAAMtF,KAAKI,IAAK,EAAI7E,GAAM,GAAMyE,KAAKK,IAAK,EAAI9E,GAExD,OAAOuM,EAAM/U,IAAK+M,EAAGC,EAAGuF,GAAI8C,eAAgB,Q,GAZrBH,SAmBrBI,GAAO,EAELC,GAAWC,MAAO,SAACxV,EAAKE,GAC5B,IAAIuV,EAAS,IAAIL,GACbM,EAAQ,IAAIC,qBAAyBF,EAAQ,IAAK,GAAK,IAAI,GAC3DG,EAAU,IAAInB,GACdoB,EAAU,IAAIV,GAGdW,GAFS,IAAIH,qBAAyBE,EAAS,IAAK,GAAK,IAAI,GACpD,IAAIF,qBAAyBC,EAAS,IAAK,GAAK,IAAI,QAC7C5b,GAChB+b,OAAoB/b,EAClBgc,EAAM,IAAIL,OAEhB,MAAO,CACLM,OAAO,EACP9P,YAAQnM,EACRkc,OAAQ,EACRC,OAAQ,IACRC,OAAQ,GACRC,WAAY,GACZC,MAAOC,GAAW,IAAKb,EAAO,IAAK,GAAG,kBAAM,EAAoB,IAAhBzI,KAAKqG,YACrDkD,QAASD,GAAW,GAAIb,EAAO,GAAI,GAAI,GAEvCe,SAAU,CACRC,WAAW,EACXlO,EAAG,EACH9N,SAAU,IAAIib,UACdgB,UAAWC,KAAKC,MAEhBnB,QACApD,MAAO,GACPwE,IAAK,GACLlT,MAAM,EACNmT,MAAOC,GAAY,GAAItB,GACvBuB,UAAWV,GAAW,KAAMb,EAAO,IAAK,GAAG,iBAAM,GAAsB,GAAhBzI,KAAKqG,YAC5D4D,SAAU,IACVC,SAAU,IAAIxB,UACdyB,OAAQ,IAAIzB,UACZ0B,MAAO,IAAI1B,SAAY,GACvB2B,MAAO,IAAI3B,WAAe,IAAK,IAG/B4B,MAAO,IAAI5B,WACXxS,IAAK,IAAIwS,MACTK,IAAK,IAAIL,QAGX6B,QAAS,CACPC,KADO,SACFtR,GACH,MAA8BjG,IAAtBuW,EAAR,EAAQA,SAAUe,EAAlB,EAAkBA,QAElBxX,EAAI,CAAEmG,WACNsQ,EAASY,MAAMK,QACfF,EAAQG,YAAYzX,IAAM+V,OAE1B2B,aAAU,WACR,MAA2B1X,IAErB2X,GAFN,EAAQvB,MAAR,EAAeE,QAEFI,KAAKC,OACZrO,EAAKiO,EAASjO,GAAMqP,EAAOpB,EAASE,WAAaF,EAASS,SAAYT,EAASS,SACrFT,EAAS/b,SAAWgb,EAAMoC,WAAW9c,KAAK+c,WAAWvP,GACrDiO,EAAS/b,SAAS2a,eAAeoB,EAASnE,OAG1C,IAAI0F,GAAU,EACVxP,EAAI,IAAOA,EAAI,GACZwP,IACHA,GAAU,GAGHxP,EAAI,KACbwP,GAAU,GASKvB,EAAS7S,KAA1B,IAGMwS,EAASlW,IAAMkW,OACrB,GAAIK,EAAS7S,MAAQwS,EAAOhW,QAAUyX,EAAOzB,EAAOA,EAAOhW,OAAS,GAAK,IAAK,CAC5E,IAAM6X,EAAU3c,EAAE4c,KAAI,SAAC3Y,GAAD,oBAAasY,KAAMjB,KAAKC,OAAUtX,MACxDS,GAAI,SAACL,GAAD,MAAY,CAAE0W,WAAW,GAAD,mBAAM1W,EAAM0W,YAAZ,YAA2B4B,QACvDE,aAAapC,GACbA,EAAoBqC,YAAW,kBAAMpY,GAAI,SAACL,GAAD,MAAY,CAAE0W,WAAY1W,EAAM0W,WAAWjY,QAAO,gBAAGyZ,EAAH,EAAGA,KAAH,OAAcjB,KAAKC,MAAQgB,GAAQ,aAAW,KACzI7X,GAAI,SAACL,GAAD,MAAY,CACduW,OAAQvW,EAAMuW,OAAoB,IAAXzN,EAAErI,OAA0B,IAAXkB,EAAElB,OAC1CkW,MAAO3W,EAAM2W,MAAMlY,QAAO,SAACia,GAAD,OAAW5P,EAAEzE,MAAK,SAACyE,GAAD,OAAOA,EAAE6M,OAAS+C,EAAK/C,WACnEkB,QAAS7W,EAAM6W,QAAQpY,QAAO,SAACka,GAAD,OAAYhX,EAAE0C,MAAK,SAAC1C,GAAD,OAAOA,EAAEgU,OAASgD,EAAMhD,oBAMjFiD,MAnDO,WAoDLvY,GAAI,SAACL,GAAD,MAAY,CAAEyW,OAAO,GAAD,mBAAMzW,EAAMyW,QAAZ,CAAoBQ,KAAKC,YACjDsB,aAAarC,GACbA,EAAgBsC,YAAW,kBAAMpY,GAAI,SAACL,GAAD,MAAY,CAAEyW,OAAQzW,EAAMyW,OAAOhY,QAAO,SAACoK,GAAD,OAAOoO,KAAKC,MAAQrO,GAAK,aAAW,MAGrHmP,YAzDO,WAyD4B,IAAvB1B,EAAsB,wDAAb/V,IAAM+V,MACzBjW,EAAI,CAAEiW,UACNuC,GAAUC,GAAc,GAAG,GAE3BD,GAAUC,GAAU,GAAG,IAEzBC,YA/DO,YA+DkC,IAAlB3L,EAAiB,EAA1B4L,QAAqB3L,EAAK,EAAd4L,QACxB1Y,IAAMuW,SAASa,MAAMtX,IAAI+M,EAAIrP,OAAOmb,WAAa,EAAG7L,EAAItP,OAAOob,YAAc,IAE/EC,KAlEO,SAkEFxZ,GACHyW,EAAIgD,IAAIC,KAAK1Z,EAAK2Z,QAClBlD,EAAImD,IAAIF,KAAK1Z,EAAK2Z,QAClBlD,EAAIoD,eAAe7Z,EAAKmE,KAAOnE,EAAK+S,OACpC/S,EAAKwE,IAAI/D,IAAI,IAAO,IAAO,KAC3B,IAAMqZ,EAASnZ,IAAMuW,SAAStT,IAAImW,aAAatD,EAAKzW,EAAKwE,KAEzD,OADAxE,EAAK8S,SAAWnS,IAAMuW,SAAStT,IAAIC,OAAOmW,WAAWha,EAAKwE,KACnDsV,QAMf,SAAS9C,GAAWnD,EAAOsC,EAAO8D,EAAQ9V,EAAM4O,GAC9C,OAAO,IAAI3P,MAAMyQ,GAAOqG,OAAOvB,KAAI,WACjC,IAAM1P,EAAIyE,KAAKqG,SACToG,EAAMhE,EAAMoC,WAAW9c,KAAK+c,WAAWvP,GAC7CkR,EAAIrE,eAAe,IACnB,IAAM6D,EAASQ,EACZlI,QACApN,IAAI,IAAIuR,WAAe6D,EAASvM,KAAKqG,SAAWkG,EAAS,GAAIA,EAASvM,KAAKqG,SAAWkG,EAAS,GAAIA,EAASvM,KAAKqG,SAAWkG,EAAS,IAClIG,EAAQ,GAAM1M,KAAKqG,SACzB,MAAO,CAAEgC,KAAMA,KAAQhD,MAAwB,oBAAVA,EAAuBA,IAAUA,EAAO5O,OAAMwV,SAAQQ,MAAKC,QAAOH,SAAQhR,IAAGzE,IAAK,IAAI4R,UAAiBtD,SAAU,QAI1J,SAAS2E,GAAY5D,EAAOsC,GAG1B,IAFA,IAAIkE,EAAO,GACPpR,EAAI,GACCvE,EAAI,EAAGA,EAAImP,EAAOnP,IAAK,CAC9BuE,GAAK,KACL,IAAMkR,EAAMhE,EAAMoC,WAAW9c,KAAK+c,WAAWvP,GAC7CkR,EAAIrE,eAAe,IACnB,IACMwE,EAAQrR,EADGkN,EAAMoE,SAAS1Z,OAE1B2Z,EAAO9M,KAAK+M,MAAMH,GAClBI,EAASvE,EAAMoC,WAAW9c,KAAK+c,YAAYvP,EAAI,EAAIkN,EAAMoC,WAAW9c,KAAKkf,aAAe,GAAG7E,eAAe,IAC1G8E,GAAS,IAAIxE,WAAgBsE,OAAOP,EAAKO,EAAQvE,EAAM0E,UAAUL,IACvEH,EAAK1e,KAAK,CAACwe,EAAIW,UAAWF,IAE5B,OAAOP,EAGT,SAASpB,GAAUC,GAAkC,IAA3B6B,EAA0B,uDAAjB,EAAGC,EAAc,wDAC9ChF,GAASiF,WAAWvE,OACtBwC,EAAMgC,YAAc,EACpBhC,EAAM6B,OAASA,EACf7B,EAAM8B,KAAOA,EACb9B,EAAMiC,QACDjC,EAAMkC,QAGApF,UC1OA,OAA0B,kCCA1B,OAA0B,iCCA1B,OAA0B,iC,8DCMzC,SAASqF,GAAT,GAA6D,IAA9C5d,EAA6C,EAA7CA,MAAO0G,EAAsC,EAAtCA,KAAM4O,EAAgC,EAAhCA,MAAOpQ,EAAyB,EAAzBA,SAAauF,EAAY,kBACxD,OACE,+CAAM6K,MAAOA,GAAW7K,GAAxB,cACE,mCAAmBoT,OAAO,WAAW7G,KAAMtQ,IAC3C,mCAAmBmX,OAAO,WAAW7d,MAAOA,IAC3CkF,MAMO,SAAS4Y,GAAT,GAA0C,IAAzB3U,EAAwB,EAAxBA,OAAWd,EAAa,kBACrD,EAA0BjD,oBAAS,GAAnC,mBAAO2Y,EAAP,KAAcC,EAAd,KACA,EAA0B5Y,mBAAc,QAAxC,mBAAOpF,EAAP,KAAcie,EAAd,KACA,EAAwB7Y,mBAAc,CAAC,GAAK,GAAK,MAAjD,mBAAOsB,EAAP,KAAawX,EAAb,KACA,EAAwB9Y,mBAAc,0BAAtC,mBAAO+Y,EAAP,KAAaC,EAAb,KACM5D,EAAUjC,IAAU,SAAC5V,GAAD,OAAWA,EAAM6X,WACrC6D,EAAS9F,IAAS,SAAC5V,GAAD,OAAWA,EAAM6X,QAAQG,eAWjD,OACE,cAACxS,EAAD,CAAaI,QAAS,kBAAMyV,GAAS,IAAOxV,OAAQ,kBAAMwV,GAAS,IAAQrV,SAT5D,WACfsV,EAA0B,SAAhBhO,KAAKqG,SAAuB,GACtC4H,EAAQ,CAAC,EAAE,EAAE,IACbE,EAAQ,IACR5D,EAAQC,KAAKtR,GACbkV,KAIA,SACE,cAACT,GAAD,yBAAKjI,SAAU,CAAC,EAAE,GAAG,GAAI3V,MAAOA,EAAOsV,MAAOyI,EAAQ,CAAC,GAAK,GAAK,IAAO,CAAC,GAAK,GAAK,IAAMrX,KAAMA,GAAU2B,GAAzG,aACE,cAACiW,GAAA,EAAD,CAAM5gB,SAAU,CAAC,EAAG,EAAG,KAAO6gB,SAAU,IAAMve,MAAM,OAAOwe,QAAQ,SAASC,QAAQ,SAApF,SACGN,SC3BE,SAASO,KAEtB,IAAMC,EAAW9a,mBACjB,EAA4B+a,YAAUjG,gBAAqB,CAACkG,GAAUC,GAASC,KAA/E,mBAAOC,EAAP,KAAcC,EAAd,UAGAxY,aAAU,SAAC9D,EAAOuc,GAAR,OAAkBP,EAAS5a,QAAQ4R,SAAS3F,GAAM,OAC5D,MAAyBuI,IAAU,SAAC5V,GAAD,OAAWA,EAAM8W,YAA5CK,EAAR,EAAQA,IAAR,EAAapc,SAEb,OAIE,cAFA,CAEA,SACEmK,IAAK8W,EACLrJ,MAAO,CAAC,IAAK,IAAK,KAClB5X,SAAU,EAAE,IAAM,EAAG,KAHvB,UAMI,cAACogB,GAAD,CAAQpgB,SAAU,CAAC,GAAG,GAAG,IAAKyL,OAAQ,CAAEzL,SAAU,EAAE,IAAM,EAAG,KAAOyhB,KAAM,IAAMC,IAAK,IAAQtF,SAI/F,uBAAMpc,SAAU,CAAC,EAAE,EAAE,GAArB,UACE,gCAAgBsZ,KAAM,CAAC,EAAG,GAAI,MAC9B,sCAAsBkE,IAAK8D,EAAOK,UAAW,EAAGvI,KAAK,OAKvD,uBAAMpZ,SAAU,CAAC,EAAG,EAAG,GAAvB,UACE,gCAAgBsZ,KAAM,CAAC,IAAM,GAAI,MACjC,sCAAsBqI,UAAW,EAAGnE,IAAK+D,EAAMnI,KAAK,UCpC7C,SAASwI,KACtB,IAAMzX,EAAMhE,mBACZ,EAAiB+a,YAAUjG,gBAAqB,CAAEoG,KAA1CQ,EAAR,oBAIA,OAFA9Y,aAAU,kBAAKoB,EAAI9D,QAAQ4R,SAAS3F,EAAMnI,EAAI9D,QAAQ4R,SAAS3F,EAAI,OAIjE,uBAAOnI,IAAKA,EAAKyN,MAAO,CAAC,IAAK,IAAK,KAAM5X,SAAU,CAAC,IAAM,GAAI,KAA9D,SAGE,uBAAMA,SAAU,CAAC,EAAE,EAAE,GAArB,UACE,gCAAgBsZ,KAAM,CAAC,EAAG,GAAI,MAC9B,sCAAsBkE,IAAKqE,EAAMF,UAAW,EAAGvI,KAAK,SChB5D,IAAIoF,GAAS,EACE,SAASsD,GAAT,GAA4B,IAAbta,EAAY,EAAZA,SACtBwE,EAAQ7F,mBACR4b,EAAM5b,mBACN4V,EAAWlB,IAAS,SAAC5V,GAAD,OAAWA,EAAM8W,YACnCK,EAA+CL,EAA/CK,IAAKxE,EAA0CmE,EAA1CnE,MAAO6E,EAAmCV,EAAnCU,SAAUC,EAAyBX,EAAzBW,OAAQ1B,EAAiBe,EAAjBf,MAAO4B,EAAUb,EAAVa,MACrCnR,EAAWhE,cAAXgE,OA0BR,OAxBA1C,aAAS,WACP,IAAM+E,EAAIiO,EAASjO,EACbkR,EAAMjD,EAAS/b,SAAS8W,QACxBkL,EAAWhH,EAAMoE,SAAS1Z,OAC1ByZ,EAAQrR,EAAIkU,EACZ3C,EAAO9M,KAAK+M,MAAMH,GAClB8C,GAAY5C,EAAO,GAAK2C,EAC9BvF,EAASyF,WAAWlH,EAAM0E,UAAUuC,GAAWjH,EAAM0E,UAAUL,IAC/D5C,EAAS9B,eAAewE,EAAQE,GAAM3V,IAAIsR,EAAM0E,UAAUL,IAC1D,IAAM8C,EAAMnH,EAAMoC,WAAW9c,KAAK8hB,aAAatU,GAC/C0Q,IAAwD,KAA7CjM,KAAKkM,IAAI,GAAI,IAAM7B,EAAMtK,EAAI,IAAMkM,IAC9C9B,EAAO6B,KAAK9B,GAAU4F,MAAMF,GAC5BnD,EAAItV,IAAIgT,EAAO5F,QAAQ6D,eAAe6D,KACtC/S,EAAOzL,SAASue,KAAKS,GACrB,IAAMO,EAASvE,EAAMoC,WAAW9c,KAAK+c,YAAYvP,EAAI,GAAKkN,EAAMoC,WAAW9c,KAAKkf,aAAe,GAAG7E,eAAe/C,GACjHnM,EAAOgU,OAAOF,OAAO9T,EAAOzL,SAAUuf,EAAQ7C,GAC9CjR,EAAO+J,WAAW8M,sBAAsB7W,EAAOgU,QAC/ChU,EAAO2Q,KAA0D,MAAjDtO,EAAI,IAAOA,EAAI,IAAO,IAAMsO,GAAO3Q,EAAO2Q,KAC1D3Q,EAAO8W,yBACP,IAAMC,EAAWxH,EAAMoC,WAAW9c,KAAK+c,YAAYvP,EAAI,EAAIkN,EAAMoC,WAAW9c,KAAKkf,aAAe,GAAG7E,eAAe/C,GAClH5L,EAAM3F,QAAQrG,SAASue,KAAKiE,GAC5BxW,EAAM3F,QAAQmP,WAAW8M,sBAAsB7W,EAAOgU,WAItD,wBAAOtV,IAAK6B,EAAZ,UACE,4BAAY2L,SAAU,IAAK3X,SAAU,CAAC,EAAG,KAAM,KAAMuZ,UAAW,EAAGjX,MAAM,cACzE,uBAAO6H,IAAK4X,EAAK/hB,SAAU,CAAC,EAAG,GAAI,IAAnC,SACGwH,O,MClCQ,IAAIyT,oBAAwB,EAAG,EAAG,I,IAC7CwH,GAAa,IAAIxH,QAAY,cAC7ByH,GAAU,IAAIzH,QAAY,WACV,IAAIA,oBAAwB,CAAE3Y,MAAOmgB,KACrC,IAAIxH,oBAAwB,CAAE3Y,MAAOogB,GAAStJ,KAAK,IACxD,IAAI6B,UACH,IAAIA,U,aCHhB5C,GAAW,IAAI4C,oBAAwB,EAAG,EAAG,IAC7CwH,GAAa,IAAIxH,QAAY,cAC7ByH,GAAU,IAAIzH,QAAY,WAC1B0H,GAAgB,IAAI1H,oBAAwB,CAAE3Y,MAAOmgB,KACrDG,GAAgB,IAAI3H,oBAAwB,CAAE3Y,MAAOogB,GAAStJ,KAAK,IACnEpZ,GAAW,IAAIib,UACfrS,GAAY,IAAIqS,UAEP,SAAS4H,KAGtB,MAA6BC,aAAQ,iCAA7BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,UACTjH,EAAWlB,IAAS,SAAC5V,GAAD,OAAWA,EAAM8W,YACnCY,EAAsBZ,EAAtBY,MAAOC,EAAeb,EAAfa,MAAOnU,EAAQsT,EAARtT,IAChBiT,EAASb,IAAS,SAAC5V,GAAD,OAAWA,EAAMyW,UACnCuH,EAAO9c,mBACP+c,EAAa/c,mBACbgd,EAAahd,mBACbid,EAAUjd,mBACVkc,EAAQlc,mBACRkd,EAASld,mBA6Bf,OA3BA4C,aAAS,WACPka,EAAK5c,QAAQrG,SAAS6X,EAAItF,KAAKK,IAA6B,GAAzB+J,EAAM2G,kBAAyB/Q,KAAK2F,GAAK,GAC5E+K,EAAK5c,QAAQ4R,SAASJ,GAAiD,IAA3C+E,EAAMvK,EAAI,IAAM4Q,EAAK5c,QAAQ4R,SAASJ,GAClEoL,EAAK5c,QAAQ4R,SAAS5F,GAAmD,KAA5CuK,EAAMtK,EAAI,KAAO2Q,EAAK5c,QAAQ4R,SAAS5F,GACpE4Q,EAAK5c,QAAQ4R,SAAS3F,GAAmD,KAA5CsK,EAAMvK,EAAI,KAAO4Q,EAAK5c,QAAQ4R,SAAS3F,GACpE2Q,EAAK5c,QAAQrG,SAASqS,GAAgD,IAA1CuK,EAAMvK,EAAI,GAAK4Q,EAAK5c,QAAQrG,SAASqS,GACjE4Q,EAAK5c,QAAQrG,SAASsS,GAAsD,IAAhD,IAAMsK,EAAMtK,EAAI,GAAK2Q,EAAK5c,QAAQrG,SAASsS,GACvE8Q,EAAQ/c,QAAQuR,MAAMvF,EAAI,EAAIE,KAAKK,IAA6B,IAAzB+J,EAAM2G,kBAC7CF,EAAQ/c,QAAQuR,MAAMtF,EAAI,EAAIC,KAAKK,IAA6B,IAAzB+J,EAAM2G,kBAC7C,IAAK,IAAI/Z,EAAI,EAAGA,EAAImS,EAAOhW,OAAQ6D,IAAK,CACxB2Z,EAAW7c,QAAQmB,SAAS+B,GACpCvJ,SAAS6X,GAAK,GAEtBsL,EAAW9c,QAAQkT,WAAyH,KAA1GmC,EAAOhW,QAAUwW,KAAKC,MAAQT,EAAOA,EAAOhW,OAAS,GAAK,IAAM,GAAK,GAAKyd,EAAW9c,QAAQkT,WAG/H0J,EAAK5c,QAAQkd,iBAAiBvjB,IAC9BijB,EAAK5c,QAAQmd,kBAAkB5a,IAC/BH,EAAIC,OAAO6V,KAAKve,IAChByI,EAAIG,UAAU2V,KAAK3V,GAAU6a,UAG7Bb,GAActgB,MAAQyZ,EAAS7S,KAAOuZ,GAAaC,GACnDL,EAAMhc,QAAQkP,SAAWwG,EAAS7S,KAClCma,EAAOhd,QAAQkP,UAAYwG,EAAS7S,QAIpC,wBAAOiB,IAAK8Y,EAAZ,UACE,wBAAOrL,MAAO,CAAC,GAAK,GAAK,IAAzB,UACE,uBAAOzN,IAAKkY,EAAOriB,SAAU,CAAC,EAAG,GAAI,KAAM0E,KAAK,UAUhD,wBAAOyF,IAAKkZ,EAAQrjB,SAAU,CAAC,EAAG,GAAI,KAAM0E,KAAK,SAAjD,UACE,sBAAM1E,SAAU,CAAC,EAAG,GAAI,GAAI0jB,YAAa,IAAMzO,SAAU2N,GAAzD,SACE,6BAAatJ,KAAM,CAAC,GAAI,EAAG,OAE7B,sBAAMtZ,SAAU,CAAC,GAAI,GAAI,GAAI0jB,YAAa,IAAMzO,SAAU2N,GAA1D,SACE,6BAAatJ,KAAM,CAAC,GAAI,EAAG,OAE7B,sBAAMtZ,SAAU,CAAC,GAAI,EAAG,GAAI0jB,YAAa,IAAMzO,SAAU2N,GAAzD,SACE,6BAAatJ,KAAM,CAAC,EAAG,GAAI,OAE7B,sBAAMtZ,SAAU,EAAE,GAAI,EAAG,GAAI0jB,YAAa,IAAMzO,SAAU2N,GAA1D,SACE,6BAAatJ,KAAM,CAAC,EAAG,GAAI,UAG/B,4BAAYnP,IAAKgZ,EAAYnjB,SAAU,CAAC,EAAG,GAAI,IAAK2X,SAAU,IAAK4B,UAAW,EAAGjX,MAAM,eACvF,uBAAO6H,IAAK+Y,EAAZ,SACGxH,EAAO8B,KAAI,SAAC1P,EAAGvE,GAAJ,OACV,kCACE,sBAAMvJ,SAAU,EAAE,IAAK,GAAI,IAAMqY,SAAUA,GAAUpD,SAAU0N,KAC/D,sBAAM3iB,SAAU,CAAC,IAAK,GAAI,IAAMqY,SAAUA,GAAUpD,SAAU0N,OAFpDpZ,QAMhB,wBAAO0O,SAAU,CAAC1F,KAAK2F,GAAK,EAAG3F,KAAK2F,GAAI,GAAxC,UACA,sBACAxT,KAAK,SACLif,YAAU,EACVC,eAAa,EACbvL,SAAU0K,EAAMc,OAAOxL,SACvBpD,SAAU8N,EAAMc,OAAO5O,WAEzB,sBACE0O,YAAU,EACVC,eAAa,EACbvL,SAAU0K,EAAMe,UAAUzL,SAC1BpD,SAAU8N,EAAMe,UAAU7O,WAE5B,sBACE0O,YAAU,EACVC,eAAa,EACbvL,SAAU0K,EAAMgB,UAAU1L,SAC1BpD,SAAU+N,EAAU,wBAItB,uBAAM7Y,IAAKiZ,EAASxL,MAAO,CAAC,EAAG,EAAG,IAAK5X,SAAU,CAAC,EAAG,EAAG,IAAxD,UACE,4CAA4BsZ,KAAM,CAAC,IAAK,KACxC,mCAAmBhX,MAAM,oBChHlB,SAAS0hB,KACtB,IAAM7Z,EAAMhE,mBACZ,EAA6B2c,aAAQ,+BAA7BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,UAGf,OAFAja,aAAU,kBAAKoB,EAAI9D,QAAQ4R,SAAS5F,GAAO,MAIzC,uBAAOlI,IAAKA,EAAKyN,MAAO,CAAC,IAAK,IAAK,KAAM5X,SAAU,CAAC,IAAM,EAAG,KAA7D,SAIE,sBACEqY,SAAU0K,EAAMkB,aAAa5L,SAC7BpD,SAAU+N,EAAUkB,eACpBjM,SAAU,CAAC1F,KAAK2F,GAAK,EAAG,EAAG,OCHpB,SAASiM,KAEtB,IAAMlD,EAAW9a,mBACjB,EAAyB0U,IAAU,SAAC5V,GAAD,OAAWA,EAAM8W,YAA5CK,EAAR,EAAQA,IAAR,EAAapc,SAOb,OAHA+I,aAAU,SAAC9D,EAAOuc,GAAR,OAAkBP,EAAS5a,QAAQ4R,SAAS3F,GAAM,OAK1D,wBACEnI,IAAK8W,EACLrJ,MAAO,CAAC,EAAG,EAAG,GACd5X,SAAU,CAAC,EAAG,EAAG,GAHnB,UAMA,cAACqZ,GAAD,IAEA,cAAC+G,GAAD,CAAQxI,MAAO,CAAC,GAAG,GAAG,IAAK5X,SAAU,EAAE,GAAG,EAAE,IAAKyL,OAAQ,CAAEzL,SAAU,EAAE,IAAM,EAAG,KAAOyhB,KAAM,IAAMC,IAAK,IAAQtF,SAEhH,cAAC4E,GAAD,IACA,cAAC,GAAD,IACA,cAACgD,GAAD,IACA,cAAClC,GAAD,UACE,cAAC,GAAD,SCxCS,SAASsC,KACtB,IAAMC,EAAgBle,mBACtB,EAA6B0U,IAAS,SAAC5V,GAAD,OAAWA,EAAM8W,YAA/CQ,EAAR,EAAQA,UAAWM,EAAnB,EAAmBA,MAcnB,OAZAzW,qBAAU,WACRmW,EAAU7V,SAAQ,SAAC4d,EAAU/a,GAC3B,IAAQiV,EAAkB8F,EAAlB9F,OAAQ5G,EAAU0M,EAAV1M,MAChBiF,EAAM7c,SAASue,KAAKC,GACpB3B,EAAMjF,MAAMtS,IAAIsS,EAAOA,EAAOA,GAC9BiF,EAAM5E,SAAS3S,IAAIiN,KAAKK,IAAIL,KAAKqG,UAAYrG,KAAK2F,GAAI3F,KAAKK,IAAIL,KAAKqG,UAAYrG,KAAK2F,GAAI3F,KAAKI,IAAIJ,KAAKqG,UAAYrG,KAAK2F,IACxH2E,EAAM0H,eACNF,EAAche,QAAQme,YAAYjb,EAAGsT,EAAM4C,WAE7C4E,EAAche,QAAQoe,eAAevP,aAAc,IAClD,IAGD,gCAAe/K,IAAKka,EAAe/K,KAAM,CAAC,KAAM,KAAMiD,EAAU7W,QAASgf,eAAe,EAAxF,UACE,8BAAcpL,KAAM,CAAC,EAAG,EAAG,KAC3B,sCAAsBhX,MAAM,eCH3B,SAASqiB,KAEE9J,IAAU,SAAC5V,GAAD,OAAWA,EAAM6X,WAA3C,IACA,EAAyBjC,IAAU,SAAC5V,GAAD,OAAWA,EAAM8W,YAA5CK,EAAR,EAAQA,IAAR,EAAapc,SAEb,SAAS4kB,IASP,OACE,cAAC,WAAD,CAAUC,SAAU,KAApB,SACE,cAACV,GAAD,MAKN,OACE,eAAChW,EAAD,CACArK,GAAI,CAAEghB,WAAW,GACjBrZ,OAAQ,CAAEzL,SAAU,EAAE,IAAM,EAAG,KAAOyhB,KAAM,IAAMC,IAAK,IAAQtF,OAF/D,cAeE,8BAAc7C,UAAW,MAGzB,cAACqL,EAAD,IAMA,cAACtN,GAAD,IAIA,cAAC8M,GAAD,IACA,cAAC,GAAD,OCnENW,IAASC,OAAO,cAACL,GAAD,IAASxlB,SAAS6O,eAAe,W","file":"static/js/main.21cb8766.chunk.js","sourcesContent":["class ARButton {\n  static createButton(renderer, sessionInit = {}) {\n    const button = document.createElement('button')\n\n    function showStartAR(/*device*/) {\n      if (sessionInit.domOverlay === undefined) {\n        const overlay = document.createElement('div')\n        overlay.style.display = 'none'\n        document.body.appendChild(overlay)\n\n        const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\n        svg.setAttribute('width', 38)\n        svg.setAttribute('height', 38)\n        svg.style.position = 'absolute'\n        svg.style.right = '20px'\n        svg.style.top = '20px'\n        svg.addEventListener('click', function () {\n          currentSession.end()\n        })\n        overlay.appendChild(svg)\n\n        const path = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n        path.setAttribute('d', 'M 12,12 L 28,28 M 28,12 12,28')\n        path.setAttribute('stroke', '#fff')\n        path.setAttribute('stroke-width', 2)\n        svg.appendChild(path)\n\n        if (sessionInit.optionalFeatures === undefined) {\n          sessionInit.optionalFeatures = []\n        }\n\n        sessionInit.optionalFeatures.push('dom-overlay')\n        sessionInit.domOverlay = { root: overlay }\n      }\n\n      //\n\n      let currentSession = null\n\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded)\n\n        renderer.xr.setReferenceSpaceType('local')\n\n        await renderer.xr.setSession(session)\n\n        button.textContent = 'STOP AR'\n        sessionInit.domOverlay.root.style.display = ''\n\n        currentSession = session\n      }\n\n      function onSessionEnded(/*event*/) {\n        currentSession.removeEventListener('end', onSessionEnded)\n\n        button.textContent = 'START AR'\n        sessionInit.domOverlay.root.style.display = 'none'\n\n        currentSession = null\n      }\n\n      //\n\n      button.style.display = ''\n\n      button.style.cursor = 'pointer'\n      button.style.left = 'calc(50% - 50px)'\n      button.style.width = '100px'\n\n      button.textContent = 'START AR'\n\n      button.onmouseenter = function () {\n        button.style.opacity = '1.0'\n      }\n\n      button.onmouseleave = function () {\n        button.style.opacity = '0.5'\n      }\n\n      button.onclick = function () {\n        if (currentSession === null) {\n          navigator.xr.requestSession('immersive-ar', sessionInit).then(onSessionStarted)\n        } else {\n          currentSession.end()\n        }\n      }\n    }\n\n    function disableButton() {\n      button.style.display = ''\n\n      button.style.cursor = 'auto'\n      button.style.left = 'calc(50% - 75px)'\n      button.style.width = '150px'\n\n      button.onmouseenter = null\n      button.onmouseleave = null\n\n      button.onclick = null\n    }\n\n    function showARNotSupported() {\n      disableButton()\n\n      button.textContent = 'AR NOT SUPPORTED'\n    }\n\n    function stylizeElement(element) {\n      element.style.position = 'absolute'\n      element.style.bottom = '20px'\n      element.style.padding = '12px 6px'\n      element.style.border = '1px solid #fff'\n      element.style.borderRadius = '4px'\n      element.style.background = 'rgba(0,0,0,0.1)'\n      element.style.color = '#fff'\n      element.style.font = 'normal 13px sans-serif'\n      element.style.textAlign = 'center'\n      element.style.opacity = '0.5'\n      element.style.outline = 'none'\n      element.style.zIndex = '999'\n    }\n\n    if ('xr' in navigator) {\n      button.id = 'ARButton'\n      button.style.display = 'none'\n\n      stylizeElement(button)\n\n      navigator.xr\n        .isSessionSupported('immersive-ar')\n        .then(function (supported) {\n          supported ? showStartAR() : showARNotSupported()\n        })\n        .catch(showARNotSupported)\n\n      return button\n    } else {\n      const message = document.createElement('a')\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:')\n        message.innerHTML = 'WEBXR NEEDS HTTPS' // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/'\n        message.innerHTML = 'WEBXR NOT AVAILABLE'\n      }\n\n      message.style.left = 'calc(50% - 90px)'\n      message.style.width = '180px'\n      message.style.textDecoration = 'none'\n\n      stylizeElement(message)\n\n      return message\n    }\n  }\n}\n\nexport { ARButton }\n","class VRButton {\n  static createButton(renderer, sessionInit = {}) {\n    const button = document.createElement('button')\n\n    function showEnterVR(/*device*/) {\n      let currentSession = null\n\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded)\n\n        await renderer.xr.setSession(session)\n        button.textContent = 'EXIT VR'\n\n        currentSession = session\n      }\n\n      function onSessionEnded(/*event*/) {\n        currentSession.removeEventListener('end', onSessionEnded)\n\n        button.textContent = 'ENTER VR'\n\n        currentSession = null\n      }\n\n      //\n\n      button.style.display = ''\n\n      button.style.cursor = 'pointer'\n      button.style.left = 'calc(50% - 50px)'\n      button.style.width = '100px'\n\n      button.textContent = 'ENTER VR'\n\n      button.onmouseenter = function () {\n        button.style.opacity = '1.0'\n      }\n\n      button.onmouseleave = function () {\n        button.style.opacity = '0.5'\n      }\n\n      button.onclick = function () {\n        if (currentSession === null) {\n          // WebXR's requestReferenceSpace only works if the corresponding feature\n          // was requested at session creation time. For simplicity, just ask for\n          // the interesting ones as optional features, but be aware that the\n          // requestReferenceSpace call will fail if it turns out to be unavailable.\n          // ('local' is always available for immersive sessions and doesn't need to\n          // be requested separately.)\n\n          const optionalFeatures = [sessionInit.optionalFeatures, 'local-floor', 'bounded-floor', 'hand-tracking'].flat().filter(Boolean)\n\n          navigator.xr.requestSession('immersive-vr', { ...sessionInit, optionalFeatures }).then(onSessionStarted)\n        } else {\n          currentSession.end()\n        }\n      }\n    }\n\n    function disableButton() {\n      button.style.display = ''\n\n      button.style.cursor = 'auto'\n      button.style.left = 'calc(50% - 75px)'\n      button.style.width = '150px'\n\n      button.onmouseenter = null\n      button.onmouseleave = null\n\n      button.onclick = null\n    }\n\n    function showWebXRNotFound() {\n      disableButton()\n\n      button.textContent = 'VR NOT SUPPORTED'\n    }\n\n    function stylizeElement(element) {\n      element.style.position = 'absolute'\n      element.style.bottom = '20px'\n      element.style.padding = '12px 6px'\n      element.style.border = '1px solid #fff'\n      element.style.borderRadius = '4px'\n      element.style.background = 'rgba(0,0,0,0.1)'\n      element.style.color = '#fff'\n      element.style.font = 'normal 13px sans-serif'\n      element.style.textAlign = 'center'\n      element.style.opacity = '0.5'\n      element.style.outline = 'none'\n      element.style.zIndex = '999'\n    }\n\n    if ('xr' in navigator) {\n      button.id = 'VRButton'\n      button.style.display = 'none'\n\n      stylizeElement(button)\n\n      navigator.xr.isSessionSupported('immersive-vr').then(function (supported) {\n        supported ? showEnterVR() : showWebXRNotFound()\n      })\n\n      return button\n    } else {\n      const message = document.createElement('a')\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:')\n        message.innerHTML = 'WEBXR NEEDS HTTPS' // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/'\n        message.innerHTML = 'WEBXR NOT AVAILABLE'\n      }\n\n      message.style.left = 'calc(50% - 90px)'\n      message.style.width = '180px'\n      message.style.textDecoration = 'none'\n\n      stylizeElement(message)\n\n      return message\n    }\n  }\n}\n\nexport { VRButton }\n","import { WebGLRenderer, Group, XRInputSource } from 'three'\n\nexport interface XRController {\n  inputSource: XRInputSource\n  /**\n   * Group with orientation that should be used to render virtual\n   * objects such that they appear to be held in the user’s hand\n   */\n  grip: Group\n  /** Group with orientation of the preferred pointing ray */\n  controller: Group\n  /** Group with hand */\n  hand: Group\n}\nexport const XRController = {\n  make: (id: number, gl: WebGLRenderer, onConnected: (c: XRController) => any, onDisconnected: (c: XRController) => any) => {\n    const controller = gl.xr.getController(id)\n    const grip = gl.xr.getControllerGrip(id)\n    const hand = gl.xr.getHand(id)\n\n    const xrController: XRController = {\n      inputSource: undefined as any,\n      grip,\n      controller,\n      hand\n    }\n    grip.userData.name = 'grip'\n    controller.userData.name = 'controller'\n    hand.userData.name = 'hand'\n\n    controller.addEventListener('connected', (event) => {\n      if (event.fake) {\n        return\n      }\n      xrController.inputSource = event.data\n      onConnected(xrController)\n    })\n\n    controller.addEventListener('disconnected', (_) => {\n      onDisconnected(xrController)\n    })\n  }\n}\n","import { Object3D } from 'three'\n\n/**\n * Store data associated with some objects in the scene\n *\n * For example storing event handlers:\n *\n * objectA:\n *   onClick: [handler, handler]\n * objectB:\n *   onHover: [handler]\n *   onBlur:  [handler]\n *\n */\nexport type ObjectsState<Key extends string, Value> = Map<Object3D, Record<Key, Value[]>>\nexport const ObjectsState = {\n  make: function <Key extends string, Value>() {\n    return new Map() as ObjectsState<Key, Value>\n  },\n  add: function <Key extends string, Value>(state: ObjectsState<Key, Value>, object: Object3D, key: Key, value: Value) {\n    if (!state.has(object)) {\n      state.set(object, { key: [value] } as any)\n    }\n    const entry = state.get(object) as Record<Key, Value[]>\n    if (!entry[key]) {\n      entry[key] = []\n    }\n    entry[key].push(value)\n  },\n  delete: function <Key extends string, Value>(state: ObjectsState<Key, Value>, object: Object3D, key: Key, value: Value) {\n    const entry = state.get(object)\n    if (!entry || !entry[key]) return\n    entry[key] = entry[key].filter((it) => it !== value)\n\n    if (entry[key].length === 0) {\n      delete entry[key]\n    }\n\n    // Remove entry if nothing left\n    if (Object.keys(entry).length === 0) {\n      state.delete(object)\n    }\n  },\n  has: function <Key extends string, Value>(state: ObjectsState<Key, Value>, object: Object3D, key: Key) {\n    const entry = state.get(object)\n    return !!(entry && entry[key])\n  },\n  get: function <Key extends string, Value>(state: ObjectsState<Key, Value>, object: Object3D, key: Key) {\n    const entry = state.get(object)\n    return entry && entry[key]\n  }\n}\n","import React from 'react'\nimport { XRController } from './XRController'\nimport { useXR } from './XR'\nimport { XRHandedness } from 'three'\n\nexport interface XREvent {\n  originalEvent: any\n  controller: XRController\n}\n\nexport type XREventType = 'select' | 'selectstart' | 'selectend' | 'squeeze' | 'squeezestart' | 'squeezeend'\n\nexport const useXREvent = (event: XREventType, handler: (e: XREvent) => any, { handedness }: { handedness?: XRHandedness } = {}) => {\n  const handlerRef = React.useRef<(e: XREvent) => any>(handler)\n  React.useEffect(() => {\n    handlerRef.current = handler\n  }, [handler])\n  const { controllers: allControllers } = useXR()\n\n  React.useEffect(() => {\n    const controllers = handedness ? allControllers.filter((it) => it.inputSource.handedness === handedness) : allControllers\n\n    const cleanups: any[] = []\n\n    controllers.forEach((it) => {\n      const listener = (e: any) => handlerRef.current({ originalEvent: e, controller: it })\n      it.controller.addEventListener(event, listener)\n      cleanups.push(() => it.controller.removeEventListener(event, listener))\n    })\n\n    return () => cleanups.forEach((fn) => fn())\n  }, [event, allControllers, handedness])\n}\n","import React, { useRef, useEffect, ReactNode, useMemo, useContext, forwardRef } from 'react'\nimport { useXR } from './XR'\nimport { Object3D, Group, Matrix4, Intersection, XRHandedness } from 'three'\nimport { useThree, useFrame } from '@react-three/fiber'\nimport { XRController } from './XRController'\nimport { ObjectsState } from './ObjectsState'\nimport mergeRefs from 'react-merge-refs'\nimport { useXREvent, XREvent } from './XREvents'\n\nexport interface XRInteractionEvent {\n  intersection?: Intersection\n  controller: XRController\n}\n\nexport type XRInteractionType =\n  | 'onHover'\n  | 'onBlur'\n  | 'onSelectStart'\n  | 'onSelectEnd'\n  | 'onSelect'\n  | 'onSqueeze'\n  | 'onSqueezeEnd'\n  | 'onSqueezeStart'\n\nexport type XRInteractionHandler = (event: XRInteractionEvent) => any\n\nconst warnAboutVRARCanvas = () => console.warn('You must provide a ARCanvas or VRCanvas as a wrapper to use interactions')\n\nexport const InteractionsContext = React.createContext<{\n  hoverState: Record<XRHandedness, Map<Object3D, Intersection>>\n  addInteraction: (object: Object3D, eventType: XRInteractionType, handler: XRInteractionHandler) => any\n  removeInteraction: (object: Object3D, eventType: XRInteractionType, handler: XRInteractionHandler) => any\n}>({\n  hoverState: {} as any,\n  addInteraction: warnAboutVRARCanvas,\n  removeInteraction: warnAboutVRARCanvas\n})\nexport function InteractionManager({ children }: { children: any }) {\n  const state = useThree()\n  const { controllers } = useXR()\n\n  const [hoverState] = React.useState<Record<XRHandedness, Map<Object3D, Intersection>>>(() => ({\n    left: new Map(),\n    right: new Map(),\n    none: new Map()\n  }))\n\n  const [interactions] = React.useState(() => ObjectsState.make<XRInteractionType, XRInteractionHandler>())\n\n  const addInteraction = React.useCallback(\n    (object: Object3D, eventType: XRInteractionType, handler: XRInteractionHandler) => {\n      ObjectsState.add(interactions, object, eventType, handler)\n    },\n    [interactions]\n  )\n\n  const removeInteraction = React.useCallback(\n    (object: Object3D, eventType: XRInteractionType, handler: XRInteractionHandler) => {\n      ObjectsState.delete(interactions, object, eventType, handler)\n    },\n    [interactions]\n  )\n\n  const intersect = React.useCallback(\n    (controller: Object3D) => {\n      const objects = Array.from(interactions.keys())\n      const tempMatrix = new Matrix4()\n      tempMatrix.identity().extractRotation(controller.matrixWorld)\n      state.raycaster.ray.origin.setFromMatrixPosition(controller.matrixWorld)\n      state.raycaster.ray.direction.set(0, 0, -1).applyMatrix4(tempMatrix)\n\n      return state.raycaster.intersectObjects(objects, true)\n    },\n    [interactions, state.raycaster]\n  )\n\n  // Trigger hover and blur events\n  useFrame(() => {\n    if (interactions.size === 0) {\n      return\n    }\n\n    controllers.forEach((it) => {\n      const { controller } = it\n      const handedness = it.inputSource.handedness\n      const hovering = hoverState[handedness]\n      const hits = new Set()\n      let intersections = intersect(controller)\n\n      if (state.raycaster.filter) {\n        // https://github.com/mrdoob/three.js/issues/16031\n        // Allow custom userland intersect sort order\n        intersections = state.raycaster.filter(intersections, state)\n      } else {\n        // Otherwise, filter to first hit\n        const hit = intersections.find((i) => i?.object)\n        if (hit) intersections = [hit]\n      }\n\n      intersections.forEach((intersection) => {\n        let eventObject: Object3D | null = intersection.object\n\n        while (eventObject) {\n          if (ObjectsState.has(interactions, eventObject, 'onHover') && !hovering.has(eventObject)) {\n            ObjectsState.get(interactions, eventObject, 'onHover')?.forEach((handler) => handler({ controller: it, intersection }))\n          }\n\n          hovering.set(eventObject, intersection)\n          hits.add(eventObject.id)\n          eventObject = eventObject.parent\n        }\n      })\n\n      // Trigger blur on all the object that were hovered in the previous frame\n      // but missed in this one\n      for (const eventObject of hovering.keys()) {\n        if (!hits.has(eventObject.id)) {\n          ObjectsState.get(interactions, eventObject, 'onBlur')?.forEach((handler) => handler({ controller: it }))\n          hovering.delete(eventObject)\n        }\n      }\n    })\n  })\n\n  const triggerEvent = (interaction: XRInteractionType) => (e: XREvent) => {\n    const hovering = hoverState[e.controller.inputSource.handedness]\n    for (const hovered of hovering.keys()) {\n      ObjectsState.get(interactions, hovered, interaction)?.forEach((handler) =>\n        handler({ controller: e.controller, intersection: hovering.get(hovered) })\n      )\n    }\n  }\n\n  useXREvent('select', triggerEvent('onSelect'))\n  useXREvent('selectstart', triggerEvent('onSelectStart'))\n  useXREvent('selectend', triggerEvent('onSelectEnd'))\n  useXREvent('squeeze', triggerEvent('onSqueeze'))\n  useXREvent('squeezeend', triggerEvent('onSqueezeEnd'))\n  useXREvent('squeezestart', triggerEvent('onSqueezeStart'))\n\n  const contextValue = useMemo(() => ({ addInteraction, removeInteraction, hoverState }), [addInteraction, removeInteraction, hoverState])\n\n  return <InteractionsContext.Provider value={contextValue}>{children}</InteractionsContext.Provider>\n}\n\nexport const useInteraction = (ref: any, type: XRInteractionType, handler?: XRInteractionHandler) => {\n  const { addInteraction, removeInteraction } = useContext(InteractionsContext)\n\n  const isPresent = handler !== undefined\n  const handlerRef = useRef(handler)\n  useEffect(() => {\n    handlerRef.current = handler\n  }, [handler])\n\n  useEffect(() => {\n    if (!isPresent) return\n\n    const handlerFn = (e: XRInteractionEvent) => {\n      handlerRef.current?.(e)\n    }\n\n    addInteraction(ref.current, type, handlerFn)\n    const maybeRef = ref.current\n\n    return () => removeInteraction(maybeRef, type, handlerFn)\n  }, [type, addInteraction, removeInteraction, isPresent, ref])\n}\n\nexport const Interactive = forwardRef(\n  (\n    props: {\n      children: ReactNode\n      onHover?: XRInteractionHandler\n      onBlur?: XRInteractionHandler\n      onSelectStart?: XRInteractionHandler\n      onSelectEnd?: XRInteractionHandler\n      onSelect?: XRInteractionHandler\n      onSqueezeStart?: XRInteractionHandler\n      onSqueezeEnd?: XRInteractionHandler\n      onSqueeze?: XRInteractionHandler\n    },\n    passedRef\n  ) => {\n    const ref = useRef<Object3D>()\n\n    useInteraction(ref, 'onHover', props.onHover)\n    useInteraction(ref, 'onBlur', props.onBlur)\n    useInteraction(ref, 'onSelectStart', props.onSelectStart)\n    useInteraction(ref, 'onSelectEnd', props.onSelectEnd)\n    useInteraction(ref, 'onSelect', props.onSelect)\n    useInteraction(ref, 'onSqueezeStart', props.onSqueezeStart)\n    useInteraction(ref, 'onSqueezeEnd', props.onSqueezeEnd)\n    useInteraction(ref, 'onSqueeze', props.onSqueeze)\n\n    return <group ref={mergeRefs([passedRef, ref])}>{props.children}</group>\n  }\n)\n\nexport function RayGrab({ children }: { children: ReactNode }) {\n  const grabbingController = useRef<Object3D>()\n  const groupRef = useRef<Group>()\n  const previousTransform = useRef<Matrix4 | undefined>(undefined)\n\n  useXREvent('selectend', (e) => {\n    if (e.controller.controller === grabbingController.current) {\n      grabbingController.current = undefined\n      previousTransform.current = undefined\n    }\n  })\n\n  useFrame(() => {\n    if (!grabbingController.current || !previousTransform.current || !groupRef.current) {\n      return\n    }\n\n    const controller = grabbingController.current\n    const group = groupRef.current\n\n    group.applyMatrix4(previousTransform.current)\n    group.applyMatrix4(controller.matrixWorld)\n    group.updateWorldMatrix(false, true)\n\n    previousTransform.current = controller.matrixWorld.clone().invert()\n  })\n\n  return (\n    <Interactive\n      ref={groupRef}\n      onSelectStart={(e) => {\n        grabbingController.current = e.controller.controller\n        previousTransform.current = e.controller.controller.matrixWorld.clone().invert()\n      }}\n    >\n      {children}\n    </Interactive>\n  )\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\n\nimport * as React from 'react'\nimport { Canvas, useFrame, useThree } from '@react-three/fiber'\nimport { ARButton } from './webxr/ARButton'\nimport { VRButton } from './webxr/VRButton'\nimport { XRController } from './XRController'\nimport { Props as ContainerProps } from '@react-three/fiber/dist/declarations/src/web/Canvas'\nimport { InteractionManager, InteractionsContext } from './Interactions'\nimport {\n  XRSessionInit,\n  Group,\n  Matrix4,\n  XRFrame,\n  XRHandedness,\n  XRHitTestResult,\n  XRHitTestSource,\n  XRInputSourceChangeEvent,\n  XRReferenceSpace\n} from 'three'\n\nexport interface XRContextValue {\n  controllers: XRController[]\n  isPresenting: boolean\n  player: Group\n  isHandTracking: boolean\n}\nconst XRContext = React.createContext<XRContextValue>({} as any)\n\nconst useControllers = (group: Group): XRController[] => {\n  const { gl } = useThree()\n  const [controllers, setControllers] = React.useState<XRController[]>([])\n\n  React.useEffect(() => {\n    const ids = [0, 1]\n    ids.forEach((id) => {\n      XRController.make(\n        id,\n        gl,\n        (controller) => {\n          group.add(controller.controller)\n          group.add(controller.grip)\n          group.add(controller.hand)\n          setControllers((it) => [...it, controller])\n        },\n        (controller) => {\n          group.remove(controller.controller)\n          group.remove(controller.grip)\n          group.remove(controller.hand)\n          setControllers((existing) => existing.filter((it) => it !== controller))\n        }\n      )\n    })\n  }, [gl, group])\n\n  return controllers\n}\n\nexport function useHitTest(hitTestCallback: (hitMatrix: Matrix4, hit: XRHitTestResult) => void) {\n  const { gl } = useThree()\n\n  const hitTestSource = React.useRef<XRHitTestSource | undefined>()\n  const hitTestSourceRequested = React.useRef(false)\n  const [hitMatrix] = React.useState(() => new Matrix4())\n\n  useFrame(() => {\n    if (!gl.xr.isPresenting) return\n\n    const session = gl.xr.getSession()\n    if (!session) return\n\n    if (!hitTestSourceRequested.current) {\n      session.requestReferenceSpace('viewer').then((referenceSpace: XRReferenceSpace) => {\n        session.requestHitTestSource({ space: referenceSpace }).then((source: XRHitTestSource) => {\n          hitTestSource.current = source\n        })\n      })\n      session.addEventListener(\n        'end',\n        () => {\n          hitTestSourceRequested.current = false\n          hitTestSource.current = undefined\n        },\n        { once: true }\n      )\n      hitTestSourceRequested.current = true\n    }\n\n    if (hitTestSource.current && gl.xr.isPresenting) {\n      const referenceSpace = gl.xr.getReferenceSpace()\n\n      if (referenceSpace) {\n        // This raf is unnecesary, we should get XRFrame from r3f but it's not implemented yet\n        session.requestAnimationFrame((time: DOMHighResTimeStamp, frame: XRFrame) => {\n          const hitTestResults = frame.getHitTestResults(hitTestSource.current as XRHitTestSource)\n          if (hitTestResults.length) {\n            const hit = hitTestResults[0]\n            const pose = hit.getPose(referenceSpace)\n\n            if (pose) {\n              hitMatrix.fromArray(pose.transform.matrix)\n              hitTestCallback(hitMatrix, hit)\n            }\n          }\n        })\n      }\n    }\n  })\n}\n\nexport function XR({ foveation = 0, children }: { foveation?: number; children: React.ReactNode }) {\n  const { gl, camera } = useThree()\n  const [isPresenting, setIsPresenting] = React.useState(() => gl.xr.isPresenting)\n  const [isHandTracking, setHandTracking] = React.useState(false)\n  const [player] = React.useState(() => new Group())\n  const controllers = useControllers(player)\n\n  React.useEffect(() => {\n    const xr = gl.xr as any\n\n    const handleSessionChange = () => setIsPresenting(xr.isPresenting)\n\n    xr.addEventListener('sessionstart', handleSessionChange)\n    xr.addEventListener('sessionend', handleSessionChange)\n\n    return () => {\n      xr.removeEventListener('sessionstart', handleSessionChange)\n      xr.removeEventListener('sessionend', handleSessionChange)\n    }\n  }, [gl])\n\n  React.useEffect(() => {\n    const xr = gl.xr as any\n\n    if (xr.setFoveation) {\n      xr.setFoveation(foveation)\n    }\n  }, [gl, foveation])\n\n  React.useEffect(() => {\n    const session = gl.xr.getSession()\n\n    const handleInputSourcesChange = (event: Event | XRInputSourceChangeEvent) =>\n      setHandTracking(Object.values((event as XRInputSourceChangeEvent).session.inputSources).some((source) => source.hand))\n\n    session?.addEventListener('inputsourceschange', handleInputSourcesChange)\n\n    setHandTracking(Object.values(session?.inputSources ?? []).some((source) => source.hand))\n\n    return () => {\n      session?.removeEventListener('inputsourceschange', handleInputSourcesChange)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isPresenting])\n\n  const value = React.useMemo(\n    () => ({ controllers, isPresenting, isHandTracking, player }),\n    [controllers, isPresenting, isHandTracking, player]\n  )\n\n  return (\n    <XRContext.Provider value={value}>\n      <primitive object={player} dispose={null}>\n        <primitive object={camera} dispose={null} />\n      </primitive>\n      {children}\n    </XRContext.Provider>\n  )\n}\n\nfunction XRCanvas({ foveation, children, ...rest }: ContainerProps & { foveation?: number }) {\n  return (\n    <Canvas vr {...rest}>\n      <XR foveation={foveation}>\n        <InteractionManager>{children}</InteractionManager>\n      </XR>\n    </Canvas>\n  )\n}\n\nconst createXRButton = (mode: 'AR' | 'VR', gl: any, sessionInit?: any) => {\n  const button = mode === 'AR' ? ARButton : VRButton\n  //const button2 = VRButton\n\n  const selector = mode === 'AR' ? '#ARButton' : '#VRButton'\n  if (document.querySelector(selector) === null) {\n    \n\n    const d = document.createElement('div')\n      d.setAttribute(\"style\", \" padding: 16px; z-index: 999; position:absolute; \") \n      d.setAttribute(\"class\", \"logo\")\n\n      const i = document.createElement('img')\n      i.src = \"https://psyche.asu.edu/wp-content/themes/psyche/static/img/nasa.svg\"\n      i.alt = \"NASA\"\n      i.setAttribute(\"style\", \"height:57px; width:auto; \") \n      const li = document.createElement('a')\n      li.setAttribute(\"href\", \"https://www.nasa.gov\")\n      li.appendChild(i)\n      \n\n      //<span class=\"divider\" style=\"left:auto;\"></span>\n      const s = document.createElement('span')\n      s.setAttribute(\"class\", \"divider logo\")\n      s.setAttribute(\"style\", \"left:auto; width:1px; height: 57px; display:inline-block;  white-space: nowrap; font-family: monospace; margin: 0 14px; background: white;\")\n\n      const i2 = document.createElement('img')\n      i2.src=\"https://psyche.asu.edu/wp-content/themes/psyche/static/img/psyche.svg\"\n      i2.alt = \"Psyche\"\n      i2.setAttribute(\"style\", \"height:57px; width: auto; \") \n      const li2 = document.createElement('a')\n      li2.setAttribute(\"href\", \"https://psyche.asu.edu\")\n      li2.appendChild(i2)\n\n      const h = document.createElement('h1')\n      h.textContent = \"Psyche Rollercoaster\"\n      h.setAttribute(\"style\", \"font-family: 'TradeGothic', 'Roboto', sans-serif; font-weight: bold; line-height:1.4; color:#a53f5b; font-size:xx-large; \")\n\n      const p = document.createElement('p')\n      p.textContent = \"An interactive experience tracking Psyche spacecraft. \\r\\n Wait till 3D models are loaded and moving on screen\"\n      p.setAttribute(\"style\", \"color:white; font-family: 'Helvetica', 'Arial', sans-serif; font-size:19px; font-weight:400; line-height: 1.65;\")\n\n      d.appendChild(li)\n      d.appendChild(s)\n      d.appendChild(li2)\n\n      const t = document.createElement('div')\n      t.setAttribute(\"style\", \" padding: 16px; z-index: 999; position:absolute; \") \n      t.setAttribute(\"id\", \"mytext\")\n      t.appendChild(h)\n      t.appendChild(p)\n\n      \n      //document.body.prepend(t)\n      //document.body.prepend(d)\n      const r = document.getElementById(\"root\")\n      r?.prepend(t)\n      r?.prepend(d)\n      \n\n    document.body.appendChild(button.createButton(gl, sessionInit))\n    //document.body.appendChild(button2.createButton(gl, sessionInit))\n    \n  }\n}\n\nexport type XRCanvasProps = ContainerProps & {\n  sessionInit?: XRSessionInit\n  /**\n   * Enables foveated rendering,\n   * 0 = no foveation = full resolution,\n   * 1 = maximum foveation = the edges render at lower resolution\n   */\n  foveation?: number\n}\n\nexport function VRCanvas({ children, sessionInit, onCreated, ...rest }: XRCanvasProps) {\n  return (\n    <XRCanvas\n      onCreated={(state) => {\n        onCreated?.(state)\n\n        createXRButton('VR', state.gl, sessionInit)\n      }}\n      {...rest}\n    >\n      {children}\n    </XRCanvas>\n  )\n}\n\nexport function ARCanvas({ onCreated, children, sessionInit, ...rest }: XRCanvasProps) {\n  return (\n    <XRCanvas\n      onCreated={(state) => {\n        onCreated?.(state)\n\n        createXRButton('AR', state.gl, sessionInit)\n      }}\n      {...rest}\n    >\n      {children}\n    </XRCanvas>\n  )\n}\n\nexport const useXR = () => {\n  const xrValue = React.useContext(XRContext)\n  const interactionsValue = React.useContext(InteractionsContext)\n\n  const contextValue = React.useMemo(() => ({ ...xrValue, ...interactionsValue }), [xrValue, interactionsValue])\n\n  return contextValue\n}\n\n/**\n * @deprecated R3F v8's built-in `useFrame` extends the `XRSession.requestAnimationFrame` signature:\n *\n * `useFrame((state, delta, xrFrame) => void)`\n *\n * @see https://mdn.io/XRFrame\n */\nexport const useXRFrame = (callback: (time: DOMHighResTimeStamp, xrFrame: XRFrame) => void) => {\n  const { gl } = useThree()\n  const requestRef = React.useRef<number>()\n  const previousTimeRef = React.useRef<number>()\n\n  const loop = React.useCallback(\n    (time: DOMHighResTimeStamp, xrFrame: XRFrame) => {\n      if (previousTimeRef.current !== undefined) {\n        callback(time, xrFrame)\n      }\n\n      previousTimeRef.current = time\n      requestRef.current = gl.xr.getSession()!.requestAnimationFrame(loop)\n    },\n    [gl.xr, callback]\n  )\n\n  React.useEffect(() => {\n    const handleSessionChange = () => {\n      if (!gl.xr?.isPresenting) return\n\n      if (requestRef.current) {\n        gl.xr.getSession()!.cancelAnimationFrame(requestRef.current)\n      }\n\n      requestRef.current = gl.xr.getSession()!.requestAnimationFrame(loop)\n    }\n    handleSessionChange()\n\n    gl.xr.addEventListener('sessionstart', handleSessionChange)\n    gl.xr.addEventListener('sessionend', handleSessionChange)\n\n    return () => {\n      gl.xr.removeEventListener('sessionstart', handleSessionChange)\n      gl.xr.removeEventListener('sessionend', handleSessionChange)\n\n      if (requestRef.current) {\n        gl.xr.getSession()!.cancelAnimationFrame(requestRef.current)\n      }\n    }\n  }, [loop, gl.xr])\n}\n\nexport const useController = (handedness: XRHandedness) => {\n  const { controllers } = useXR()\n  const controller = React.useMemo(() => controllers.find((it) => it.inputSource.handedness === handedness), [handedness, controllers])\n\n  return controller\n}\n","/**\n * @webxr-input-profiles/motion-controllers 1.0.0 https://github.com/immersive-web/webxr-input-profiles\n */\n\nconst MotionControllerConstants = {\n  Handedness: Object.freeze({\n    NONE: 'none',\n    LEFT: 'left',\n    RIGHT: 'right'\n  }),\n\n  ComponentState: Object.freeze({\n    DEFAULT: 'default',\n    TOUCHED: 'touched',\n    PRESSED: 'pressed'\n  }),\n\n  ComponentProperty: Object.freeze({\n    BUTTON: 'button',\n    X_AXIS: 'xAxis',\n    Y_AXIS: 'yAxis',\n    STATE: 'state'\n  }),\n\n  ComponentType: Object.freeze({\n    TRIGGER: 'trigger',\n    SQUEEZE: 'squeeze',\n    TOUCHPAD: 'touchpad',\n    THUMBSTICK: 'thumbstick',\n    BUTTON: 'button'\n  }),\n\n  ButtonTouchThreshold: 0.05,\n\n  AxisTouchThreshold: 0.1,\n\n  VisualResponseProperty: Object.freeze({\n    TRANSFORM: 'transform',\n    VISIBILITY: 'visibility'\n  })\n}\n\n/**\n * @description Static helper function to fetch a JSON file and turn it into a JS object\n * @param {string} path - Path to JSON file to be fetched\n */\nasync function fetchJsonFile(path) {\n  const response = await fetch(path)\n  if (!response.ok) {\n    throw new Error(response.statusText)\n  } else {\n    return response.json()\n  }\n}\n\nasync function fetchProfilesList(basePath) {\n  if (!basePath) {\n    throw new Error('No basePath supplied')\n  }\n\n  const profileListFileName = 'profilesList.json'\n  const profilesList = await fetchJsonFile(`${basePath}/${profileListFileName}`)\n  return profilesList\n}\n\nasync function fetchProfile(xrInputSource, basePath, defaultProfile = null, getAssetPath = true) {\n  if (!xrInputSource) {\n    throw new Error('No xrInputSource supplied')\n  }\n\n  if (!basePath) {\n    throw new Error('No basePath supplied')\n  }\n\n  // Get the list of profiles\n  const supportedProfilesList = await fetchProfilesList(basePath)\n\n  // Find the relative path to the first requested profile that is recognized\n  let match\n  xrInputSource.profiles.some((profileId) => {\n    const supportedProfile = supportedProfilesList[profileId]\n    if (supportedProfile) {\n      match = {\n        profileId,\n        profilePath: `${basePath}/${supportedProfile.path}`,\n        deprecated: !!supportedProfile.deprecated\n      }\n    }\n    return !!match\n  })\n\n  if (!match) {\n    if (!defaultProfile) {\n      throw new Error('No matching profile name found')\n    }\n\n    const supportedProfile = supportedProfilesList[defaultProfile]\n    if (!supportedProfile) {\n      throw new Error(`No matching profile name found and default profile \"${defaultProfile}\" missing.`)\n    }\n\n    match = {\n      profileId: defaultProfile,\n      profilePath: `${basePath}/${supportedProfile.path}`,\n      deprecated: !!supportedProfile.deprecated\n    }\n  }\n\n  const profile = await fetchJsonFile(match.profilePath)\n\n  let assetPath\n  if (getAssetPath) {\n    let layout\n    if (xrInputSource.handedness === 'any') {\n      layout = profile.layouts[Object.keys(profile.layouts)[0]]\n    } else {\n      layout = profile.layouts[xrInputSource.handedness]\n    }\n    if (!layout) {\n      throw new Error(`No matching handedness, ${xrInputSource.handedness}, in profile ${match.profileId}`)\n    }\n\n    if (layout.assetPath) {\n      assetPath = match.profilePath.replace('profile.json', layout.assetPath)\n    }\n  }\n\n  return { profile, assetPath }\n}\n\n/** @constant {Object} */\nconst defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: MotionControllerConstants.ComponentState.DEFAULT\n}\n\n/**\n * @description Converts an X, Y coordinate from the range -1 to 1 (as reported by the Gamepad\n * API) to the range 0 to 1 (for interpolation). Also caps the X, Y values to be bounded within\n * a circle. This ensures that thumbsticks are not animated outside the bounds of their physical\n * range of motion and touchpads do not report touch locations off their physical bounds.\n * @param {number} x The original x coordinate in the range -1 to 1\n * @param {number} y The original y coordinate in the range -1 to 1\n */\nfunction normalizeAxes(x = 0, y = 0) {\n  let xAxis = x\n  let yAxis = y\n\n  // Determine if the point is outside the bounds of the circle\n  // and, if so, place it on the edge of the circle\n  const hypotenuse = Math.sqrt(x * x + y * y)\n  if (hypotenuse > 1) {\n    const theta = Math.atan2(y, x)\n    xAxis = Math.cos(theta)\n    yAxis = Math.sin(theta)\n  }\n\n  // Scale and move the circle so values are in the interpolation range.  The circle's origin moves\n  // from (0, 0) to (0.5, 0.5). The circle's radius scales from 1 to be 0.5.\n  const result = {\n    normalizedXAxis: xAxis * 0.5 + 0.5,\n    normalizedYAxis: yAxis * 0.5 + 0.5\n  }\n  return result\n}\n\n/**\n * Contains the description of how the 3D model should visually respond to a specific user input.\n * This is accomplished by initializing the object with the name of a node in the 3D model and\n * property that need to be modified in response to user input, the name of the nodes representing\n * the allowable range of motion, and the name of the input which triggers the change. In response\n * to the named input changing, this object computes the appropriate weighting to use for\n * interpolating between the range of motion nodes.\n */\nclass VisualResponse {\n  constructor(visualResponseDescription) {\n    this.componentProperty = visualResponseDescription.componentProperty\n    this.states = visualResponseDescription.states\n    this.valueNodeName = visualResponseDescription.valueNodeName\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty\n\n    if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName\n      this.maxNodeName = visualResponseDescription.maxNodeName\n    }\n\n    // Initializes the response's current value based on default data\n    this.value = 0\n    this.updateFromComponent(defaultComponentValues)\n  }\n\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number} xAxis - The reported X axis value of the component\n   * @param {number} yAxis - The reported Y axis value of the component\n   * @param {number} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n  updateFromComponent({ xAxis, yAxis, button, state }) {\n    const { normalizedXAxis, normalizedYAxis } = normalizeAxes(xAxis, yAxis)\n    switch (this.componentProperty) {\n      case MotionControllerConstants.ComponentProperty.X_AXIS:\n        this.value = this.states.includes(state) ? normalizedXAxis : 0.5\n        break\n      case MotionControllerConstants.ComponentProperty.Y_AXIS:\n        this.value = this.states.includes(state) ? normalizedYAxis : 0.5\n        break\n      case MotionControllerConstants.ComponentProperty.BUTTON:\n        this.value = this.states.includes(state) ? button : 0\n        break\n      case MotionControllerConstants.ComponentProperty.STATE:\n        if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n          this.value = this.states.includes(state)\n        } else {\n          this.value = this.states.includes(state) ? 1.0 : 0.0\n        }\n        break\n      default:\n        throw new Error(`Unexpected visualResponse componentProperty ${this.componentProperty}`)\n    }\n  }\n}\n\nclass Component {\n  /**\n   * @param {Object} componentId - Id of the component\n   * @param {Object} componentDescription - Description of the component to be created\n   */\n  constructor(componentId, componentDescription) {\n    if (\n      !componentId ||\n      !componentDescription ||\n      !componentDescription.visualResponses ||\n      !componentDescription.gamepadIndices ||\n      Object.keys(componentDescription.gamepadIndices).length === 0\n    ) {\n      throw new Error('Invalid arguments supplied')\n    }\n\n    this.id = componentId\n    this.type = componentDescription.type\n    this.rootNodeName = componentDescription.rootNodeName\n    this.touchPointNodeName = componentDescription.touchPointNodeName\n\n    // Build all the visual responses for this component\n    this.visualResponses = {}\n    Object.keys(componentDescription.visualResponses).forEach((responseName) => {\n      const visualResponse = new VisualResponse(componentDescription.visualResponses[responseName])\n      this.visualResponses[responseName] = visualResponse\n    })\n\n    // Set default values\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices)\n\n    this.values = {\n      state: MotionControllerConstants.ComponentState.DEFAULT,\n      button: this.gamepadIndices.button !== undefined ? 0 : undefined,\n      xAxis: this.gamepadIndices.xAxis !== undefined ? 0 : undefined,\n      yAxis: this.gamepadIndices.yAxis !== undefined ? 0 : undefined\n    }\n  }\n\n  get data() {\n    const data = { id: this.id, ...this.values }\n    return data\n  }\n\n  /**\n   * @description Poll for updated data based on current gamepad state\n   * @param {Object} gamepad - The gamepad object from which the component data should be polled\n   */\n  updateFromGamepad(gamepad) {\n    // Set the state to default before processing other data sources\n    this.values.state = MotionControllerConstants.ComponentState.DEFAULT\n\n    // Get and normalize button\n    if (this.gamepadIndices.button !== undefined && gamepad.buttons.length > this.gamepadIndices.button) {\n      const gamepadButton = gamepad.buttons[this.gamepadIndices.button]\n      this.values.button = gamepadButton.value\n      this.values.button = this.values.button < 0 ? 0 : this.values.button\n      this.values.button = this.values.button > 1 ? 1 : this.values.button\n\n      // Set the state based on the button\n      if (gamepadButton.pressed || this.values.button === 1) {\n        this.values.state = MotionControllerConstants.ComponentState.PRESSED\n      } else if (gamepadButton.touched || this.values.button > MotionControllerConstants.ButtonTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED\n      }\n    }\n\n    // Get and normalize x axis value\n    if (this.gamepadIndices.xAxis !== undefined && gamepad.axes.length > this.gamepadIndices.xAxis) {\n      this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis]\n      this.values.xAxis = this.values.xAxis < -1 ? -1 : this.values.xAxis\n      this.values.xAxis = this.values.xAxis > 1 ? 1 : this.values.xAxis\n\n      // If the state is still default, check if the xAxis makes it touched\n      if (\n        this.values.state === MotionControllerConstants.ComponentState.DEFAULT &&\n        Math.abs(this.values.xAxis) > MotionControllerConstants.AxisTouchThreshold\n      ) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED\n      }\n    }\n\n    // Get and normalize Y axis value\n    if (this.gamepadIndices.yAxis !== undefined && gamepad.axes.length > this.gamepadIndices.yAxis) {\n      this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis]\n      this.values.yAxis = this.values.yAxis < -1 ? -1 : this.values.yAxis\n      this.values.yAxis = this.values.yAxis > 1 ? 1 : this.values.yAxis\n\n      // If the state is still default, check if the yAxis makes it touched\n      if (\n        this.values.state === MotionControllerConstants.ComponentState.DEFAULT &&\n        Math.abs(this.values.yAxis) > MotionControllerConstants.AxisTouchThreshold\n      ) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED\n      }\n    }\n\n    // Update the visual response weights based on the current component data\n    Object.values(this.visualResponses).forEach((visualResponse) => {\n      visualResponse.updateFromComponent(this.values)\n    })\n  }\n}\n\n/**\n * @description Builds a motion controller with components and visual responses based on the\n * supplied profile description. Data is polled from the xrInputSource's gamepad.\n * @author Nell Waliczek / https://github.com/NellWaliczek\n */\nclass MotionController {\n  /**\n   * @param {Object} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Object} profile - The best matched profile description for the supplied xrInputSource\n   * @param {Object} assetUrl\n   */\n  constructor(xrInputSource, profile, assetUrl) {\n    if (!xrInputSource) {\n      throw new Error('No xrInputSource supplied')\n    }\n\n    if (!profile) {\n      throw new Error('No profile supplied')\n    }\n\n    this.xrInputSource = xrInputSource\n    this.assetUrl = assetUrl\n    this.id = profile.profileId\n\n    // Build child components as described in the profile description\n    this.layoutDescription = profile.layouts[xrInputSource.handedness]\n    this.components = {}\n    Object.keys(this.layoutDescription.components).forEach((componentId) => {\n      const componentDescription = this.layoutDescription.components[componentId]\n      this.components[componentId] = new Component(componentId, componentDescription)\n    })\n\n    // Initialize components based on current gamepad state\n    this.updateFromGamepad()\n  }\n\n  get gripSpace() {\n    return this.xrInputSource.gripSpace\n  }\n\n  get targetRaySpace() {\n    return this.xrInputSource.targetRaySpace\n  }\n\n  /**\n   * @description Returns a subset of component data for simplified debugging\n   */\n  get data() {\n    const data = []\n    Object.values(this.components).forEach((component) => {\n      data.push(component.data)\n    })\n    return data\n  }\n\n  /**\n   * @description Poll for updated data based on current gamepad state\n   */\n  updateFromGamepad() {\n    Object.values(this.components).forEach((component) => {\n      component.updateFromGamepad(this.xrInputSource.gamepad)\n    })\n  }\n}\n\nexport { MotionControllerConstants, MotionController, fetchProfile, fetchProfilesList }\n","import { Mesh, MeshBasicMaterial, Object3D, SphereGeometry } from 'three'\nimport { MotionControllerConstants, fetchProfile, MotionController } from './XRMotionControllers'\nimport { GLTFLoader } from 'three-stdlib'\n\nconst DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles'\nconst DEFAULT_PROFILE = 'generic-trigger'\n\nclass XRControllerModel extends Object3D {\n  constructor() {\n    super()\n\n    this.motionController = null\n    this.envMap = null\n  }\n\n  setEnvironmentMap(envMap) {\n    if (this.envMap == envMap) {\n      return this\n    }\n\n    this.envMap = envMap\n    this.traverse((child) => {\n      if (child.isMesh) {\n        child.material.envMap = this.envMap\n        child.material.needsUpdate = true\n      }\n    })\n\n    return this\n  }\n\n  /**\n   * Polls data from the XRInputSource and updates the model's components to match\n   * the real world data\n   */\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force)\n\n    if (!this.motionController) return\n\n    // Cause the MotionController to poll the Gamepad for data\n    this.motionController.updateFromGamepad()\n\n    // Update the 3D model to reflect the button, thumbstick, and touchpad state\n    Object.values(this.motionController.components).forEach((component) => {\n      // Update node data based on the visual responses' current states\n      Object.values(component.visualResponses).forEach((visualResponse) => {\n        const { valueNode, minNode, maxNode, value, valueNodeProperty } = visualResponse\n\n        // Skip if the visual response node is not found. No error is needed,\n        // because it will have been reported at load time.\n        if (!valueNode) return\n\n        // Calculate the new properties based on the weight supplied\n        if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n          valueNode.visible = value\n        } else if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n          valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value)\n\n          valueNode.position.lerpVectors(minNode.position, maxNode.position, value)\n        }\n      })\n    })\n  }\n}\n\n/**\n * Walks the model's tree to find the nodes needed to animate the components and\n * saves them to the motionContoller components for use in the frame loop. When\n * touchpads are found, attaches a touch dot to them.\n */\nfunction findNodes(motionController, scene) {\n  // Loop through the components and find the nodes needed for each components' visual responses\n  Object.values(motionController.components).forEach((component) => {\n    const { type, touchPointNodeName, visualResponses } = component\n\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName)\n      if (component.touchPointNode) {\n        // Attach a touch dot to the touchpad.\n        const sphereGeometry = new SphereGeometry(0.001)\n        const material = new MeshBasicMaterial({ color: 0x0000ff })\n        const sphere = new Mesh(sphereGeometry, material)\n        component.touchPointNode.add(sphere)\n      } else {\n        console.warn(`Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}`)\n      }\n    }\n\n    // Loop through all the visual responses to be applied to this component\n    Object.values(visualResponses).forEach((visualResponse) => {\n      const { valueNodeName, minNodeName, maxNodeName, valueNodeProperty } = visualResponse\n\n      // If animating a transform, find the two nodes to be interpolated between.\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName)\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName)\n\n        // If the extents cannot be found, skip this animation\n        if (!visualResponse.minNode) {\n          console.warn(`Could not find ${minNodeName} in the model`)\n          return\n        }\n\n        if (!visualResponse.maxNode) {\n          console.warn(`Could not find ${maxNodeName} in the model`)\n          return\n        }\n      }\n\n      // If the target node cannot be found, skip this animation\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName)\n      if (!visualResponse.valueNode) {\n        console.warn(`Could not find ${valueNodeName} in the model`)\n      }\n    })\n  })\n}\n\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  // Find the nodes needed for animation and cache them on the motionController.\n  findNodes(controllerModel.motionController, scene)\n\n  // Apply any environment map that the mesh already has set.\n  if (controllerModel.envMap) {\n    scene.traverse((child) => {\n      if (child.isMesh) {\n        child.material.envMap = controllerModel.envMap\n        child.material.needsUpdate = true\n      }\n    })\n  }\n\n  // Add the glTF scene to the controllerModel.\n  controllerModel.add(scene)\n}\n\nclass XRControllerModelFactory {\n  constructor(gltfLoader = null) {\n    this.gltfLoader = gltfLoader\n    this.path = DEFAULT_PROFILES_PATH\n    this._assetCache = {}\n\n    // If a GLTFLoader wasn't supplied to the constructor create a new one.\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader()\n    }\n  }\n\n  createControllerModel(controller) {\n    const controllerModel = new XRControllerModel()\n    let scene = null\n\n    controller.addEventListener('connected', (event) => {\n      const xrInputSource = event.data\n\n      if (xrInputSource.targetRayMode !== 'tracked-pointer' || !xrInputSource.gamepad) return\n\n      fetchProfile(xrInputSource, this.path, DEFAULT_PROFILE)\n        .then(({ profile, assetPath }) => {\n          controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath)\n\n          const cachedAsset = this._assetCache[controllerModel.motionController.assetUrl]\n          if (cachedAsset) {\n            scene = cachedAsset.scene.clone()\n\n            addAssetSceneToControllerModel(controllerModel, scene)\n          } else {\n            if (!this.gltfLoader) {\n              throw new Error('GLTFLoader not set.')\n            }\n\n            this.gltfLoader.setPath('')\n            this.gltfLoader.load(\n              controllerModel.motionController.assetUrl,\n              (asset) => {\n                this._assetCache[controllerModel.motionController.assetUrl] = asset\n\n                scene = asset.scene.clone()\n\n                addAssetSceneToControllerModel(controllerModel, scene)\n              },\n              null,\n              () => {\n                throw new Error(`Asset ${controllerModel.motionController.assetUrl} missing or malformed.`)\n              }\n            )\n          }\n        })\n        .catch((err) => {\n          console.warn(err)\n        })\n    })\n\n    controller.addEventListener('disconnected', () => {\n      controllerModel.motionController = null\n      controllerModel.remove(scene)\n      scene = null\n    })\n\n    return controllerModel\n  }\n}\n\nexport { XRControllerModelFactory }\n","import { useXR } from './XR'\nimport React, { useEffect } from 'react'\nimport { Color, Mesh, MeshBasicMaterial, BoxBufferGeometry, MeshBasicMaterialParameters, Group, Object3D, Intersection } from 'three'\nimport { useFrame, useThree } from '@react-three/fiber'\nimport { XRControllerModelFactory } from './webxr/XRControllerModelFactory'\n\nconst modelFactory = new XRControllerModelFactory()\nconst modelCache = new WeakMap<Group, any>()\nexport function DefaultXRControllers({ rayMaterial = {} }: { rayMaterial?: MeshBasicMaterialParameters }) {\n  const { scene } = useThree()\n  const { controllers, hoverState } = useXR()\n  const [rays] = React.useState(new Map<number, Mesh>())\n\n  // Show ray line when hovering objects\n  useFrame(() => {\n    controllers.forEach((it) => {\n      const ray = rays.get(it.controller.id)\n      if (!ray) return\n\n      const intersection: Intersection = hoverState[it.inputSource.handedness].values().next().value\n      if (!intersection || it.inputSource.handedness === 'none') {\n        ray.visible = false\n        return\n      }\n\n      const rayLength = intersection.distance\n\n      // Tiny offset to clip ray on AR devices\n      // that don't have handedness set to 'none'\n      const offset = -0.01\n      ray.visible = true\n      ray.scale.y = rayLength + offset\n      ray.position.z = -rayLength / 2 - offset\n    })\n  })\n\n  useEffect(() => {\n    const cleanups: any[] = []\n\n    controllers.forEach(({ controller, grip, inputSource }) => {\n      // Attach 3D model of the controller\n      let model: Object3D\n      if (modelCache.has(controller)) {\n        model = modelCache.get(controller)\n      } else {\n        model = modelFactory.createControllerModel(controller) as any\n        controller.dispatchEvent({ type: 'connected', data: inputSource, fake: true })\n        modelCache.set(controller, model)\n      }\n      grip.add(model)\n\n      // Add Ray line (used for hovering)\n      const ray = new Mesh()\n      ray.rotation.set(Math.PI / 2, 0, 0)\n      ray.material = new MeshBasicMaterial({ color: new Color(0xffffff), opacity: 0.8, transparent: true, ...rayMaterial })\n      ray.geometry = new BoxBufferGeometry(0.002, 1, 0.002)\n\n      rays.set(controller.id, ray)\n      controller.add(ray)\n\n      cleanups.push(() => {\n        grip.remove(model)\n        controller.remove(ray)\n        rays.delete(controller.id)\n      })\n    })\n\n    return () => {\n      cleanups.forEach((fn) => fn())\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [controllers, scene, rays, JSON.stringify(rayMaterial)])\n\n  return null\n}\n","import React, { useMemo } from 'react'\n\nexport default function Stars({ count = 2000 }) {\n  const positions = useMemo(() => {\n    let positions = []\n    for (let i = 0; i < count; i++) {\n      const r = 4000\n      const theta = 2 * Math.PI * Math.random()\n      const phi = Math.acos(2 * Math.random() - 1)\n      const x = r * Math.cos(theta) * Math.sin(phi) + (-2000 + Math.random() * 4000)\n      const y = r * Math.sin(theta) * Math.sin(phi) + (-2000 + Math.random() * 4000)\n      const z = r * Math.cos(phi) + (-1000 + Math.random() * 2000)\n      positions.push(x)\n      positions.push(y)\n      positions.push(z)\n    }\n    return new Float32Array(positions)\n  }, [count])\n  return (\n    <points>\n      <bufferGeometry>\n        <bufferAttribute attachObject={['attributes', 'position']} count={positions.length / 3} array={positions} itemSize={3} />\n      </bufferGeometry>\n      <pointsMaterial size={15} sizeAttenuation color=\"white\" fog={false} />\n    </points>\n  )\n}\n","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useFrame, useLoader } from '@react-three/fiber'\nimport {TransformControls, OrbitControls, Stage} from '@react-three/drei'\n\n\nexport default function Sun() {\n  const ref = useRef()\n\n  useFrame( ()=> ref.current.rotation.y  =  ref.current.rotation.y + 0.01 )\n \n  return (\n\n    <group ref={ref} scale={[100, 100, 100]} position={[0, 0, 0]}>\n\n      {/* the sun */}\n      <mesh position={[0, 0, 0]}>\n        <sphereGeometry args={[4, 32, 32]} />\n        <meshBasicMaterial color=\"#FFFF99\" fog={false} />\n        <pointLight distance={6100} intensity={10} color=\"white\" />1\n      </mesh>\n\n    </group>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/laser.373d639d.mp3\";","export default __webpack_public_path__ + \"static/media/engine.75bbe12e.mp3\";","export default __webpack_public_path__ + \"static/media/engine2.87c3c40a.mp3\";","export default __webpack_public_path__ + \"static/media/bg.c6b2b728.mp3\";","export default __webpack_public_path__ + \"static/media/warp.1f9bec85.mp3\";","export default __webpack_public_path__ + \"static/media/click.db461987.mp3\";","export default __webpack_public_path__ + \"static/media/explosion.615cfd43.mp3\";","import zapAudio from './laser.mp3'\nimport engineAudio from './engine.mp3'\nimport engine2Audio from './engine2.mp3'\nimport bgAudio from './bg.mp3'\nimport warpAudio from './warp.mp3'\nimport clickAudio from './click.mp3'\nimport explosionAudio from './explosion.mp3'\n\nconst mp3 = { explosion: explosionAudio }\n\nconst zap = new Audio(zapAudio)\nconst engine = new Audio(engineAudio)\nconst engine2 = new Audio(engine2Audio)\nconst bg = new Audio(bgAudio)\nconst warp = new Audio(warpAudio)\nconst click = new Audio(clickAudio)\nconst explosion = new Audio(explosionAudio)\n\nexport { zap, engine, engine2, bg, warp, click, explosion, mp3 }\n","import * as THREE from 'three'\nimport { Curves } from 'three/examples/jsm/curves/CurveExtras'\nimport { addEffect } from '@react-three/fiber'\nimport create from 'zustand'\nimport * as audio from './audio'\nimport { Curve, Texture, Vector3 } from 'three'\n\nclass HelixCurve extends Curve {\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst a = 80; // radius\n\t\tconst b = 150; // height\n\n\t\tconst t2 = 2 * Math.PI * t * b / 500;\n\n\t\tconst z = Math.cos( t2 ) * a;\n\t\tconst x = Math.sin( t2 ) * a;\n\t\tconst y = 0;\n\n\t\treturn point.set( x, y, z );\n\n\t}\n\n}\n\nclass Stationary extends Curve {\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst a = 80; // radius\n\t\tconst b = 150; // height\n\n\t\tconst t2 = 2 * Math.PI * t * b / 500;\n\n\t\tconst z = a;\n\t\tconst x = a;\n\t\tconst y = 1;\n\n\t\treturn point.set( x, y, z );\n\n\t}\n\n}\n\n\nclass GrannyKnot extends Curve {\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tt = 2 * Math.PI * t;\n\n\t\tconst x = - 0.22 * Math.cos( t ) - 1.28 * Math.sin( t ) - 0.44 * Math.cos( 3 * t ) - 0.78 * Math.sin( 3 * t );\n\t\tconst y = - 0.1 * Math.cos( 2 * t ) - 0.27 * Math.sin( 2 * t ) + 0.38 * Math.cos( 4 * t ) + 0.46 * Math.sin( 4 * t );\n\t\tconst z = 0.7 * Math.cos( 3 * t ) - 0.4 * Math.sin( 3 * t );\n\n\t\treturn point.set( x, y, z ).multiplyScalar( 20 );\n\n\t}\n\n}\n\n\nlet guid = 1\n\nconst useStore = create((set, get) => {\n  let spline = new GrannyKnot()\n  let track = new THREE.TubeBufferGeometry(spline, 250, 0.2, 10, true)\n  let spline2 = new HelixCurve()\n  let spline3 = new Stationary()\n  let track3 = new THREE.TubeBufferGeometry(spline3, 250, 0.2, 10, true)\n  let track2 = new THREE.TubeBufferGeometry(spline2, 250, 0.2, 10, true)\n  let cancelLaserTO = undefined\n  let cancelExplosionTO = undefined\n  const box = new THREE.Box3()\n\n  return {\n    sound: false,\n    camera: undefined,\n    points: 0,\n    health: 100,\n    lasers: [],\n    explosions: [],\n    rocks: randomData(100, track, 150, 8, () => 1 + Math.random() * 2.5),\n    enemies: randomData(10, track, 20, 15, 1),\n\n    mutation: {\n      insertion: false,\n      t: 0,\n      position: new THREE.Vector3(),\n      startTime: Date.now(),\n\n      track,\n      scale: 15,\n      fov: 70,\n      hits: false,\n      rings: randomRings(30, track),\n      particles: randomData(1500, track, 100, 1, () => 0.5 + Math.random() * 0.8),\n      looptime: 40 * 1000,\n      binormal: new THREE.Vector3(),\n      normal: new THREE.Vector3(),\n      clock: new THREE.Clock(false),\n      mouse: new THREE.Vector2(-250, 50),\n\n      // Re-usable objects\n      dummy: new THREE.Object3D(),\n      ray: new THREE.Ray(),\n      box: new THREE.Box3()\n    },\n\n    actions: {\n      init(camera) {\n        const { mutation, actions } = get()\n\n        set({ camera })\n        mutation.clock.start()\n        actions.toggleSound(get().sound)\n\n        addEffect(() => {\n          const { rocks, enemies } = get()\n\n          const time = Date.now()\n          const t = (mutation.t = ((time - mutation.startTime) % mutation.looptime) / mutation.looptime)\n          mutation.position = track.parameters.path.getPointAt(t)\n          mutation.position.multiplyScalar(mutation.scale)\n\n          // test for wormhole/warp\n          let warping = false\n          if (t > 0.3 && t < 0.4) {\n            if (!warping) {\n              warping = true\n              //playAudio(audio.warp)\n            }\n          } else if (t > 0.5) {\n            warping = false\n          }\n\n\n\n          // test for hits\n          //const r = rocks.filter(actions.test)\n          //const e = enemies.filter(actions.test)\n          //const a = r.concat(e)\n          const previous = mutation.hits\n          //mutation.hits = a.length\n          //if (previous === 0 && mutation.hits) playAudio(audio.click)\n          const lasers = get().lasers\n          if (mutation.hits && lasers.length && time - lasers[lasers.length - 1] < 100) {\n            const updates = a.map((data) => ({ time: Date.now(), ...data }))\n            set((state) => ({ explosions: [...state.explosions, ...updates] }))\n            clearTimeout(cancelExplosionTO)\n            cancelExplosionTO = setTimeout(() => set((state) => ({ explosions: state.explosions.filter(({ time }) => Date.now() - time <= 1000) })), 1000)\n            set((state) => ({\n              points: state.points + r.length * 100 + e.length * 200,\n              rocks: state.rocks.filter((rock) => !r.find((r) => r.guid === rock.guid)),\n              enemies: state.enemies.filter((enemy) => !e.find((e) => e.guid === enemy.guid))\n            }))\n          }\n          //if (a.some(data => data.distance < 15)) set(state => ({ health: state.health - 1 }))\n        })\n      },\n      shoot() {\n        set((state) => ({ lasers: [...state.lasers, Date.now()] }))\n        clearTimeout(cancelLaserTO)\n        cancelLaserTO = setTimeout(() => set((state) => ({ lasers: state.lasers.filter((t) => Date.now() - t <= 1000) })), 1000)\n        //playAudio(audio.zap, 0.5)\n      },\n      toggleSound(sound = !get().sound) {\n        set({ sound })\n        playAudio(audio.engine, 1, true)\n        //playAudio(audio.engine2, 0.3, true)\n        playAudio(audio.bg, 1, true)\n      },\n      updateMouse({ clientX: x, clientY: y }) {\n        get().mutation.mouse.set(x - window.innerWidth / 2, y - window.innerHeight / 2)\n      },\n      test(data) {\n        box.min.copy(data.offset)\n        box.max.copy(data.offset)\n        box.expandByScalar(data.size * data.scale)\n        data.hit.set(10000, 10000, 10000)\n        const result = get().mutation.ray.intersectBox(box, data.hit)\n        data.distance = get().mutation.ray.origin.distanceTo(data.hit)\n        return result\n      }\n    }\n  }\n})\n\nfunction randomData(count, track, radius, size, scale) {\n  return new Array(count).fill().map(() => {\n    const t = Math.random()\n    const pos = track.parameters.path.getPointAt(t)\n    pos.multiplyScalar(15)\n    const offset = pos\n      .clone()\n      .add(new THREE.Vector3(-radius + Math.random() * radius * 2, -radius + Math.random() * radius * 2, -radius + Math.random() * radius * 2))\n    const speed = 0.1 + Math.random()\n    return { guid: guid++, scale: typeof scale === 'function' ? scale() : scale, size, offset, pos, speed, radius, t, hit: new THREE.Vector3(), distance: 1000 }\n  })\n}\n\nfunction randomRings(count, track) {\n  let temp = []\n  let t = 0.4\n  for (let i = 0; i < count; i++) {\n    t += 0.003\n    const pos = track.parameters.path.getPointAt(t)\n    pos.multiplyScalar(15)\n    const segments = track.tangents.length\n    const pickt = t * segments\n    const pick = Math.floor(pickt)\n    const lookAt = track.parameters.path.getPointAt((t + 1 / track.parameters.path.getLength()) % 1).multiplyScalar(15)\n    const matrix = new THREE.Matrix4().lookAt(pos, lookAt, track.binormals[pick])\n    temp.push([pos.toArray(), matrix])\n  }\n  return temp\n}\n\nfunction playAudio(audio, volume = 1, loop = false) {\n  if (useStore.getState().sound) {\n    audio.currentTime = 0\n    audio.volume = volume\n    audio.loop = loop\n    audio.play()\n  } else audio.pause()\n}\n\nexport default useStore\nexport { audio, playAudio }\n","export default __webpack_public_path__ + \"static/media/earth.beb10304.jpg\";","export default __webpack_public_path__ + \"static/media/moon.1dd7bdd6.png\";","export default __webpack_public_path__ + \"static/media/mars.d5a1f3ac.jpg\";","\nimport React, { useState, Suspense } from 'react'\nimport {  Interactive } from '../react-xr/src/Interactions'\nimport { Text } from '@react-three/drei'\nimport useStore from '../store'\n\nfunction Box({ color, size, scale, children, ...rest}: any) {\n    return (\n      <mesh scale={scale} {...rest}>\n        <boxBufferGeometry attach=\"geometry\" args={size} />\n        <meshPhongMaterial attach=\"material\" color={color} />\n        {children}\n      </mesh>\n    )\n  }\n  \n\n export default function Button({camera, ...props}: any) {\n    const [hover, setHover] = useState(false)\n    const [color, setColor] = useState<any>('blue')\n    const [size, setSize] = useState<any>([0.4, 0.1, 0.01])\n    const [text, setText] = useState<any>(\"Press and Track Psyche\")\n    const actions = useStore( (state) => state.actions)\n    const toggle = useStore((state) => state.actions.toggleSound)\n\n    // action for on\n    const onSelect = () => {\n      setColor((Math.random() * 0xffffff) | 0)\n      setSize([0,0,0])\n      setText(\"\")\n      actions.init(camera)\n      toggle()\n    }\n\n    return (\n      <Interactive onHover={() => setHover(true)} onBlur={() => setHover(false)} onSelect={onSelect}>\n        <Box rotation={[0,90,0]} color={color} scale={hover ? [0.6, 0.6, 0.6] : [0.5, 0.5, 0.5]} size={size} {...props}>\n          <Text position={[0, 0, 0.01]} fontSize={0.03} color=\"#000\" anchorX=\"center\" anchorY=\"middle\">\n            {text}\n          </Text>\n        </Box>\n      </Interactive>\n    )\n  }","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useLoader, useFrame} from '@react-three/fiber'\nimport {TransformControls, OrbitControls, Stage} from '@react-three/drei'\n\nimport useStore from '../store'\n\nimport earthImg from '../images/earth.jpg'\nimport moonImg from '../images/moon.png'\nimport marsImg from '../images/mars.jpg'\nimport Button from '../3d/Buttons'\nexport default function Earth() {\n\n  const groupref = useRef()\n  const [earth, moon, mars] = useLoader(THREE.TextureLoader, [earthImg, moonImg, marsImg])\n\n  //subscribe the objects in this components to rotate the mesh on every frame rendered.\n  useFrame( (state, delta) => groupref.current.rotation.y  += 0.01 )\n  const { fov, position} = useStore( (state) => state.mutation)\n  //return the object view (three-js elements expressed in JSX)\n  return (\n    \n    // mars <group ref={ref} scale={[100, 100, 100]} position={[-5000, 0, 5000]}>\n\n    <group \n      ref={groupref} \n      scale={[200, 200, 200]} \n      position={[-4000, 0, 4000]}>\n\n        {/* start button */}\n        <Button position={[10,0,-10]} camera={{ position: [-5000, 0, 5000], near: 0.01, far: 100000, fov }} />\n        \n\n      {/* earth */}      \n      <mesh position={[0,0,0]}>\n        <sphereGeometry args={[5, 32, 32]} />\n        <meshStandardMaterial map={earth} roughness={1} fog={false} />\n      </mesh>\n\n\n      {/* moon */}\n      <mesh position={[5, 0, 5]}>\n        <sphereGeometry args={[0.75, 32, 32]} />\n        <meshStandardMaterial roughness={1} map={moon} fog={false} />\n      </mesh>\n\n\n      {/* <pointLight position={[-5, -5, -5]} distance={1000} intensity={6} /> */}\n      {/* sun \n      <mesh position={[-30, 0, -60]}>\n        <sphereGeometry args={[4, 32, 32]} />\n        <meshBasicMaterial color=\"#FFFF99\" fog={false} />\n        <pointLight distance={6100} intensity={10} color=\"white\" />1\n      </mesh>\n*/}\n    </group>\n  )\n}\n","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useFrame, useLoader } from '@react-three/fiber'\nimport {TransformControls, OrbitControls, Stage} from '@react-three/drei'\n\nimport marsImg from '../images/mars.jpg'\n\nexport default function Planet() {\n  const ref = useRef()\n  const [ mars ] = useLoader(THREE.TextureLoader, [ marsImg ])\n\n  useFrame( ()=> ref.current.rotation.y  =  ref.current.rotation.y + 0.01 )\n \n  return (\n\n    <group ref={ref} scale={[100, 100, 100]} position={[5000, 0, -5000]}>\n\n      {/* mars */}\n      <mesh position={[0,0,0]}>\n        <sphereGeometry args={[5, 32, 32]} />\n        <meshStandardMaterial map={mars} roughness={1} fog={false} />\n      </mesh>\n\n    </group>\n  )\n}\n","import React, { useRef } from 'react'\nimport { useThree, useFrame } from '@react-three/fiber'\nimport useStore from '../store'\n\nlet offset = 0\nexport default function Rig({ children }) {\n  const group = useRef()\n  const rig = useRef()\n  const mutation = useStore((state) => state.mutation)\n  const { fov, scale, binormal, normal, track, mouse } = mutation\n  const { camera } = useThree()\n\n  useFrame(() => {\n    const t = mutation.t\n    const pos = mutation.position.clone()\n    const segments = track.tangents.length\n    const pickt = t * segments\n    const pick = Math.floor(pickt)\n    const pickNext = (pick + 1) % segments\n    binormal.subVectors(track.binormals[pickNext], track.binormals[pick])\n    binormal.multiplyScalar(pickt - pick).add(track.binormals[pick])\n    const dir = track.parameters.path.getTangentAt(t)\n    offset += (Math.max(15, 15 + -mouse.y / 20) - offset) * 0.05\n    normal.copy(binormal).cross(dir)\n    pos.add(normal.clone().multiplyScalar(offset))\n    camera.position.copy(pos)\n    const lookAt = track.parameters.path.getPointAt((t + 30 / track.parameters.path.getLength()) % 1).multiplyScalar(scale)\n    camera.matrix.lookAt(camera.position, lookAt, normal)\n    camera.quaternion.setFromRotationMatrix(camera.matrix)\n    camera.fov += ((t > 0.4 && t < 0.45 ? 120 : fov) - camera.fov) * 0.05\n    camera.updateProjectionMatrix()\n    const lightPos = track.parameters.path.getPointAt((t + 1 / track.parameters.path.getLength()) % 1).multiplyScalar(scale)\n    group.current.position.copy(lightPos)\n    group.current.quaternion.setFromRotationMatrix(camera.matrix)\n  })\n\n  return (\n    <group ref={group}>\n      <pointLight distance={400} position={[0, 100, -420]} intensity={5} color=\"indianred\" />\n      <group ref={rig} position={[0, 0, -50]}>\n        {children}\n      </group>\n    </group>\n  )\n}\n","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useLoader, useFrame } from '@react-three/fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport useStore from '../store'\n\nconst geometry = new THREE.BoxBufferGeometry(1, 1, 40)\nconst lightgreen = new THREE.Color('lightgreen')\nconst hotpink = new THREE.Color('hotpink')\nconst laserMaterial = new THREE.MeshBasicMaterial({ color: lightgreen })\nconst crossMaterial = new THREE.MeshBasicMaterial({ color: hotpink, fog: false })\nconst position = new THREE.Vector3()\nconst direction = new THREE.Vector3()\n\nexport default function Ship() {\n  const { nodes } = useLoader(GLTFLoader, '/ship.gltf')\n  const mutation = useStore((state) => state.mutation)\n  const { clock, mouse, ray } = mutation\n  const lasers = useStore((state) => state.lasers)\n  const main = useRef()\n  const laserGroup = useRef()\n  const laserLight = useRef()\n  const exhaust = useRef()\n  const cross = useRef()\n  const target = useRef()\n\n  useFrame(() => {\n    main.current.position.z = Math.sin(clock.getElapsedTime() * 40) * Math.PI * 0.2\n    main.current.rotation.z += (mouse.x / 500 - main.current.rotation.z) * 0.2\n    main.current.rotation.x += (-mouse.y / 1200 - main.current.rotation.x) * 0.2\n    main.current.rotation.y += (-mouse.x / 1200 - main.current.rotation.y) * 0.2\n    main.current.position.x += (mouse.x / 10 - main.current.position.x) * 0.2\n    main.current.position.y += (25 + -mouse.y / 10 - main.current.position.y) * 0.2\n    exhaust.current.scale.x = 1 + Math.sin(clock.getElapsedTime() * 200)\n    exhaust.current.scale.y = 1 + Math.sin(clock.getElapsedTime() * 200)\n    for (let i = 0; i < lasers.length; i++) {\n      const group = laserGroup.current.children[i]\n      group.position.z -= 20\n    }\n    laserLight.current.intensity += ((lasers.length && Date.now() - lasers[lasers.length - 1] < 100 ? 20 : 0) - laserLight.current.intensity) * 0.3\n\n    // Get ships orientation and save it to the stores ray\n    main.current.getWorldPosition(position)\n    main.current.getWorldDirection(direction)\n    ray.origin.copy(position)\n    ray.direction.copy(direction.negate())\n\n    // ...\n    crossMaterial.color = mutation.hits ? lightgreen : hotpink\n    cross.current.visible = !mutation.hits\n    target.current.visible = !!mutation.hits\n  })\n\n  return (\n    <group ref={main}>\n      <group scale={[3.5, 3.5, 3.5]}>\n        <group ref={cross} position={[0, 0, -300]} name=\"cross\">\n          <mesh renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[20, 2, 2]} />\n          </mesh>\n          <mesh renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[2, 20, 2]} />\n          </mesh>\n        </group>\n        <group ref={target} position={[0, 0, -300]} name=\"target\">\n          <mesh position={[0, 20, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[40, 2, 2]} />\n          </mesh>\n          <mesh position={[0, -20, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[40, 2, 2]} />\n          </mesh>\n          <mesh position={[20, 0, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[2, 40, 2]} />\n          </mesh>\n          <mesh position={[-20, 0, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[2, 40, 2]} />\n          </mesh>\n        </group>\n        <pointLight ref={laserLight} position={[0, 0, -20]} distance={100} intensity={0} color=\"lightgreen\" />\n        <group ref={laserGroup}>\n          {lasers.map((t, i) => (\n            <group key={i}>\n              <mesh position={[-2.8, 0, -0.8]} geometry={geometry} material={laserMaterial} />\n              <mesh position={[2.8, 0, -0.8]} geometry={geometry} material={laserMaterial} />\n            </group>\n          ))}\n        </group>\n        <group rotation={[Math.PI / 2, Math.PI, 0]}>\n          <mesh name=\"Renault_(S,_T1)_0\" geometry={nodes['Renault_(S,_T1)_0'].geometry}>\n            <meshStandardMaterial color=\"#070707\" />\n          </mesh>\n          <mesh name=\"Renault_(S,_T1)_1\" geometry={nodes['Renault_(S,_T1)_1'].geometry}>\n            <meshStandardMaterial color=\"black\" />\n          </mesh>\n          <mesh name=\"Renault_(S,_T1)_2\" geometry={nodes['Renault_(S,_T1)_2'].geometry}>\n            <meshStandardMaterial color=\"#070707\" />\n          </mesh>\n          <mesh name=\"Renault_(S,_T1)_3\" geometry={nodes['Renault_(S,_T1)_3'].geometry}>\n            <meshBasicMaterial color=\"lightblue\" />\n          </mesh>\n          <mesh name=\"Renault_(S,_T1)_4\" geometry={nodes['Renault_(S,_T1)_4'].geometry}>\n            <meshBasicMaterial color=\"white\" />\n          </mesh>\n          <mesh name=\"Renault_(S,_T1)_5\" geometry={nodes['Renault_(S,_T1)_5'].geometry}>\n            <meshBasicMaterial color=\"teal\" />\n          </mesh>\n        </group>\n      </group>\n      <mesh ref={exhaust} scale={[1, 1, 30]} position={[0, 1, 30]}>\n        <dodecahedronBufferGeometry args={[1.5, 0]} />\n        <meshBasicMaterial color=\"lightblue\" />\n      </mesh>\n    </group>\n  )\n}\n","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useLoader, useFrame } from '@react-three/fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport useStore from '../store'\nimport { useGLTF } from '@react-three/drei'\nimport { Suspense } from 'react'\n\n\nconst geometry = new THREE.BoxBufferGeometry(1, 1, 40)\nconst lightgreen = new THREE.Color('lightgreen')\nconst hotpink = new THREE.Color('hotpink')\nconst laserMaterial = new THREE.MeshBasicMaterial({ color: lightgreen })\nconst crossMaterial = new THREE.MeshBasicMaterial({ color: hotpink, fog: false })\nconst position = new THREE.Vector3()\nconst direction = new THREE.Vector3()\n\nexport default function Ship() {\n  //const { nodes } = useLoader(GLTFLoader, '/Scene.gltf')\n  //const { nodes, materials } = useGLTF('/Scene.gltf')\n  const { nodes, materials } = useGLTF('/psyche/psychespacecraft2.glb')\n  const mutation = useStore((state) => state.mutation)\n  const { clock, mouse, ray } = mutation\n  const lasers = useStore((state) => state.lasers)\n  const main = useRef()\n  const laserGroup = useRef()\n  const laserLight = useRef()\n  const exhaust = useRef()\n  const cross = useRef()\n  const target = useRef()\n\n  useFrame(() => {\n    main.current.position.z = Math.sin(clock.getElapsedTime() * 40) * Math.PI * 0.2\n    main.current.rotation.z += (mouse.x / 500 - main.current.rotation.z) * 0.2\n    main.current.rotation.x += (-mouse.y / 1200 - main.current.rotation.x) * 0.2\n    main.current.rotation.y += (-mouse.x / 1200 - main.current.rotation.y) * 0.2\n    main.current.position.x += (mouse.x / 10 - main.current.position.x) * 0.2\n    main.current.position.y += (25 + -mouse.y / 10 - main.current.position.y) * 0.2\n    exhaust.current.scale.x = 1 + Math.sin(clock.getElapsedTime() * 200)\n    exhaust.current.scale.y = 1 + Math.sin(clock.getElapsedTime() * 200)\n    for (let i = 0; i < lasers.length; i++) {\n      const group = laserGroup.current.children[i]\n      group.position.z -= 20\n    }\n    laserLight.current.intensity += ((lasers.length && Date.now() - lasers[lasers.length - 1] < 100 ? 20 : 0) - laserLight.current.intensity) * 0.3\n\n    // Get ships orientation and save it to the stores ray\n    main.current.getWorldPosition(position)\n    main.current.getWorldDirection(direction)\n    ray.origin.copy(position)\n    ray.direction.copy(direction.negate())\n\n    // ...\n    crossMaterial.color = mutation.hits ? lightgreen : hotpink\n    cross.current.visible = !mutation.hits\n    target.current.visible = !!mutation.hits\n  })\n\n  return (\n    <group ref={main}>\n      <group scale={[0.5, 0.5, 0.5]}>\n        <group ref={cross} position={[0, 0, -300]} name=\"cross\">\n          {/*\n          <mesh renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[20, 2, 2]} />\n          </mesh>\n          <mesh renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[2, 20, 2]} />\n          </mesh>\n          */}\n        </group>\n        <group ref={target} position={[0, 0, -300]} name=\"target\">\n          <mesh position={[0, 20, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[40, 2, 2]} />\n          </mesh>\n          <mesh position={[0, -20, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[40, 2, 2]} />\n          </mesh>\n          <mesh position={[20, 0, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[2, 40, 2]} />\n          </mesh>\n          <mesh position={[-20, 0, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[2, 40, 2]} />\n          </mesh>\n        </group>\n        <pointLight ref={laserLight} position={[0, 0, -20]} distance={100} intensity={0} color=\"lightgreen\" />\n        <group ref={laserGroup}>\n          {lasers.map((t, i) => (\n            <group key={i}>\n              <mesh position={[-2.8, 0, -0.8]} geometry={geometry} material={laserMaterial} />\n              <mesh position={[2.8, 0, -0.8]} geometry={geometry} material={laserMaterial} />\n            </group>\n          ))}\n        </group>\n        <group rotation={[Math.PI / 2, Math.PI, 0]}>\n        <mesh\n        name=\"Psyche\"\n        castShadow\n        receiveShadow\n        geometry={nodes.Psyche.geometry}\n        material={nodes.Psyche.material}\n      />\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.Psyche001.geometry}\n        material={nodes.Psyche001.material}\n      />\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.Psyche002.geometry}\n        material={materials['Material.002']}\n      />\n        </group>\n      </group>\n      <mesh ref={exhaust} scale={[1, 1, 30]} position={[0, 1, 30]}>\n        <dodecahedronBufferGeometry args={[1.5, 0]} />\n        <meshBasicMaterial color=\"lightblue\" />\n      </mesh>\n    </group>\n  )\n}\n","import * as THREE from 'three'\nimport { useFrame, useLoader } from '@react-three/fiber'\nimport {TransformControls, OrbitControls, Stage} from '@react-three/drei'\nimport React, { useRef } from 'react'\nimport { useGLTF } from '@react-three/drei'\n\nexport default function Astroid () {\n  const ref = useRef()\n  const { nodes, materials } = useGLTF('/psyche/PsycheAsteroid1.glb')\n  useFrame( ()=> ref.current.rotation.x  +=  0.1 )\n \n  return (\n\n    <group ref={ref} scale={[300, 300, 300]} position={[6000, 0, 6000]}>\n\n      {/* the astroid */}\n\n      <mesh\n        geometry={nodes.psyche_LP001.geometry}\n        material={materials.psycheAsteroid}\n        rotation={[Math.PI / 2, 0, 0]}\n      />\n\n    </group>\n  )\n}\n","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useLoader, useFrame} from '@react-three/fiber'\nimport {TransformControls, OrbitControls, Stage} from '@react-three/drei'\n\nimport Sun from './Sun'\nimport Earth from './Earth'\nimport Mars from './Mars'\nimport Rig from './Rig'\nimport Ship from './Ship'\nimport Spacecraft from './Spacecraft'\nimport Astroid from './Astroid'\nimport Button from './Buttons'\nimport useStore from '../store'\n\n\n\nexport default function Solar() {\n\n  const groupref = useRef()\n  const { fov, position} = useStore( (state) => state.mutation)\n\n\n  //subscribe the objects in this components to rotate the mesh on every frame rendered.\n  useFrame( (state, delta) => groupref.current.rotation.y  += 0.01 )\n\n  //return the object view (three-js elements expressed in JSX)\n  return (\n\n    <group \n      ref={groupref} \n      scale={[1, 1, 1]} \n      position={[0, 0, 0]}\n    >\n\n    <Sun/>\n    {/* start button */}\n    <Button scale={[10,10,10]} position={[-10,0,10]} camera={{ position: [-5000, 0, 5000], near: 0.01, far: 100000, fov }} />\n\n    <Earth/>\n    <Mars/>\n    <Astroid/>\n    <Rig> \n      <Spacecraft/>\n    </Rig>\n\n    </group>\n  )\n}\n","import React, { useRef, useEffect } from 'react'\nimport useStore from '../store'\n\nexport default function Particles() {\n  const instancedMesh = useRef()\n  const { particles, dummy } = useStore((state) => state.mutation)\n\n  useEffect(() => {\n    particles.forEach((particle, i) => {\n      const { offset, scale } = particle\n      dummy.position.copy(offset)\n      dummy.scale.set(scale, scale, scale)\n      dummy.rotation.set(Math.sin(Math.random()) * Math.PI, Math.sin(Math.random()) * Math.PI, Math.cos(Math.random()) * Math.PI)\n      dummy.updateMatrix()\n      instancedMesh.current.setMatrixAt(i, dummy.matrix)\n    })\n    instancedMesh.current.instanceMatrix.needsUpdate = true\n  }, [])\n\n  return (\n    <instancedMesh ref={instancedMesh} args={[null, null, particles.length]} frustumCulled={false}>\n      <coneGeometry args={[2, 2, 3]} />\n      <meshStandardMaterial color=\"#606060\" />\n    </instancedMesh>\n  )\n}\n","import React, { useState, Suspense, useEffect } from 'react'\r\nimport { ARCanvas, useXR, useXRFrame} from './react-xr/src/XR'\r\nimport { DefaultXRControllers } from './react-xr/src/DefaultXRControllers'\r\n//import { DefaultXRControllers, ARCanvas, useXR, useXRFrame} from '@react-three/xr'\r\n\r\nimport { Stars, DeviceOrientationControls, PerspectiveCamera, OrbitControls, OrthographicCamera } from '@react-three/drei'\r\nimport './styles.css'\r\nimport { useThree } from '@react-three/fiber'\r\nimport { Plane, Sky, Text } from '@react-three/drei'\r\nimport * as THREE from 'three'\r\n\r\nimport Starz from './3d/Stars'\r\nimport Solar from './3d/Solar'\r\nimport Particles from './3d/Particles'\r\nimport Button from './3d/Buttons'\r\nimport useStore from './store'\r\n\r\n\r\n\r\nexport function App() {\r\n\r\n  const actions = useStore( (state) => state.actions)\r\n  const { fov, position} = useStore( (state) => state.mutation)\r\n\r\n  function Solarsystem() {\r\n    /*\r\n    const { gl } = useThree()\r\n    useXRFrame((time, xframe) => {\r\n      let refsp = gl.xr.getReferenceSpace()\r\n      let viewerPose = xframe.getViewerPose(refsp)\r\n      //actions.updateCam(viewerPose)\r\n    })\r\n    */\r\n    return (\r\n      <Suspense fallback={null}>\r\n        <Solar/>\r\n      </Suspense>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ARCanvas \r\n    gl={{ antialias: false }}\r\n    camera={{ position: [-5000, 0, 5000], near: 0.01, far: 100000, fov }}\r\n    //onCreated={({ gl, camera }) => { actions.init(camera) }} \r\n    > {/* <-- end of ARcanvas config */}\r\n\r\n      {/* <DeviceOrientationControls /> */}\r\n\r\n      {/* <PerspectiveCamera makeDefault fov={75} position={[0, 0, 16]} near={0.01} far={100000}> */}\r\n        {/* <pointLight intensity={1} position={[-10, -25, -10]} /> */}\r\n        {/* <spotLight castShadow intensity={2.25} angle={0.2} penumbra={1} position={[-25, 20, -15]} shadow-mapSize={[1024, 1024]} shadow-bias={-0.0001} /> */}\r\n      {/* </PerspectiveCamera> */}\r\n\r\n      {/*<OrbitControls autoRotate enablePan={false} enableZoom={false} maxPolarAngle={Math.PI / 2} minPolarAngle={Math.PI / 2} />\r\n        */}\r\n      <ambientLight intensity={0.25} />\r\n      \r\n        \r\n      <Solarsystem/>\r\n      {/*}\r\n      <Button camera={{ position: [-5000, 0, 5000], near: 0.01, far: 100000, fov }} />\r\n      */}\r\n      {/* <pointLight position={[10, 10, 10]} /> */}\r\n      {/* <Button position={[0, 0.1, -0.2]} /> */}\r\n      <DefaultXRControllers />\r\n\r\n      {/* <Stars radius={500} depth={50} count={1000} factor={10} /> */}\r\n\r\n      <Particles />\r\n      <Starz />\r\n   \r\n\r\n\r\n    </ARCanvas>\r\n  )\r\n}\r\n","import ReactDOM from 'react-dom'\r\nimport React from 'react'\r\nimport { App } from './App'\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}