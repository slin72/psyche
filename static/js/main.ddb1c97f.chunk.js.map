{"version":3,"sources":["3d/Stars.js","3d/Sun.js","audio/laser.mp3","audio/engine.mp3","audio/engine2.mp3","audio/bg.mp3","audio/warp.mp3","audio/click.mp3","audio/explosion.mp3","audio/index.js","store.js","images/earth.jpg","images/moon.png","images/mars.jpg","3d/Buttons.tsx","3d/Earth.js","3d/Mars.js","3d/Rig.js","3d/Ship.js","3d/Spacecraft.js","3d/Astroid.js","3d/Solar.js","3d/Particles.js","App.tsx","index.tsx"],"names":["Stars","count","positions","useMemo","i","r","theta","Math","PI","random","phi","acos","x","cos","sin","y","z","push","Float32Array","attachObject","length","array","itemSize","size","sizeAttenuation","color","fog","Sun","ref","useRef","useFrame","current","rotation","scale","position","args","distance","intensity","engine","Audio","zapAudio","engineAudio","bg","engine2Audio","bgAudio","HelixCurve","warpAudio","clickAudio","explosionAudio","t","optionalTarget","Vector3","point","a","b","t2","set","Curve","Stationary","GrannyKnot","multiplyScalar","guid","useStore","create","get","spline","track","THREE","spline2","spline3","cancelLaserTO","undefined","cancelExplosionTO","box","sound","camera","points","health","lasers","explosions","rocks","randomData","enemies","mutation","insertion","startTime","Date","now","fov","hits","rings","randomRings","particles","looptime","binormal","normal","clock","mouse","dummy","ray","actions","init","start","toggleSound","addEffect","time","parameters","path","getPointAt","warping","updates","map","data","state","clearTimeout","setTimeout","filter","e","rock","find","enemy","shoot","playAudio","audio","updateMouse","clientX","clientY","window","innerWidth","innerHeight","test","min","copy","offset","max","expandByScalar","hit","result","intersectBox","origin","distanceTo","radius","Array","fill","pos","clone","add","speed","temp","pickt","tangents","pick","floor","lookAt","getLength","matrix","binormals","toArray","volume","loop","getState","currentTime","play","pause","Box","children","rest","attach","Button","props","useState","hover","setHover","setColor","setSize","text","setText","toggle","onHover","onBlur","onSelect","Text","fontSize","anchorX","anchorY","Earth","groupref","useLoader","earthImg","moonImg","marsImg","earth","moon","delta","near","far","roughness","Planet","mars","Rig","group","rig","useThree","segments","pickNext","subVectors","dir","getTangentAt","cross","quaternion","setFromRotationMatrix","updateProjectionMatrix","lightPos","lightgreen","hotpink","geometry","laserMaterial","crossMaterial","direction","Ship","useGLTF","nodes","materials","main","laserGroup","laserLight","exhaust","target","getElapsedTime","getWorldPosition","getWorldDirection","negate","visible","name","renderOrder","material","castShadow","receiveShadow","Psyche","Psyche001","Psyche002","Astroid","psyche_LP001","psycheAsteroid","Solar","Particles","instancedMesh","useEffect","forEach","particle","updateMatrix","setMatrixAt","instanceMatrix","needsUpdate","frustumCulled","App","Solarsystem","fallback","gl","antialias","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ddb1c97f.chunk.js","sourcesContent":["import React, { useMemo } from 'react'\n\nexport default function Stars({ count = 2000 }) {\n  const positions = useMemo(() => {\n    let positions = []\n    for (let i = 0; i < count; i++) {\n      const r = 4000\n      const theta = 2 * Math.PI * Math.random()\n      const phi = Math.acos(2 * Math.random() - 1)\n      const x = r * Math.cos(theta) * Math.sin(phi) + (-2000 + Math.random() * 4000)\n      const y = r * Math.sin(theta) * Math.sin(phi) + (-2000 + Math.random() * 4000)\n      const z = r * Math.cos(phi) + (-1000 + Math.random() * 2000)\n      positions.push(x)\n      positions.push(y)\n      positions.push(z)\n    }\n    return new Float32Array(positions)\n  }, [count])\n  return (\n    <points>\n      <bufferGeometry>\n        <bufferAttribute attachObject={['attributes', 'position']} count={positions.length / 3} array={positions} itemSize={3} />\n      </bufferGeometry>\n      <pointsMaterial size={15} sizeAttenuation color=\"white\" fog={false} />\n    </points>\n  )\n}\n","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useFrame, useLoader } from '@react-three/fiber'\nimport {TransformControls, OrbitControls, Stage} from '@react-three/drei'\n\n\nexport default function Sun() {\n  const ref = useRef()\n\n  useFrame( ()=> ref.current.rotation.y  =  ref.current.rotation.y + 0.01 )\n \n  return (\n\n    <group ref={ref} scale={[100, 100, 100]} position={[0, 0, 0]}>\n\n      {/* the sun */}\n      <mesh position={[0, 0, 0]}>\n        <sphereGeometry args={[4, 32, 32]} />\n        <meshBasicMaterial color=\"#FFFF99\" fog={false} />\n        <pointLight distance={6100} intensity={10} color=\"white\" />1\n      </mesh>\n\n    </group>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/laser.373d639d.mp3\";","export default __webpack_public_path__ + \"static/media/engine.75bbe12e.mp3\";","export default __webpack_public_path__ + \"static/media/engine2.87c3c40a.mp3\";","export default __webpack_public_path__ + \"static/media/bg.c6b2b728.mp3\";","export default __webpack_public_path__ + \"static/media/warp.1f9bec85.mp3\";","export default __webpack_public_path__ + \"static/media/click.db461987.mp3\";","export default __webpack_public_path__ + \"static/media/explosion.615cfd43.mp3\";","import zapAudio from './laser.mp3'\nimport engineAudio from './engine.mp3'\nimport engine2Audio from './engine2.mp3'\nimport bgAudio from './bg.mp3'\nimport warpAudio from './warp.mp3'\nimport clickAudio from './click.mp3'\nimport explosionAudio from './explosion.mp3'\n\nconst mp3 = { explosion: explosionAudio }\n\nconst zap = new Audio(zapAudio)\nconst engine = new Audio(engineAudio)\nconst engine2 = new Audio(engine2Audio)\nconst bg = new Audio(bgAudio)\nconst warp = new Audio(warpAudio)\nconst click = new Audio(clickAudio)\nconst explosion = new Audio(explosionAudio)\n\nexport { zap, engine, engine2, bg, warp, click, explosion, mp3 }\n","import * as THREE from 'three'\nimport { Curves } from 'three/examples/jsm/curves/CurveExtras'\nimport { addEffect } from '@react-three/fiber'\nimport create from 'zustand'\nimport * as audio from './audio'\nimport { Curve, Texture, Vector3 } from 'three'\n\nclass HelixCurve extends Curve {\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst a = 80; // radius\n\t\tconst b = 150; // height\n\n\t\tconst t2 = 2 * Math.PI * t * b / 500;\n\n\t\tconst z = Math.cos( t2 ) * a;\n\t\tconst x = Math.sin( t2 ) * a;\n\t\tconst y = 0;\n\n\t\treturn point.set( x, y, z );\n\n\t}\n\n}\n\nclass Stationary extends Curve {\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst a = 80; // radius\n\t\tconst b = 150; // height\n\n\t\tconst t2 = 2 * Math.PI * t * b / 500;\n\n\t\tconst z = a;\n\t\tconst x = a;\n\t\tconst y = 1;\n\n\t\treturn point.set( x, y, z );\n\n\t}\n\n}\n\n\nclass GrannyKnot extends Curve {\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tt = 2 * Math.PI * t;\n\n\t\tconst x = - 0.22 * Math.cos( t ) - 1.28 * Math.sin( t ) - 0.44 * Math.cos( 3 * t ) - 0.78 * Math.sin( 3 * t );\n\t\tconst y = - 0.1 * Math.cos( 2 * t ) - 0.27 * Math.sin( 2 * t ) + 0.38 * Math.cos( 4 * t ) + 0.46 * Math.sin( 4 * t );\n\t\tconst z = 0.7 * Math.cos( 3 * t ) - 0.4 * Math.sin( 3 * t );\n\n\t\treturn point.set( x, y, z ).multiplyScalar( 20 );\n\n\t}\n\n}\n\n\nlet guid = 1\n\nconst useStore = create((set, get) => {\n  let spline = new GrannyKnot()\n  let track = new THREE.TubeBufferGeometry(spline, 250, 0.2, 10, true)\n  let spline2 = new HelixCurve()\n  let spline3 = new Stationary()\n  let track3 = new THREE.TubeBufferGeometry(spline3, 250, 0.2, 10, true)\n  let track2 = new THREE.TubeBufferGeometry(spline2, 250, 0.2, 10, true)\n  let cancelLaserTO = undefined\n  let cancelExplosionTO = undefined\n  const box = new THREE.Box3()\n\n  return {\n    sound: false,\n    camera: undefined,\n    points: 0,\n    health: 100,\n    lasers: [],\n    explosions: [],\n    rocks: randomData(100, track, 150, 8, () => 1 + Math.random() * 2.5),\n    enemies: randomData(10, track, 20, 15, 1),\n\n    mutation: {\n      insertion: false,\n      t: 0,\n      position: new THREE.Vector3(),\n      startTime: Date.now(),\n\n      track,\n      scale: 15,\n      fov: 70,\n      hits: false,\n      rings: randomRings(30, track),\n      particles: randomData(1500, track, 100, 1, () => 0.5 + Math.random() * 0.8),\n      looptime: 40 * 1000,\n      binormal: new THREE.Vector3(),\n      normal: new THREE.Vector3(),\n      clock: new THREE.Clock(false),\n      mouse: new THREE.Vector2(-250, 50),\n\n      // Re-usable objects\n      dummy: new THREE.Object3D(),\n      ray: new THREE.Ray(),\n      box: new THREE.Box3()\n    },\n\n    actions: {\n      init(camera) {\n        const { mutation, actions } = get()\n\n        set({ camera })\n        mutation.clock.start()\n        actions.toggleSound(get().sound)\n\n        addEffect(() => {\n          const { rocks, enemies } = get()\n\n          const time = Date.now()\n          const t = (mutation.t = ((time - mutation.startTime) % mutation.looptime) / mutation.looptime)\n          mutation.position = track.parameters.path.getPointAt(t)\n          mutation.position.multiplyScalar(mutation.scale)\n\n          // test for wormhole/warp\n          let warping = false\n          if (t > 0.3 && t < 0.4) {\n            if (!warping) {\n              warping = true\n              //playAudio(audio.warp)\n            }\n          } else if (t > 0.5) {\n            warping = false\n          }\n\n\n\n          // test for hits\n          //const r = rocks.filter(actions.test)\n          //const e = enemies.filter(actions.test)\n          //const a = r.concat(e)\n          const previous = mutation.hits\n          //mutation.hits = a.length\n          //if (previous === 0 && mutation.hits) playAudio(audio.click)\n          const lasers = get().lasers\n          if (mutation.hits && lasers.length && time - lasers[lasers.length - 1] < 100) {\n            const updates = a.map((data) => ({ time: Date.now(), ...data }))\n            set((state) => ({ explosions: [...state.explosions, ...updates] }))\n            clearTimeout(cancelExplosionTO)\n            cancelExplosionTO = setTimeout(() => set((state) => ({ explosions: state.explosions.filter(({ time }) => Date.now() - time <= 1000) })), 1000)\n            set((state) => ({\n              points: state.points + r.length * 100 + e.length * 200,\n              rocks: state.rocks.filter((rock) => !r.find((r) => r.guid === rock.guid)),\n              enemies: state.enemies.filter((enemy) => !e.find((e) => e.guid === enemy.guid))\n            }))\n          }\n          //if (a.some(data => data.distance < 15)) set(state => ({ health: state.health - 1 }))\n        })\n      },\n      shoot() {\n        set((state) => ({ lasers: [...state.lasers, Date.now()] }))\n        clearTimeout(cancelLaserTO)\n        cancelLaserTO = setTimeout(() => set((state) => ({ lasers: state.lasers.filter((t) => Date.now() - t <= 1000) })), 1000)\n        //playAudio(audio.zap, 0.5)\n      },\n      toggleSound(sound = !get().sound) {\n        set({ sound })\n        playAudio(audio.engine, 1, true)\n        //playAudio(audio.engine2, 0.3, true)\n        playAudio(audio.bg, 1, true)\n      },\n      updateMouse({ clientX: x, clientY: y }) {\n        get().mutation.mouse.set(x - window.innerWidth / 2, y - window.innerHeight / 2)\n      },\n      test(data) {\n        box.min.copy(data.offset)\n        box.max.copy(data.offset)\n        box.expandByScalar(data.size * data.scale)\n        data.hit.set(10000, 10000, 10000)\n        const result = get().mutation.ray.intersectBox(box, data.hit)\n        data.distance = get().mutation.ray.origin.distanceTo(data.hit)\n        return result\n      }\n    }\n  }\n})\n\nfunction randomData(count, track, radius, size, scale) {\n  return new Array(count).fill().map(() => {\n    const t = Math.random()\n    const pos = track.parameters.path.getPointAt(t)\n    pos.multiplyScalar(15)\n    const offset = pos\n      .clone()\n      .add(new THREE.Vector3(-radius + Math.random() * radius * 2, -radius + Math.random() * radius * 2, -radius + Math.random() * radius * 2))\n    const speed = 0.1 + Math.random()\n    return { guid: guid++, scale: typeof scale === 'function' ? scale() : scale, size, offset, pos, speed, radius, t, hit: new THREE.Vector3(), distance: 1000 }\n  })\n}\n\nfunction randomRings(count, track) {\n  let temp = []\n  let t = 0.4\n  for (let i = 0; i < count; i++) {\n    t += 0.003\n    const pos = track.parameters.path.getPointAt(t)\n    pos.multiplyScalar(15)\n    const segments = track.tangents.length\n    const pickt = t * segments\n    const pick = Math.floor(pickt)\n    const lookAt = track.parameters.path.getPointAt((t + 1 / track.parameters.path.getLength()) % 1).multiplyScalar(15)\n    const matrix = new THREE.Matrix4().lookAt(pos, lookAt, track.binormals[pick])\n    temp.push([pos.toArray(), matrix])\n  }\n  return temp\n}\n\nfunction playAudio(audio, volume = 1, loop = false) {\n  if (useStore.getState().sound) {\n    audio.currentTime = 0\n    audio.volume = volume\n    audio.loop = loop\n    audio.play()\n  } else audio.pause()\n}\n\nexport default useStore\nexport { audio, playAudio }\n","export default __webpack_public_path__ + \"static/media/earth.beb10304.jpg\";","export default __webpack_public_path__ + \"static/media/moon.1dd7bdd6.png\";","export default __webpack_public_path__ + \"static/media/mars.d5a1f3ac.jpg\";","\nimport React, { useState, Suspense } from 'react'\nimport {  Interactive } from '@react-three/xr'\nimport { Text } from '@react-three/drei'\nimport useStore from '../store'\n\nfunction Box({ color, size, scale, children, ...rest}: any) {\n    return (\n      <mesh scale={scale} {...rest}>\n        <boxBufferGeometry attach=\"geometry\" args={size} />\n        <meshPhongMaterial attach=\"material\" color={color} />\n        {children}\n      </mesh>\n    )\n  }\n  \n\n export default function Button({camera, ...props}: any) {\n    const [hover, setHover] = useState(false)\n    const [color, setColor] = useState<any>('blue')\n    const [size, setSize] = useState<any>([0.4, 0.1, 0.01])\n    const [text, setText] = useState<any>(\"Press and Track Psyche\")\n    const actions = useStore( (state) => state.actions)\n    const toggle = useStore((state) => state.actions.toggleSound)\n\n    // action for on\n    const onSelect = () => {\n      setColor((Math.random() * 0xffffff) | 0)\n      setSize([0,0,0])\n      setText(\"\")\n      actions.init(camera)\n      toggle()\n    }\n\n    return (\n      <Interactive onHover={() => setHover(true)} onBlur={() => setHover(false)} onSelect={onSelect}>\n        <Box rotation={[0,90,0]} color={color} scale={hover ? [0.6, 0.6, 0.6] : [0.5, 0.5, 0.5]} size={size} {...props}>\n          <Text position={[0, 0, 0.01]} fontSize={0.03} color=\"#000\" anchorX=\"center\" anchorY=\"middle\">\n            {text}\n          </Text>\n        </Box>\n      </Interactive>\n    )\n  }","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useLoader, useFrame} from '@react-three/fiber'\nimport {TransformControls, OrbitControls, Stage} from '@react-three/drei'\n\nimport useStore from '../store'\n\nimport earthImg from '../images/earth.jpg'\nimport moonImg from '../images/moon.png'\nimport marsImg from '../images/mars.jpg'\nimport Button from '../3d/Buttons'\nexport default function Earth() {\n\n  const groupref = useRef()\n  const [earth, moon, mars] = useLoader(THREE.TextureLoader, [earthImg, moonImg, marsImg])\n\n  //subscribe the objects in this components to rotate the mesh on every frame rendered.\n  useFrame( (state, delta) => groupref.current.rotation.y  += 0.01 )\n  const { fov, position} = useStore( (state) => state.mutation)\n  //return the object view (three-js elements expressed in JSX)\n  return (\n    \n    // mars <group ref={ref} scale={[100, 100, 100]} position={[-5000, 0, 5000]}>\n\n    <group \n      ref={groupref} \n      scale={[200, 200, 200]} \n      position={[-4000, 0, 4000]}>\n\n        {/* start button */}\n        <Button position={[10,0,-10]} camera={{ position: [-5000, 0, 5000], near: 0.01, far: 100000, fov }} />\n        \n\n      {/* earth */}      \n      <mesh position={[0,0,0]}>\n        <sphereGeometry args={[5, 32, 32]} />\n        <meshStandardMaterial map={earth} roughness={1} fog={false} />\n      </mesh>\n\n\n      {/* moon */}\n      <mesh position={[5, 0, 5]}>\n        <sphereGeometry args={[0.75, 32, 32]} />\n        <meshStandardMaterial roughness={1} map={moon} fog={false} />\n      </mesh>\n\n\n      {/* <pointLight position={[-5, -5, -5]} distance={1000} intensity={6} /> */}\n      {/* sun \n      <mesh position={[-30, 0, -60]}>\n        <sphereGeometry args={[4, 32, 32]} />\n        <meshBasicMaterial color=\"#FFFF99\" fog={false} />\n        <pointLight distance={6100} intensity={10} color=\"white\" />1\n      </mesh>\n*/}\n    </group>\n  )\n}\n","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useFrame, useLoader } from '@react-three/fiber'\nimport {TransformControls, OrbitControls, Stage} from '@react-three/drei'\n\nimport marsImg from '../images/mars.jpg'\n\nexport default function Planet() {\n  const ref = useRef()\n  const [ mars ] = useLoader(THREE.TextureLoader, [ marsImg ])\n\n  useFrame( ()=> ref.current.rotation.y  =  ref.current.rotation.y + 0.01 )\n \n  return (\n\n    <group ref={ref} scale={[100, 100, 100]} position={[5000, 0, -5000]}>\n\n      {/* mars */}\n      <mesh position={[0,0,0]}>\n        <sphereGeometry args={[5, 32, 32]} />\n        <meshStandardMaterial map={mars} roughness={1} fog={false} />\n      </mesh>\n\n    </group>\n  )\n}\n","import React, { useRef } from 'react'\nimport { useThree, useFrame } from '@react-three/fiber'\nimport useStore from '../store'\n\nlet offset = 0\nexport default function Rig({ children }) {\n  const group = useRef()\n  const rig = useRef()\n  const mutation = useStore((state) => state.mutation)\n  const { fov, scale, binormal, normal, track, mouse } = mutation\n  const { camera } = useThree()\n\n  useFrame(() => {\n    const t = mutation.t\n    const pos = mutation.position.clone()\n    const segments = track.tangents.length\n    const pickt = t * segments\n    const pick = Math.floor(pickt)\n    const pickNext = (pick + 1) % segments\n    binormal.subVectors(track.binormals[pickNext], track.binormals[pick])\n    binormal.multiplyScalar(pickt - pick).add(track.binormals[pick])\n    const dir = track.parameters.path.getTangentAt(t)\n    offset += (Math.max(15, 15 + -mouse.y / 20) - offset) * 0.05\n    normal.copy(binormal).cross(dir)\n    pos.add(normal.clone().multiplyScalar(offset))\n    camera.position.copy(pos)\n    const lookAt = track.parameters.path.getPointAt((t + 30 / track.parameters.path.getLength()) % 1).multiplyScalar(scale)\n    camera.matrix.lookAt(camera.position, lookAt, normal)\n    camera.quaternion.setFromRotationMatrix(camera.matrix)\n    camera.fov += ((t > 0.4 && t < 0.45 ? 120 : fov) - camera.fov) * 0.05\n    camera.updateProjectionMatrix()\n    const lightPos = track.parameters.path.getPointAt((t + 1 / track.parameters.path.getLength()) % 1).multiplyScalar(scale)\n    group.current.position.copy(lightPos)\n    group.current.quaternion.setFromRotationMatrix(camera.matrix)\n  })\n\n  return (\n    <group ref={group}>\n      <pointLight distance={400} position={[0, 100, -420]} intensity={5} color=\"indianred\" />\n      <group ref={rig} position={[0, 0, -50]}>\n        {children}\n      </group>\n    </group>\n  )\n}\n","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useLoader, useFrame } from '@react-three/fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport useStore from '../store'\n\nconst geometry = new THREE.BoxBufferGeometry(1, 1, 40)\nconst lightgreen = new THREE.Color('lightgreen')\nconst hotpink = new THREE.Color('hotpink')\nconst laserMaterial = new THREE.MeshBasicMaterial({ color: lightgreen })\nconst crossMaterial = new THREE.MeshBasicMaterial({ color: hotpink, fog: false })\nconst position = new THREE.Vector3()\nconst direction = new THREE.Vector3()\n\nexport default function Ship() {\n  const { nodes } = useLoader(GLTFLoader, '/ship.gltf')\n  const mutation = useStore((state) => state.mutation)\n  const { clock, mouse, ray } = mutation\n  const lasers = useStore((state) => state.lasers)\n  const main = useRef()\n  const laserGroup = useRef()\n  const laserLight = useRef()\n  const exhaust = useRef()\n  const cross = useRef()\n  const target = useRef()\n\n  useFrame(() => {\n    main.current.position.z = Math.sin(clock.getElapsedTime() * 40) * Math.PI * 0.2\n    main.current.rotation.z += (mouse.x / 500 - main.current.rotation.z) * 0.2\n    main.current.rotation.x += (-mouse.y / 1200 - main.current.rotation.x) * 0.2\n    main.current.rotation.y += (-mouse.x / 1200 - main.current.rotation.y) * 0.2\n    main.current.position.x += (mouse.x / 10 - main.current.position.x) * 0.2\n    main.current.position.y += (25 + -mouse.y / 10 - main.current.position.y) * 0.2\n    exhaust.current.scale.x = 1 + Math.sin(clock.getElapsedTime() * 200)\n    exhaust.current.scale.y = 1 + Math.sin(clock.getElapsedTime() * 200)\n    for (let i = 0; i < lasers.length; i++) {\n      const group = laserGroup.current.children[i]\n      group.position.z -= 20\n    }\n    laserLight.current.intensity += ((lasers.length && Date.now() - lasers[lasers.length - 1] < 100 ? 20 : 0) - laserLight.current.intensity) * 0.3\n\n    // Get ships orientation and save it to the stores ray\n    main.current.getWorldPosition(position)\n    main.current.getWorldDirection(direction)\n    ray.origin.copy(position)\n    ray.direction.copy(direction.negate())\n\n    // ...\n    crossMaterial.color = mutation.hits ? lightgreen : hotpink\n    cross.current.visible = !mutation.hits\n    target.current.visible = !!mutation.hits\n  })\n\n  return (\n    <group ref={main}>\n      <group scale={[3.5, 3.5, 3.5]}>\n        <group ref={cross} position={[0, 0, -300]} name=\"cross\">\n          <mesh renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[20, 2, 2]} />\n          </mesh>\n          <mesh renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[2, 20, 2]} />\n          </mesh>\n        </group>\n        <group ref={target} position={[0, 0, -300]} name=\"target\">\n          <mesh position={[0, 20, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[40, 2, 2]} />\n          </mesh>\n          <mesh position={[0, -20, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[40, 2, 2]} />\n          </mesh>\n          <mesh position={[20, 0, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[2, 40, 2]} />\n          </mesh>\n          <mesh position={[-20, 0, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[2, 40, 2]} />\n          </mesh>\n        </group>\n        <pointLight ref={laserLight} position={[0, 0, -20]} distance={100} intensity={0} color=\"lightgreen\" />\n        <group ref={laserGroup}>\n          {lasers.map((t, i) => (\n            <group key={i}>\n              <mesh position={[-2.8, 0, -0.8]} geometry={geometry} material={laserMaterial} />\n              <mesh position={[2.8, 0, -0.8]} geometry={geometry} material={laserMaterial} />\n            </group>\n          ))}\n        </group>\n        <group rotation={[Math.PI / 2, Math.PI, 0]}>\n          <mesh name=\"Renault_(S,_T1)_0\" geometry={nodes['Renault_(S,_T1)_0'].geometry}>\n            <meshStandardMaterial color=\"#070707\" />\n          </mesh>\n          <mesh name=\"Renault_(S,_T1)_1\" geometry={nodes['Renault_(S,_T1)_1'].geometry}>\n            <meshStandardMaterial color=\"black\" />\n          </mesh>\n          <mesh name=\"Renault_(S,_T1)_2\" geometry={nodes['Renault_(S,_T1)_2'].geometry}>\n            <meshStandardMaterial color=\"#070707\" />\n          </mesh>\n          <mesh name=\"Renault_(S,_T1)_3\" geometry={nodes['Renault_(S,_T1)_3'].geometry}>\n            <meshBasicMaterial color=\"lightblue\" />\n          </mesh>\n          <mesh name=\"Renault_(S,_T1)_4\" geometry={nodes['Renault_(S,_T1)_4'].geometry}>\n            <meshBasicMaterial color=\"white\" />\n          </mesh>\n          <mesh name=\"Renault_(S,_T1)_5\" geometry={nodes['Renault_(S,_T1)_5'].geometry}>\n            <meshBasicMaterial color=\"teal\" />\n          </mesh>\n        </group>\n      </group>\n      <mesh ref={exhaust} scale={[1, 1, 30]} position={[0, 1, 30]}>\n        <dodecahedronBufferGeometry args={[1.5, 0]} />\n        <meshBasicMaterial color=\"lightblue\" />\n      </mesh>\n    </group>\n  )\n}\n","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useLoader, useFrame } from '@react-three/fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport useStore from '../store'\nimport { useGLTF } from '@react-three/drei'\nimport { Suspense } from 'react'\n\n\nconst geometry = new THREE.BoxBufferGeometry(1, 1, 40)\nconst lightgreen = new THREE.Color('lightgreen')\nconst hotpink = new THREE.Color('hotpink')\nconst laserMaterial = new THREE.MeshBasicMaterial({ color: lightgreen })\nconst crossMaterial = new THREE.MeshBasicMaterial({ color: hotpink, fog: false })\nconst position = new THREE.Vector3()\nconst direction = new THREE.Vector3()\n\nexport default function Ship() {\n  //const { nodes } = useLoader(GLTFLoader, '/Scene.gltf')\n  //const { nodes, materials } = useGLTF('/Scene.gltf')\n  const { nodes, materials } = useGLTF('/psyche/psychespacecraft2.glb')\n  const mutation = useStore((state) => state.mutation)\n  const { clock, mouse, ray } = mutation\n  const lasers = useStore((state) => state.lasers)\n  const main = useRef()\n  const laserGroup = useRef()\n  const laserLight = useRef()\n  const exhaust = useRef()\n  const cross = useRef()\n  const target = useRef()\n\n  useFrame(() => {\n    main.current.position.z = Math.sin(clock.getElapsedTime() * 40) * Math.PI * 0.2\n    main.current.rotation.z += (mouse.x / 500 - main.current.rotation.z) * 0.2\n    main.current.rotation.x += (-mouse.y / 1200 - main.current.rotation.x) * 0.2\n    main.current.rotation.y += (-mouse.x / 1200 - main.current.rotation.y) * 0.2\n    main.current.position.x += (mouse.x / 10 - main.current.position.x) * 0.2\n    main.current.position.y += (25 + -mouse.y / 10 - main.current.position.y) * 0.2\n    exhaust.current.scale.x = 1 + Math.sin(clock.getElapsedTime() * 200)\n    exhaust.current.scale.y = 1 + Math.sin(clock.getElapsedTime() * 200)\n    for (let i = 0; i < lasers.length; i++) {\n      const group = laserGroup.current.children[i]\n      group.position.z -= 20\n    }\n    laserLight.current.intensity += ((lasers.length && Date.now() - lasers[lasers.length - 1] < 100 ? 20 : 0) - laserLight.current.intensity) * 0.3\n\n    // Get ships orientation and save it to the stores ray\n    main.current.getWorldPosition(position)\n    main.current.getWorldDirection(direction)\n    ray.origin.copy(position)\n    ray.direction.copy(direction.negate())\n\n    // ...\n    crossMaterial.color = mutation.hits ? lightgreen : hotpink\n    cross.current.visible = !mutation.hits\n    target.current.visible = !!mutation.hits\n  })\n\n  return (\n    <group ref={main}>\n      <group scale={[0.5, 0.5, 0.5]}>\n        <group ref={cross} position={[0, 0, -300]} name=\"cross\">\n          {/*\n          <mesh renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[20, 2, 2]} />\n          </mesh>\n          <mesh renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[2, 20, 2]} />\n          </mesh>\n          */}\n        </group>\n        <group ref={target} position={[0, 0, -300]} name=\"target\">\n          <mesh position={[0, 20, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[40, 2, 2]} />\n          </mesh>\n          <mesh position={[0, -20, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[40, 2, 2]} />\n          </mesh>\n          <mesh position={[20, 0, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[2, 40, 2]} />\n          </mesh>\n          <mesh position={[-20, 0, 0]} renderOrder={1000} material={crossMaterial}>\n            <boxGeometry args={[2, 40, 2]} />\n          </mesh>\n        </group>\n        <pointLight ref={laserLight} position={[0, 0, -20]} distance={100} intensity={0} color=\"lightgreen\" />\n        <group ref={laserGroup}>\n          {lasers.map((t, i) => (\n            <group key={i}>\n              <mesh position={[-2.8, 0, -0.8]} geometry={geometry} material={laserMaterial} />\n              <mesh position={[2.8, 0, -0.8]} geometry={geometry} material={laserMaterial} />\n            </group>\n          ))}\n        </group>\n        <group rotation={[Math.PI / 2, Math.PI, 0]}>\n        <mesh\n        name=\"Psyche\"\n        castShadow\n        receiveShadow\n        geometry={nodes.Psyche.geometry}\n        material={nodes.Psyche.material}\n      />\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.Psyche001.geometry}\n        material={nodes.Psyche001.material}\n      />\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.Psyche002.geometry}\n        material={materials['Material.002']}\n      />\n        </group>\n      </group>\n      <mesh ref={exhaust} scale={[1, 1, 30]} position={[0, 1, 30]}>\n        <dodecahedronBufferGeometry args={[1.5, 0]} />\n        <meshBasicMaterial color=\"lightblue\" />\n      </mesh>\n    </group>\n  )\n}\n","import * as THREE from 'three'\nimport { useFrame, useLoader } from '@react-three/fiber'\nimport {TransformControls, OrbitControls, Stage} from '@react-three/drei'\nimport React, { useRef } from 'react'\nimport { useGLTF } from '@react-three/drei'\n\nexport default function Astroid () {\n  const ref = useRef()\n  const { nodes, materials } = useGLTF('/psyche/PsycheAsteroid1.glb')\n  useFrame( ()=> ref.current.rotation.x  +=  0.1 )\n \n  return (\n\n    <group ref={ref} scale={[300, 300, 300]} position={[6000, 0, 6000]}>\n\n      {/* the astroid */}\n\n      <mesh\n        geometry={nodes.psyche_LP001.geometry}\n        material={materials.psycheAsteroid}\n        rotation={[Math.PI / 2, 0, 0]}\n      />\n\n    </group>\n  )\n}\n","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useLoader, useFrame} from '@react-three/fiber'\nimport {TransformControls, OrbitControls, Stage} from '@react-three/drei'\n\nimport Sun from './Sun'\nimport Earth from './Earth'\nimport Mars from './Mars'\nimport Rig from './Rig'\nimport Ship from './Ship'\nimport Spacecraft from './Spacecraft'\nimport Astroid from './Astroid'\nimport Button from './Buttons'\nimport useStore from '../store'\n\n\n\nexport default function Solar() {\n\n  const groupref = useRef()\n  const { fov, position} = useStore( (state) => state.mutation)\n\n\n  //subscribe the objects in this components to rotate the mesh on every frame rendered.\n  useFrame( (state, delta) => groupref.current.rotation.y  += 0.01 )\n\n  //return the object view (three-js elements expressed in JSX)\n  return (\n\n    <group \n      ref={groupref} \n      scale={[1, 1, 1]} \n      position={[0, 0, 0]}\n    >\n\n    <Sun/>\n    {/* start button */}\n    <Button scale={[10,10,10]} position={[-10,0,10]} camera={{ position: [-5000, 0, 5000], near: 0.01, far: 100000, fov }} />\n\n    <Earth/>\n    <Mars/>\n    <Astroid/>\n    <Rig> \n      <Spacecraft/>\n    </Rig>\n\n    </group>\n  )\n}\n","import React, { useRef, useEffect } from 'react'\nimport useStore from '../store'\n\nexport default function Particles() {\n  const instancedMesh = useRef()\n  const { particles, dummy } = useStore((state) => state.mutation)\n\n  useEffect(() => {\n    particles.forEach((particle, i) => {\n      const { offset, scale } = particle\n      dummy.position.copy(offset)\n      dummy.scale.set(scale, scale, scale)\n      dummy.rotation.set(Math.sin(Math.random()) * Math.PI, Math.sin(Math.random()) * Math.PI, Math.cos(Math.random()) * Math.PI)\n      dummy.updateMatrix()\n      instancedMesh.current.setMatrixAt(i, dummy.matrix)\n    })\n    instancedMesh.current.instanceMatrix.needsUpdate = true\n  }, [])\n\n  return (\n    <instancedMesh ref={instancedMesh} args={[null, null, particles.length]} frustumCulled={false}>\n      <coneGeometry args={[2, 2, 3]} />\n      <meshStandardMaterial color=\"#606060\" />\n    </instancedMesh>\n  )\n}\n","import React, { useState, Suspense, useEffect } from 'react'\r\nimport { DefaultXRControllers, ARCanvas, useXR, useXRFrame} from '@react-three/xr'\r\n\r\nimport { Stars, DeviceOrientationControls, PerspectiveCamera, OrbitControls, OrthographicCamera } from '@react-three/drei'\r\nimport './styles.css'\r\nimport { useThree } from '@react-three/fiber'\r\nimport { Plane, Sky, Text } from '@react-three/drei'\r\nimport * as THREE from 'three'\r\n\r\nimport Starz from './3d/Stars'\r\nimport Solar from './3d/Solar'\r\nimport Particles from './3d/Particles'\r\nimport Button from './3d/Buttons'\r\nimport useStore from './store'\r\n\r\n\r\n\r\nexport function App() {\r\n\r\n  const actions = useStore( (state) => state.actions)\r\n  const { fov, position} = useStore( (state) => state.mutation)\r\n\r\n  function Solarsystem() {\r\n    /*\r\n    const { gl } = useThree()\r\n    useXRFrame((time, xframe) => {\r\n      let refsp = gl.xr.getReferenceSpace()\r\n      let viewerPose = xframe.getViewerPose(refsp)\r\n      //actions.updateCam(viewerPose)\r\n    })\r\n    */\r\n    return (\r\n      <Suspense fallback={null}>\r\n        <Solar/>\r\n      </Suspense>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ARCanvas \r\n    gl={{ antialias: false }}\r\n    camera={{ position: [-5000, 0, 5000], near: 0.01, far: 100000, fov }}\r\n    //onCreated={({ gl, camera }) => { actions.init(camera) }} \r\n    > {/*ARcanvas config */}\r\n\r\n      {/* <DeviceOrientationControls /> */}\r\n\r\n      {/* <PerspectiveCamera makeDefault fov={75} position={[0, 0, 16]} near={0.01} far={100000}> */}\r\n        {/* <pointLight intensity={1} position={[-10, -25, -10]} /> */}\r\n        {/* <spotLight castShadow intensity={2.25} angle={0.2} penumbra={1} position={[-25, 20, -15]} shadow-mapSize={[1024, 1024]} shadow-bias={-0.0001} /> */}\r\n      {/* </PerspectiveCamera> */}\r\n\r\n      {/*<OrbitControls autoRotate enablePan={false} enableZoom={false} maxPolarAngle={Math.PI / 2} minPolarAngle={Math.PI / 2} />\r\n        */}\r\n      <ambientLight intensity={0.25} />\r\n      \r\n        \r\n      <Solarsystem/>\r\n      {/*}\r\n      <Button camera={{ position: [-5000, 0, 5000], near: 0.01, far: 100000, fov }} />\r\n      */}\r\n      {/* <pointLight position={[10, 10, 10]} /> */}\r\n      {/* <Button position={[0, 0.1, -0.2]} /> */}\r\n      <DefaultXRControllers />\r\n      {/* <Stars radius={500} depth={50} count={1000} factor={10} /> */}\r\n\r\n      <Particles />\r\n      <Starz />\r\n   \r\n\r\n\r\n    </ARCanvas>\r\n  )\r\n}\r\n","import ReactDOM from 'react-dom'\r\nimport React from 'react'\r\nimport { App } from './App'\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}